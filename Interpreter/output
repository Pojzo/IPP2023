 --- modulename: interpret, funcname: <module>
interpret.py(1): from input_handler import InputHandler
 --- modulename: _bootstrap, funcname: _find_and_load
<frozen importlib._bootstrap>(1024):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(166): <frozen importlib._bootstrap>(167):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(170):  --- modulename: _bootstrap, funcname: _get_module_lock
<frozen importlib._bootstrap>(185): <frozen importlib._bootstrap>(186): <frozen importlib._bootstrap>(187): <frozen importlib._bootstrap>(188): <frozen importlib._bootstrap>(189): <frozen importlib._bootstrap>(190): <frozen importlib._bootstrap>(192): <frozen importlib._bootstrap>(193): <frozen importlib._bootstrap>(196):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(72): <frozen importlib._bootstrap>(73): <frozen importlib._bootstrap>(74): <frozen importlib._bootstrap>(75): <frozen importlib._bootstrap>(76): <frozen importlib._bootstrap>(77): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(209): <frozen importlib._bootstrap>(211): <frozen importlib._bootstrap>(213): <frozen importlib._bootstrap>(171):  --- modulename: _bootstrap, funcname: acquire
<frozen importlib._bootstrap>(106): <frozen importlib._bootstrap>(107): <frozen importlib._bootstrap>(108): <frozen importlib._bootstrap>(109): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(111): <frozen importlib._bootstrap>(112): <frozen importlib._bootstrap>(113): <frozen importlib._bootstrap>(114): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(123): <frozen importlib._bootstrap>(1025): <frozen importlib._bootstrap>(1026): <frozen importlib._bootstrap>(1027):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked
<frozen importlib._bootstrap>(988): <frozen importlib._bootstrap>(989): <frozen importlib._bootstrap>(990): <frozen importlib._bootstrap>(1002):  --- modulename: _bootstrap, funcname: _find_spec
<frozen importlib._bootstrap>(923): <frozen importlib._bootstrap>(924): <frozen importlib._bootstrap>(929): <frozen importlib._bootstrap>(935): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap, funcname: find_spec
<frozen importlib._bootstrap>(748): <frozen importlib._bootstrap>(750): <frozen importlib._bootstrap>(753): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap, funcname: find_spec
<frozen importlib._bootstrap>(828): <frozen importlib._bootstrap>(831): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1437): <frozen importlib._bootstrap_external>(1438): <frozen importlib._bootstrap_external>(1439):  --- modulename: _bootstrap_external, funcname: _get_spec
<frozen importlib._bootstrap_external>(1404): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1365): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1577):  --- modulename: _bootstrap_external, funcname: _path_isfile
<frozen importlib._bootstrap_external>(161):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type
<frozen importlib._bootstrap_external>(152): <frozen importlib._bootstrap_external>(153):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(156): <frozen importlib._bootstrap_external>(1578): <frozen importlib._bootstrap_external>(1579): <frozen importlib._bootstrap_external>(1578):  --- modulename: _bootstrap_external, funcname: _get_spec
<frozen importlib._bootstrap_external>(1532):  --- modulename: _bootstrap_external, funcname: __init__
<frozen importlib._bootstrap_external>(1043): <frozen importlib._bootstrap_external>(1044): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1533):  --- modulename: _bootstrap_external, funcname: spec_from_file_location
<frozen importlib._bootstrap_external>(733): <frozen importlib._bootstrap_external>(745): <frozen importlib._bootstrap_external>(746):  --- modulename: _bootstrap_external, funcname: _path_isabs
<frozen importlib._bootstrap_external>(182): <frozen importlib._bootstrap_external>(758):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(359): <frozen importlib._bootstrap>(360): <frozen importlib._bootstrap>(361): <frozen importlib._bootstrap>(362): <frozen importlib._bootstrap>(363): <frozen importlib._bootstrap>(366): <frozen importlib._bootstrap>(367): <frozen importlib._bootstrap_external>(759): <frozen importlib._bootstrap_external>(762): <frozen importlib._bootstrap_external>(772): <frozen importlib._bootstrap_external>(783): <frozen importlib._bootstrap_external>(784): <frozen importlib._bootstrap_external>(789): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1416): <frozen importlib._bootstrap_external>(1417): <frozen importlib._bootstrap_external>(1440): <frozen importlib._bootstrap_external>(1442): <frozen importlib._bootstrap_external>(1453): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(948): <frozen importlib._bootstrap>(963): <frozen importlib._bootstrap>(1003): <frozen importlib._bootstrap>(1006):  --- modulename: _bootstrap, funcname: _load_unlocked
<frozen importlib._bootstrap>(666): <frozen importlib._bootstrap>(668): <frozen importlib._bootstrap>(674):  --- modulename: _bootstrap, funcname: module_from_spec
<frozen importlib._bootstrap>(567): <frozen importlib._bootstrap>(568): <frozen importlib._bootstrap>(571):  --- modulename: _bootstrap_external, funcname: create_module
<frozen importlib._bootstrap_external>(874): <frozen importlib._bootstrap>(575): <frozen importlib._bootstrap>(576):  --- modulename: _bootstrap, funcname: _new_module
<frozen importlib._bootstrap>(49): <frozen importlib._bootstrap>(577):  --- modulename: _bootstrap, funcname: _init_module_attrs
<frozen importlib._bootstrap>(496): <frozen importlib._bootstrap>(502): <frozen importlib._bootstrap>(503): <frozen importlib._bootstrap>(504): <frozen importlib._bootstrap>(525): <frozen importlib._bootstrap>(526): <frozen importlib._bootstrap>(530): <frozen importlib._bootstrap>(531): <frozen importlib._bootstrap>(532):  --- modulename: _bootstrap, funcname: parent
<frozen importlib._bootstrap>(407): <frozen importlib._bootstrap>(408): <frozen importlib._bootstrap>(536): <frozen importlib._bootstrap>(537): <frozen importlib._bootstrap>(541): <frozen importlib._bootstrap>(542): <frozen importlib._bootstrap>(548):  --- modulename: _bootstrap, funcname: has_location
<frozen importlib._bootstrap>(414): <frozen importlib._bootstrap>(549): <frozen importlib._bootstrap>(550): <frozen importlib._bootstrap>(551): <frozen importlib._bootstrap>(555): <frozen importlib._bootstrap>(556):  --- modulename: _bootstrap, funcname: cached
<frozen importlib._bootstrap>(393): <frozen importlib._bootstrap>(394): <frozen importlib._bootstrap>(395): <frozen importlib._bootstrap>(397):  --- modulename: _bootstrap_external, funcname: _get_cached
<frozen importlib._bootstrap_external>(511): <frozen importlib._bootstrap_external>(512): <frozen importlib._bootstrap_external>(513):  --- modulename: _bootstrap_external, funcname: cache_from_source
<frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(405): <frozen importlib._bootstrap_external>(406):  --- modulename: _bootstrap_external, funcname: _path_split
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134): <frozen importlib._bootstrap_external>(135): <frozen importlib._bootstrap_external>(137): <frozen importlib._bootstrap_external>(407): <frozen importlib._bootstrap_external>(408): <frozen importlib._bootstrap_external>(409): <frozen importlib._bootstrap_external>(411): <frozen importlib._bootstrap_external>(412): <frozen importlib._bootstrap_external>(413): <frozen importlib._bootstrap_external>(414): <frozen importlib._bootstrap_external>(417): <frozen importlib._bootstrap_external>(418): <frozen importlib._bootstrap_external>(422): <frozen importlib._bootstrap_external>(423): <frozen importlib._bootstrap_external>(448):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap>(398): <frozen importlib._bootstrap>(557): <frozen importlib._bootstrap>(558):  --- modulename: _bootstrap, funcname: cached
<frozen importlib._bootstrap>(393): <frozen importlib._bootstrap>(398): <frozen importlib._bootstrap>(561): <frozen importlib._bootstrap>(578): <frozen importlib._bootstrap>(679): <frozen importlib._bootstrap>(680): <frozen importlib._bootstrap>(681): <frozen importlib._bootstrap>(682): <frozen importlib._bootstrap>(683): <frozen importlib._bootstrap>(688):  --- modulename: _bootstrap_external, funcname: exec_module
<frozen importlib._bootstrap_external>(879):  --- modulename: _bootstrap_external, funcname: get_code
<frozen importlib._bootstrap_external>(957):  --- modulename: _bootstrap_external, funcname: _check_name_wrapper
<frozen importlib._bootstrap_external>(543): <frozen importlib._bootstrap_external>(545): <frozen importlib._bootstrap_external>(548):  --- modulename: _bootstrap_external, funcname: get_filename
<frozen importlib._bootstrap_external>(1068): <frozen importlib._bootstrap_external>(958): <frozen importlib._bootstrap_external>(959): <frozen importlib._bootstrap_external>(960): <frozen importlib._bootstrap_external>(961): <frozen importlib._bootstrap_external>(962): <frozen importlib._bootstrap_external>(963): <frozen importlib._bootstrap_external>(964):  --- modulename: _bootstrap_external, funcname: cache_from_source
<frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(405): <frozen importlib._bootstrap_external>(406):  --- modulename: _bootstrap_external, funcname: _path_split
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134): <frozen importlib._bootstrap_external>(135): <frozen importlib._bootstrap_external>(137): <frozen importlib._bootstrap_external>(407): <frozen importlib._bootstrap_external>(408): <frozen importlib._bootstrap_external>(409): <frozen importlib._bootstrap_external>(411): <frozen importlib._bootstrap_external>(412): <frozen importlib._bootstrap_external>(413): <frozen importlib._bootstrap_external>(414): <frozen importlib._bootstrap_external>(417): <frozen importlib._bootstrap_external>(418): <frozen importlib._bootstrap_external>(422): <frozen importlib._bootstrap_external>(423): <frozen importlib._bootstrap_external>(448):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(968): <frozen importlib._bootstrap_external>(969):  --- modulename: _bootstrap_external, funcname: path_stats
<frozen importlib._bootstrap_external>(1091):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1092): <frozen importlib._bootstrap_external>(973): <frozen importlib._bootstrap_external>(974): <frozen importlib._bootstrap_external>(975):  --- modulename: _bootstrap_external, funcname: get_data
<frozen importlib._bootstrap_external>(1072): <frozen importlib._bootstrap_external>(1073): <frozen importlib._bootstrap_external>(1074): <frozen importlib._bootstrap_external>(1073): <frozen importlib._bootstrap_external>(980): <frozen importlib._bootstrap_external>(981): <frozen importlib._bootstrap_external>(979): <frozen importlib._bootstrap_external>(983): <frozen importlib._bootstrap_external>(984):  --- modulename: _bootstrap_external, funcname: _classify_pyc
<frozen importlib._bootstrap_external>(601): <frozen importlib._bootstrap_external>(602): <frozen importlib._bootstrap_external>(606): <frozen importlib._bootstrap_external>(610):  --- modulename: _bootstrap_external, funcname: _unpack_uint32
<frozen importlib._bootstrap_external>(86): <frozen importlib._bootstrap_external>(87): <frozen importlib._bootstrap_external>(612): <frozen importlib._bootstrap_external>(615): <frozen importlib._bootstrap_external>(985): <frozen importlib._bootstrap_external>(986): <frozen importlib._bootstrap_external>(987): <frozen importlib._bootstrap_external>(1000): <frozen importlib._bootstrap_external>(1001): <frozen importlib._bootstrap_external>(1002): <frozen importlib._bootstrap_external>(1003): <frozen importlib._bootstrap_external>(1004): <frozen importlib._bootstrap_external>(1005): <frozen importlib._bootstrap_external>(1000):  --- modulename: _bootstrap_external, funcname: _validate_timestamp_pyc
<frozen importlib._bootstrap_external>(637):  --- modulename: _bootstrap_external, funcname: _unpack_uint32
<frozen importlib._bootstrap_external>(86): <frozen importlib._bootstrap_external>(87): <frozen importlib._bootstrap_external>(641): <frozen importlib._bootstrap_external>(642):  --- modulename: _bootstrap_external, funcname: _unpack_uint32
<frozen importlib._bootstrap_external>(86): <frozen importlib._bootstrap_external>(87): <frozen importlib._bootstrap_external>(1010): <frozen importlib._bootstrap_external>(1011): <frozen importlib._bootstrap_external>(1010):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1012): <frozen importlib._bootstrap_external>(1013): <frozen importlib._bootstrap_external>(1014): <frozen importlib._bootstrap_external>(1012):  --- modulename: _bootstrap_external, funcname: _compile_bytecode
<frozen importlib._bootstrap_external>(672): <frozen importlib._bootstrap_external>(673): <frozen importlib._bootstrap_external>(674):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(675): <frozen importlib._bootstrap_external>(676): <frozen importlib._bootstrap_external>(677): <frozen importlib._bootstrap_external>(880): <frozen importlib._bootstrap_external>(883):  --- modulename: _bootstrap, funcname: _call_with_frames_removed
<frozen importlib._bootstrap>(241):  --- modulename: input_handler, funcname: <module>
input_handler.py(1): import argparse
input_handler.py(2): from lxml import etree
 --- modulename: _bootstrap, funcname: _find_and_load
<frozen importlib._bootstrap>(1024):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(166): <frozen importlib._bootstrap>(167):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(170):  --- modulename: _bootstrap, funcname: _get_module_lock
<frozen importlib._bootstrap>(185): <frozen importlib._bootstrap>(186): <frozen importlib._bootstrap>(187): <frozen importlib._bootstrap>(188): <frozen importlib._bootstrap>(189): <frozen importlib._bootstrap>(190): <frozen importlib._bootstrap>(192): <frozen importlib._bootstrap>(193): <frozen importlib._bootstrap>(196):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(72): <frozen importlib._bootstrap>(73): <frozen importlib._bootstrap>(74): <frozen importlib._bootstrap>(75): <frozen importlib._bootstrap>(76): <frozen importlib._bootstrap>(77): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(209): <frozen importlib._bootstrap>(211): <frozen importlib._bootstrap>(213): <frozen importlib._bootstrap>(171):  --- modulename: _bootstrap, funcname: acquire
<frozen importlib._bootstrap>(106): <frozen importlib._bootstrap>(107): <frozen importlib._bootstrap>(108): <frozen importlib._bootstrap>(109): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(111): <frozen importlib._bootstrap>(112): <frozen importlib._bootstrap>(113): <frozen importlib._bootstrap>(114): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(123): <frozen importlib._bootstrap>(1025): <frozen importlib._bootstrap>(1026): <frozen importlib._bootstrap>(1027):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked
<frozen importlib._bootstrap>(988): <frozen importlib._bootstrap>(989): <frozen importlib._bootstrap>(990): <frozen importlib._bootstrap>(1002):  --- modulename: _bootstrap, funcname: _find_spec
<frozen importlib._bootstrap>(923): <frozen importlib._bootstrap>(924): <frozen importlib._bootstrap>(929): <frozen importlib._bootstrap>(935): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap, funcname: find_spec
<frozen importlib._bootstrap>(748): <frozen importlib._bootstrap>(750): <frozen importlib._bootstrap>(753): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap, funcname: find_spec
<frozen importlib._bootstrap>(828): <frozen importlib._bootstrap>(831): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1437): <frozen importlib._bootstrap_external>(1438): <frozen importlib._bootstrap_external>(1439):  --- modulename: _bootstrap_external, funcname: _get_spec
<frozen importlib._bootstrap_external>(1404): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1365): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1580): <frozen importlib._bootstrap_external>(1585): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1415): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1580): <frozen importlib._bootstrap_external>(1585): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1415): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1580): <frozen importlib._bootstrap_external>(1585): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1415): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1580): <frozen importlib._bootstrap_external>(1585): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1415): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1580): <frozen importlib._bootstrap_external>(1585): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1415): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1580): <frozen importlib._bootstrap_external>(1585): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1415): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1559):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1560): <frozen importlib._bootstrap_external>(1561): <frozen importlib._bootstrap_external>(1562):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1563):  --- modulename: _bootstrap_external, funcname: _path_isfile
<frozen importlib._bootstrap_external>(161):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type
<frozen importlib._bootstrap_external>(152): <frozen importlib._bootstrap_external>(153):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(154): <frozen importlib._bootstrap_external>(155): <frozen importlib._bootstrap_external>(1560): <frozen importlib._bootstrap_external>(1561): <frozen importlib._bootstrap_external>(1562):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1563):  --- modulename: _bootstrap_external, funcname: _path_isfile
<frozen importlib._bootstrap_external>(161):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type
<frozen importlib._bootstrap_external>(152): <frozen importlib._bootstrap_external>(153):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(154): <frozen importlib._bootstrap_external>(155): <frozen importlib._bootstrap_external>(1560): <frozen importlib._bootstrap_external>(1561): <frozen importlib._bootstrap_external>(1562):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1563):  --- modulename: _bootstrap_external, funcname: _path_isfile
<frozen importlib._bootstrap_external>(161):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type
<frozen importlib._bootstrap_external>(152): <frozen importlib._bootstrap_external>(153):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(154): <frozen importlib._bootstrap_external>(155): <frozen importlib._bootstrap_external>(1560): <frozen importlib._bootstrap_external>(1561): <frozen importlib._bootstrap_external>(1562):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1563):  --- modulename: _bootstrap_external, funcname: _path_isfile
<frozen importlib._bootstrap_external>(161):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type
<frozen importlib._bootstrap_external>(152): <frozen importlib._bootstrap_external>(153):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(156): <frozen importlib._bootstrap_external>(1564):  --- modulename: _bootstrap_external, funcname: _get_spec
<frozen importlib._bootstrap_external>(1532):  --- modulename: _bootstrap_external, funcname: __init__
<frozen importlib._bootstrap_external>(1043): <frozen importlib._bootstrap_external>(1044): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1533):  --- modulename: _bootstrap_external, funcname: spec_from_file_location
<frozen importlib._bootstrap_external>(733): <frozen importlib._bootstrap_external>(745): <frozen importlib._bootstrap_external>(746):  --- modulename: _bootstrap_external, funcname: _path_isabs
<frozen importlib._bootstrap_external>(182): <frozen importlib._bootstrap_external>(758):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(359): <frozen importlib._bootstrap>(360): <frozen importlib._bootstrap>(361): <frozen importlib._bootstrap>(362): <frozen importlib._bootstrap>(363): <frozen importlib._bootstrap>(366): <frozen importlib._bootstrap>(367): <frozen importlib._bootstrap_external>(759): <frozen importlib._bootstrap_external>(762): <frozen importlib._bootstrap_external>(772): <frozen importlib._bootstrap_external>(783): <frozen importlib._bootstrap_external>(784): <frozen importlib._bootstrap_external>(789): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1416): <frozen importlib._bootstrap_external>(1417): <frozen importlib._bootstrap_external>(1440): <frozen importlib._bootstrap_external>(1442): <frozen importlib._bootstrap_external>(1453): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(948): <frozen importlib._bootstrap>(963): <frozen importlib._bootstrap>(1003): <frozen importlib._bootstrap>(1006):  --- modulename: _bootstrap, funcname: _load_unlocked
<frozen importlib._bootstrap>(666): <frozen importlib._bootstrap>(668): <frozen importlib._bootstrap>(674):  --- modulename: _bootstrap, funcname: module_from_spec
<frozen importlib._bootstrap>(567): <frozen importlib._bootstrap>(568): <frozen importlib._bootstrap>(571):  --- modulename: _bootstrap_external, funcname: create_module
<frozen importlib._bootstrap_external>(874): <frozen importlib._bootstrap>(575): <frozen importlib._bootstrap>(576):  --- modulename: _bootstrap, funcname: _new_module
<frozen importlib._bootstrap>(49): <frozen importlib._bootstrap>(577):  --- modulename: _bootstrap, funcname: _init_module_attrs
<frozen importlib._bootstrap>(496): <frozen importlib._bootstrap>(502): <frozen importlib._bootstrap>(503): <frozen importlib._bootstrap>(504): <frozen importlib._bootstrap>(525): <frozen importlib._bootstrap>(526): <frozen importlib._bootstrap>(530): <frozen importlib._bootstrap>(531): <frozen importlib._bootstrap>(532):  --- modulename: _bootstrap, funcname: parent
<frozen importlib._bootstrap>(407): <frozen importlib._bootstrap>(410): <frozen importlib._bootstrap>(536): <frozen importlib._bootstrap>(537): <frozen importlib._bootstrap>(541): <frozen importlib._bootstrap>(542): <frozen importlib._bootstrap>(543): <frozen importlib._bootstrap>(544): <frozen importlib._bootstrap>(548):  --- modulename: _bootstrap, funcname: has_location
<frozen importlib._bootstrap>(414): <frozen importlib._bootstrap>(549): <frozen importlib._bootstrap>(550): <frozen importlib._bootstrap>(551): <frozen importlib._bootstrap>(555): <frozen importlib._bootstrap>(556):  --- modulename: _bootstrap, funcname: cached
<frozen importlib._bootstrap>(393): <frozen importlib._bootstrap>(394): <frozen importlib._bootstrap>(395): <frozen importlib._bootstrap>(397):  --- modulename: _bootstrap_external, funcname: _get_cached
<frozen importlib._bootstrap_external>(511): <frozen importlib._bootstrap_external>(512): <frozen importlib._bootstrap_external>(513):  --- modulename: _bootstrap_external, funcname: cache_from_source
<frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(405): <frozen importlib._bootstrap_external>(406):  --- modulename: _bootstrap_external, funcname: _path_split
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134): <frozen importlib._bootstrap_external>(135): <frozen importlib._bootstrap_external>(137): <frozen importlib._bootstrap_external>(407): <frozen importlib._bootstrap_external>(408): <frozen importlib._bootstrap_external>(409): <frozen importlib._bootstrap_external>(411): <frozen importlib._bootstrap_external>(412): <frozen importlib._bootstrap_external>(413): <frozen importlib._bootstrap_external>(414): <frozen importlib._bootstrap_external>(417): <frozen importlib._bootstrap_external>(418): <frozen importlib._bootstrap_external>(422): <frozen importlib._bootstrap_external>(423): <frozen importlib._bootstrap_external>(448):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap>(398): <frozen importlib._bootstrap>(557): <frozen importlib._bootstrap>(558):  --- modulename: _bootstrap, funcname: cached
<frozen importlib._bootstrap>(393): <frozen importlib._bootstrap>(398): <frozen importlib._bootstrap>(561): <frozen importlib._bootstrap>(578): <frozen importlib._bootstrap>(679): <frozen importlib._bootstrap>(680): <frozen importlib._bootstrap>(681): <frozen importlib._bootstrap>(682): <frozen importlib._bootstrap>(683): <frozen importlib._bootstrap>(688):  --- modulename: _bootstrap_external, funcname: exec_module
<frozen importlib._bootstrap_external>(879):  --- modulename: _bootstrap_external, funcname: get_code
<frozen importlib._bootstrap_external>(957):  --- modulename: _bootstrap_external, funcname: _check_name_wrapper
<frozen importlib._bootstrap_external>(543): <frozen importlib._bootstrap_external>(545): <frozen importlib._bootstrap_external>(548):  --- modulename: _bootstrap_external, funcname: get_filename
<frozen importlib._bootstrap_external>(1068): <frozen importlib._bootstrap_external>(958): <frozen importlib._bootstrap_external>(959): <frozen importlib._bootstrap_external>(960): <frozen importlib._bootstrap_external>(961): <frozen importlib._bootstrap_external>(962): <frozen importlib._bootstrap_external>(963): <frozen importlib._bootstrap_external>(964):  --- modulename: _bootstrap_external, funcname: cache_from_source
<frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(405): <frozen importlib._bootstrap_external>(406):  --- modulename: _bootstrap_external, funcname: _path_split
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134): <frozen importlib._bootstrap_external>(135): <frozen importlib._bootstrap_external>(137): <frozen importlib._bootstrap_external>(407): <frozen importlib._bootstrap_external>(408): <frozen importlib._bootstrap_external>(409): <frozen importlib._bootstrap_external>(411): <frozen importlib._bootstrap_external>(412): <frozen importlib._bootstrap_external>(413): <frozen importlib._bootstrap_external>(414): <frozen importlib._bootstrap_external>(417): <frozen importlib._bootstrap_external>(418): <frozen importlib._bootstrap_external>(422): <frozen importlib._bootstrap_external>(423): <frozen importlib._bootstrap_external>(448):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(968): <frozen importlib._bootstrap_external>(969):  --- modulename: _bootstrap_external, funcname: path_stats
<frozen importlib._bootstrap_external>(1091):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1092): <frozen importlib._bootstrap_external>(973): <frozen importlib._bootstrap_external>(974): <frozen importlib._bootstrap_external>(975):  --- modulename: _bootstrap_external, funcname: get_data
<frozen importlib._bootstrap_external>(1072): <frozen importlib._bootstrap_external>(1073): <frozen importlib._bootstrap_external>(1074): <frozen importlib._bootstrap_external>(1073): <frozen importlib._bootstrap_external>(980): <frozen importlib._bootstrap_external>(981): <frozen importlib._bootstrap_external>(979): <frozen importlib._bootstrap_external>(983): <frozen importlib._bootstrap_external>(984):  --- modulename: _bootstrap_external, funcname: _classify_pyc
<frozen importlib._bootstrap_external>(601): <frozen importlib._bootstrap_external>(602): <frozen importlib._bootstrap_external>(606): <frozen importlib._bootstrap_external>(610):  --- modulename: _bootstrap_external, funcname: _unpack_uint32
<frozen importlib._bootstrap_external>(86): <frozen importlib._bootstrap_external>(87): <frozen importlib._bootstrap_external>(612): <frozen importlib._bootstrap_external>(615): <frozen importlib._bootstrap_external>(985): <frozen importlib._bootstrap_external>(986): <frozen importlib._bootstrap_external>(987): <frozen importlib._bootstrap_external>(1000): <frozen importlib._bootstrap_external>(1001): <frozen importlib._bootstrap_external>(1002): <frozen importlib._bootstrap_external>(1003): <frozen importlib._bootstrap_external>(1004): <frozen importlib._bootstrap_external>(1005): <frozen importlib._bootstrap_external>(1000):  --- modulename: _bootstrap_external, funcname: _validate_timestamp_pyc
<frozen importlib._bootstrap_external>(637):  --- modulename: _bootstrap_external, funcname: _unpack_uint32
<frozen importlib._bootstrap_external>(86): <frozen importlib._bootstrap_external>(87): <frozen importlib._bootstrap_external>(641): <frozen importlib._bootstrap_external>(642):  --- modulename: _bootstrap_external, funcname: _unpack_uint32
<frozen importlib._bootstrap_external>(86): <frozen importlib._bootstrap_external>(87): <frozen importlib._bootstrap_external>(1010): <frozen importlib._bootstrap_external>(1011): <frozen importlib._bootstrap_external>(1010):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1012): <frozen importlib._bootstrap_external>(1013): <frozen importlib._bootstrap_external>(1014): <frozen importlib._bootstrap_external>(1012):  --- modulename: _bootstrap_external, funcname: _compile_bytecode
<frozen importlib._bootstrap_external>(672): <frozen importlib._bootstrap_external>(673): <frozen importlib._bootstrap_external>(674):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(675): <frozen importlib._bootstrap_external>(676): <frozen importlib._bootstrap_external>(677): <frozen importlib._bootstrap_external>(880): <frozen importlib._bootstrap_external>(883):  --- modulename: _bootstrap, funcname: _call_with_frames_removed
<frozen importlib._bootstrap>(241):  --- modulename: __init__, funcname: <module>
__init__.py(3): __version__ = "4.6.5"
__init__.py(6): def get_include():
<frozen importlib._bootstrap>(699): <frozen importlib._bootstrap>(700): <frozen importlib._bootstrap>(701):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap>(703): <frozen importlib._bootstrap>(705): <frozen importlib._bootstrap>(1007): <frozen importlib._bootstrap>(1016): <frozen importlib._bootstrap>(1024):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(174):  --- modulename: _bootstrap, funcname: release
<frozen importlib._bootstrap>(126): <frozen importlib._bootstrap>(127): <frozen importlib._bootstrap>(128): <frozen importlib._bootstrap>(130): <frozen importlib._bootstrap>(131): <frozen importlib._bootstrap>(132): <frozen importlib._bootstrap>(133): <frozen importlib._bootstrap>(134): <frozen importlib._bootstrap>(127):  --- modulename: _bootstrap, funcname: cb
<frozen importlib._bootstrap>(199): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(204): <frozen importlib._bootstrap>(205): <frozen importlib._bootstrap>(207):  --- modulename: _bootstrap, funcname: _handle_fromlist
<frozen importlib._bootstrap>(1063): <frozen importlib._bootstrap>(1064): <frozen importlib._bootstrap>(1071): <frozen importlib._bootstrap>(1075): <frozen importlib._bootstrap>(1076): <frozen importlib._bootstrap>(1077): <frozen importlib._bootstrap>(1078):  --- modulename: _bootstrap, funcname: _call_with_frames_removed
<frozen importlib._bootstrap>(241):  --- modulename: _bootstrap, funcname: _find_and_load
<frozen importlib._bootstrap>(1024):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(166): <frozen importlib._bootstrap>(167):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(170):  --- modulename: _bootstrap, funcname: _get_module_lock
<frozen importlib._bootstrap>(185): <frozen importlib._bootstrap>(186): <frozen importlib._bootstrap>(187): <frozen importlib._bootstrap>(188): <frozen importlib._bootstrap>(189): <frozen importlib._bootstrap>(190): <frozen importlib._bootstrap>(192): <frozen importlib._bootstrap>(193): <frozen importlib._bootstrap>(196):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(72): <frozen importlib._bootstrap>(73): <frozen importlib._bootstrap>(74): <frozen importlib._bootstrap>(75): <frozen importlib._bootstrap>(76): <frozen importlib._bootstrap>(77): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(209): <frozen importlib._bootstrap>(211): <frozen importlib._bootstrap>(213): <frozen importlib._bootstrap>(171):  --- modulename: _bootstrap, funcname: acquire
<frozen importlib._bootstrap>(106): <frozen importlib._bootstrap>(107): <frozen importlib._bootstrap>(108): <frozen importlib._bootstrap>(109): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(111): <frozen importlib._bootstrap>(112): <frozen importlib._bootstrap>(113): <frozen importlib._bootstrap>(114): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(123): <frozen importlib._bootstrap>(1025): <frozen importlib._bootstrap>(1026): <frozen importlib._bootstrap>(1027):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked
<frozen importlib._bootstrap>(988): <frozen importlib._bootstrap>(989): <frozen importlib._bootstrap>(990): <frozen importlib._bootstrap>(991): <frozen importlib._bootstrap>(994): <frozen importlib._bootstrap>(996): <frozen importlib._bootstrap>(997): <frozen importlib._bootstrap>(998): <frozen importlib._bootstrap>(1002):  --- modulename: _bootstrap, funcname: _find_spec
<frozen importlib._bootstrap>(923): <frozen importlib._bootstrap>(924): <frozen importlib._bootstrap>(929): <frozen importlib._bootstrap>(935): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap, funcname: find_spec
<frozen importlib._bootstrap>(748): <frozen importlib._bootstrap>(749): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap, funcname: find_spec
<frozen importlib._bootstrap>(828): <frozen importlib._bootstrap>(831): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1437): <frozen importlib._bootstrap_external>(1439):  --- modulename: _bootstrap_external, funcname: _get_spec
<frozen importlib._bootstrap_external>(1404): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1373): <frozen importlib._bootstrap_external>(1374):  --- modulename: _bootstrap_external, funcname: _path_hooks
<frozen importlib._bootstrap_external>(1346): <frozen importlib._bootstrap_external>(1348): <frozen importlib._bootstrap_external>(1349): <frozen importlib._bootstrap_external>(1350):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1351): <frozen importlib._bootstrap_external>(1352): <frozen importlib._bootstrap_external>(1348): <frozen importlib._bootstrap_external>(1349): <frozen importlib._bootstrap_external>(1350):  --- modulename: _bootstrap_external, funcname: path_hook_for_FileFinder
<frozen importlib._bootstrap_external>(1630):  --- modulename: _bootstrap_external, funcname: _path_isdir
<frozen importlib._bootstrap_external>(166): <frozen importlib._bootstrap_external>(168):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type
<frozen importlib._bootstrap_external>(152): <frozen importlib._bootstrap_external>(153):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(156): <frozen importlib._bootstrap_external>(1632):  --- modulename: _bootstrap_external, funcname: __init__
<frozen importlib._bootstrap_external>(1498): <frozen importlib._bootstrap_external>(1499): <frozen importlib._bootstrap_external>(1500):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(1500):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(1500):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(1500):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(1500): <frozen importlib._bootstrap_external>(1499): <frozen importlib._bootstrap_external>(1500):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(1500):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(1500): <frozen importlib._bootstrap_external>(1499): <frozen importlib._bootstrap_external>(1500):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(1500):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(1500): <frozen importlib._bootstrap_external>(1499): <frozen importlib._bootstrap_external>(1501): <frozen importlib._bootstrap_external>(1503): <frozen importlib._bootstrap_external>(1504):  --- modulename: _bootstrap_external, funcname: _path_isabs
<frozen importlib._bootstrap_external>(182): <frozen importlib._bootstrap_external>(1506): <frozen importlib._bootstrap_external>(1507): <frozen importlib._bootstrap_external>(1508): <frozen importlib._bootstrap_external>(1375): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1548):  --- modulename: _bootstrap_external, funcname: _fill_cache
<frozen importlib._bootstrap_external>(1589): <frozen importlib._bootstrap_external>(1590): <frozen importlib._bootstrap_external>(1591): <frozen importlib._bootstrap_external>(1598): <frozen importlib._bootstrap_external>(1599): <frozen importlib._bootstrap_external>(1615): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1577):  --- modulename: _bootstrap_external, funcname: _path_isfile
<frozen importlib._bootstrap_external>(161):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type
<frozen importlib._bootstrap_external>(152): <frozen importlib._bootstrap_external>(153):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(156): <frozen importlib._bootstrap_external>(1578): <frozen importlib._bootstrap_external>(1579): <frozen importlib._bootstrap_external>(1578):  --- modulename: _bootstrap_external, funcname: _get_spec
<frozen importlib._bootstrap_external>(1532):  --- modulename: _bootstrap_external, funcname: __init__
<frozen importlib._bootstrap_external>(1164): <frozen importlib._bootstrap_external>(1165): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1533):  --- modulename: _bootstrap_external, funcname: spec_from_file_location
<frozen importlib._bootstrap_external>(733): <frozen importlib._bootstrap_external>(745): <frozen importlib._bootstrap_external>(746):  --- modulename: _bootstrap_external, funcname: _path_isabs
<frozen importlib._bootstrap_external>(182): <frozen importlib._bootstrap_external>(758):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(359): <frozen importlib._bootstrap>(360): <frozen importlib._bootstrap>(361): <frozen importlib._bootstrap>(362): <frozen importlib._bootstrap>(363): <frozen importlib._bootstrap>(366): <frozen importlib._bootstrap>(367): <frozen importlib._bootstrap_external>(759): <frozen importlib._bootstrap_external>(762): <frozen importlib._bootstrap_external>(772): <frozen importlib._bootstrap_external>(783): <frozen importlib._bootstrap_external>(784): <frozen importlib._bootstrap_external>(789): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1416): <frozen importlib._bootstrap_external>(1417): <frozen importlib._bootstrap_external>(1440): <frozen importlib._bootstrap_external>(1442): <frozen importlib._bootstrap_external>(1453): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(948): <frozen importlib._bootstrap>(963): <frozen importlib._bootstrap>(1003): <frozen importlib._bootstrap>(1006):  --- modulename: _bootstrap, funcname: _load_unlocked
<frozen importlib._bootstrap>(666): <frozen importlib._bootstrap>(668): <frozen importlib._bootstrap>(674):  --- modulename: _bootstrap, funcname: module_from_spec
<frozen importlib._bootstrap>(567): <frozen importlib._bootstrap>(568): <frozen importlib._bootstrap>(571):  --- modulename: _bootstrap_external, funcname: create_module
<frozen importlib._bootstrap_external>(1176): <frozen importlib._bootstrap_external>(1177): <frozen importlib._bootstrap_external>(1176):  --- modulename: _bootstrap, funcname: _call_with_frames_removed
<frozen importlib._bootstrap>(241):  --- modulename: _bootstrap, funcname: parent
<frozen importlib._bootstrap>(407): <frozen importlib._bootstrap>(408): <frozen importlib._bootstrap_external>(1178): <frozen importlib._bootstrap_external>(1179): <frozen importlib._bootstrap_external>(1178):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1180): <frozen importlib._bootstrap>(575): <frozen importlib._bootstrap>(577):  --- modulename: _bootstrap, funcname: _init_module_attrs
<frozen importlib._bootstrap>(496): <frozen importlib._bootstrap>(502): <frozen importlib._bootstrap>(530): <frozen importlib._bootstrap>(536): <frozen importlib._bootstrap>(537): <frozen importlib._bootstrap>(541): <frozen importlib._bootstrap>(542): <frozen importlib._bootstrap>(548):  --- modulename: _bootstrap, funcname: has_location
<frozen importlib._bootstrap>(414): <frozen importlib._bootstrap>(549): <frozen importlib._bootstrap>(555): <frozen importlib._bootstrap>(556):  --- modulename: _bootstrap, funcname: cached
<frozen importlib._bootstrap>(393): <frozen importlib._bootstrap>(394): <frozen importlib._bootstrap>(395): <frozen importlib._bootstrap>(397):  --- modulename: _bootstrap_external, funcname: _get_cached
<frozen importlib._bootstrap_external>(511): <frozen importlib._bootstrap_external>(516): <frozen importlib._bootstrap_external>(519): <frozen importlib._bootstrap>(398): <frozen importlib._bootstrap>(561): <frozen importlib._bootstrap>(578): <frozen importlib._bootstrap>(679): <frozen importlib._bootstrap>(680): <frozen importlib._bootstrap>(681): <frozen importlib._bootstrap>(682): <frozen importlib._bootstrap>(683): <frozen importlib._bootstrap>(688):  --- modulename: _bootstrap_external, funcname: exec_module
<frozen importlib._bootstrap_external>(1184):  --- modulename: _bootstrap, funcname: _call_with_frames_removed
<frozen importlib._bootstrap>(241):  --- modulename: abc, funcname: register
abc.py(115):             return _abc_register(cls, subclass)
 --- modulename: abc, funcname: __subclasscheck__
abc.py(123):             return _abc_subclasscheck(cls, subclass)
 --- modulename: _collections_abc, funcname: __subclasshook__
_collections_abc.py(364):         if cls is Generator:
_collections_abc.py(365):             return _check_methods(C, '__iter__', '__next__',
_collections_abc.py(366):                                   'send', 'throw', 'close')
_collections_abc.py(365):             return _check_methods(C, '__iter__', '__next__',
 --- modulename: _collections_abc, funcname: _check_methods
_collections_abc.py(79):     mro = C.__mro__
_collections_abc.py(80):     for method in methods:
_collections_abc.py(81):         for B in mro:
_collections_abc.py(82):             if method in B.__dict__:
_collections_abc.py(83):                 if B.__dict__[method] is None:
_collections_abc.py(85):                 break
_collections_abc.py(80):     for method in methods:
_collections_abc.py(81):         for B in mro:
_collections_abc.py(82):             if method in B.__dict__:
_collections_abc.py(83):                 if B.__dict__[method] is None:
_collections_abc.py(85):                 break
_collections_abc.py(80):     for method in methods:
_collections_abc.py(81):         for B in mro:
_collections_abc.py(82):             if method in B.__dict__:
_collections_abc.py(83):                 if B.__dict__[method] is None:
_collections_abc.py(85):                 break
_collections_abc.py(80):     for method in methods:
_collections_abc.py(81):         for B in mro:
_collections_abc.py(82):             if method in B.__dict__:
_collections_abc.py(83):                 if B.__dict__[method] is None:
_collections_abc.py(85):                 break
_collections_abc.py(80):     for method in methods:
_collections_abc.py(81):         for B in mro:
_collections_abc.py(82):             if method in B.__dict__:
_collections_abc.py(83):                 if B.__dict__[method] is None:
_collections_abc.py(85):                 break
_collections_abc.py(80):     for method in methods:
_collections_abc.py(88):     return True
 --- modulename: abc, funcname: register
abc.py(115):             return _abc_register(cls, subclass)
 --- modulename: abc, funcname: __subclasscheck__
abc.py(123):             return _abc_subclasscheck(cls, subclass)
 --- modulename: _collections_abc, funcname: __subclasshook__
_collections_abc.py(158):         if cls is Coroutine:
_collections_abc.py(159):             return _check_methods(C, '__await__', 'send', 'throw', 'close')
 --- modulename: _collections_abc, funcname: _check_methods
_collections_abc.py(79):     mro = C.__mro__
_collections_abc.py(80):     for method in methods:
_collections_abc.py(81):         for B in mro:
_collections_abc.py(82):             if method in B.__dict__:
_collections_abc.py(83):                 if B.__dict__[method] is None:
_collections_abc.py(85):                 break
_collections_abc.py(80):     for method in methods:
_collections_abc.py(81):         for B in mro:
_collections_abc.py(82):             if method in B.__dict__:
_collections_abc.py(83):                 if B.__dict__[method] is None:
_collections_abc.py(85):                 break
_collections_abc.py(80):     for method in methods:
_collections_abc.py(81):         for B in mro:
_collections_abc.py(82):             if method in B.__dict__:
_collections_abc.py(83):                 if B.__dict__[method] is None:
_collections_abc.py(85):                 break
_collections_abc.py(80):     for method in methods:
_collections_abc.py(81):         for B in mro:
_collections_abc.py(82):             if method in B.__dict__:
_collections_abc.py(83):                 if B.__dict__[method] is None:
_collections_abc.py(85):                 break
_collections_abc.py(80):     for method in methods:
_collections_abc.py(88):     return True
 --- modulename: _bootstrap, funcname: _find_and_load
<frozen importlib._bootstrap>(1024):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(166): <frozen importlib._bootstrap>(167):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(170):  --- modulename: _bootstrap, funcname: _get_module_lock
<frozen importlib._bootstrap>(185): <frozen importlib._bootstrap>(186): <frozen importlib._bootstrap>(187): <frozen importlib._bootstrap>(188): <frozen importlib._bootstrap>(189): <frozen importlib._bootstrap>(190): <frozen importlib._bootstrap>(192): <frozen importlib._bootstrap>(193): <frozen importlib._bootstrap>(196):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(72): <frozen importlib._bootstrap>(73): <frozen importlib._bootstrap>(74): <frozen importlib._bootstrap>(75): <frozen importlib._bootstrap>(76): <frozen importlib._bootstrap>(77): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(209): <frozen importlib._bootstrap>(211): <frozen importlib._bootstrap>(213): <frozen importlib._bootstrap>(171):  --- modulename: _bootstrap, funcname: acquire
<frozen importlib._bootstrap>(106): <frozen importlib._bootstrap>(107): <frozen importlib._bootstrap>(108): <frozen importlib._bootstrap>(109): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(111): <frozen importlib._bootstrap>(112): <frozen importlib._bootstrap>(113): <frozen importlib._bootstrap>(114): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(123): <frozen importlib._bootstrap>(1025): <frozen importlib._bootstrap>(1026): <frozen importlib._bootstrap>(1027):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked
<frozen importlib._bootstrap>(988): <frozen importlib._bootstrap>(989): <frozen importlib._bootstrap>(990): <frozen importlib._bootstrap>(1002):  --- modulename: _bootstrap, funcname: _find_spec
<frozen importlib._bootstrap>(923): <frozen importlib._bootstrap>(924): <frozen importlib._bootstrap>(929): <frozen importlib._bootstrap>(935): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap, funcname: find_spec
<frozen importlib._bootstrap>(748): <frozen importlib._bootstrap>(750): <frozen importlib._bootstrap>(753): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap, funcname: find_spec
<frozen importlib._bootstrap>(828): <frozen importlib._bootstrap>(831): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1437): <frozen importlib._bootstrap_external>(1438): <frozen importlib._bootstrap_external>(1439):  --- modulename: _bootstrap_external, funcname: _get_spec
<frozen importlib._bootstrap_external>(1404): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1365): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1580): <frozen importlib._bootstrap_external>(1585): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1415): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1580): <frozen importlib._bootstrap_external>(1585): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1415): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1580): <frozen importlib._bootstrap_external>(1585): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1415): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1580): <frozen importlib._bootstrap_external>(1585): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1415): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1580): <frozen importlib._bootstrap_external>(1585): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1415): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1580): <frozen importlib._bootstrap_external>(1585): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1415): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1580): <frozen importlib._bootstrap_external>(1585): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1415): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1580): <frozen importlib._bootstrap_external>(1585): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1415): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1427):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(359): <frozen importlib._bootstrap>(360): <frozen importlib._bootstrap>(361): <frozen importlib._bootstrap>(362): <frozen importlib._bootstrap>(363): <frozen importlib._bootstrap>(366): <frozen importlib._bootstrap>(367): <frozen importlib._bootstrap_external>(1428): <frozen importlib._bootstrap_external>(1429): <frozen importlib._bootstrap_external>(1440): <frozen importlib._bootstrap_external>(1442): <frozen importlib._bootstrap_external>(1443): <frozen importlib._bootstrap_external>(1444): <frozen importlib._bootstrap_external>(1451): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(965): <frozen importlib._bootstrap>(1003): <frozen importlib._bootstrap>(1004): <frozen importlib._bootstrap>(1024):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(174):  --- modulename: _bootstrap, funcname: release
<frozen importlib._bootstrap>(126): <frozen importlib._bootstrap>(127): <frozen importlib._bootstrap>(128): <frozen importlib._bootstrap>(130): <frozen importlib._bootstrap>(131): <frozen importlib._bootstrap>(132): <frozen importlib._bootstrap>(133): <frozen importlib._bootstrap>(134): <frozen importlib._bootstrap>(127):  --- modulename: _bootstrap, funcname: cb
<frozen importlib._bootstrap>(199): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(204): <frozen importlib._bootstrap>(205): <frozen importlib._bootstrap>(207):  --- modulename: io, funcname: __getattr__
io.py(61):     if name == "OpenWrapper":
io.py(73):     raise AttributeError(name)
 --- modulename: _bootstrap, funcname: _handle_fromlist
<frozen importlib._bootstrap>(1063): <frozen importlib._bootstrap>(1064): <frozen importlib._bootstrap>(1071): <frozen importlib._bootstrap>(1075): <frozen importlib._bootstrap>(1063): <frozen importlib._bootstrap>(1087):  --- modulename: _bootstrap, funcname: _handle_fromlist
<frozen importlib._bootstrap>(1063): <frozen importlib._bootstrap>(1064): <frozen importlib._bootstrap>(1071): <frozen importlib._bootstrap>(1075): <frozen importlib._bootstrap>(1076): <frozen importlib._bootstrap>(1077): <frozen importlib._bootstrap>(1078):  --- modulename: _bootstrap, funcname: _call_with_frames_removed
<frozen importlib._bootstrap>(241):  --- modulename: _bootstrap, funcname: _find_and_load
<frozen importlib._bootstrap>(1024):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(166): <frozen importlib._bootstrap>(167):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(170):  --- modulename: _bootstrap, funcname: _get_module_lock
<frozen importlib._bootstrap>(185): <frozen importlib._bootstrap>(186): <frozen importlib._bootstrap>(187): <frozen importlib._bootstrap>(188): <frozen importlib._bootstrap>(189): <frozen importlib._bootstrap>(190): <frozen importlib._bootstrap>(192): <frozen importlib._bootstrap>(193): <frozen importlib._bootstrap>(196):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(72): <frozen importlib._bootstrap>(73): <frozen importlib._bootstrap>(74): <frozen importlib._bootstrap>(75): <frozen importlib._bootstrap>(76): <frozen importlib._bootstrap>(77): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(209): <frozen importlib._bootstrap>(211): <frozen importlib._bootstrap>(213): <frozen importlib._bootstrap>(171):  --- modulename: _bootstrap, funcname: acquire
<frozen importlib._bootstrap>(106): <frozen importlib._bootstrap>(107): <frozen importlib._bootstrap>(108): <frozen importlib._bootstrap>(109): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(111): <frozen importlib._bootstrap>(112): <frozen importlib._bootstrap>(113): <frozen importlib._bootstrap>(114): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(123): <frozen importlib._bootstrap>(1025): <frozen importlib._bootstrap>(1026): <frozen importlib._bootstrap>(1027):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked
<frozen importlib._bootstrap>(988): <frozen importlib._bootstrap>(989): <frozen importlib._bootstrap>(990): <frozen importlib._bootstrap>(991): <frozen importlib._bootstrap>(994): <frozen importlib._bootstrap>(996): <frozen importlib._bootstrap>(997): <frozen importlib._bootstrap>(998): <frozen importlib._bootstrap>(1002):  --- modulename: _bootstrap, funcname: _find_spec
<frozen importlib._bootstrap>(923): <frozen importlib._bootstrap>(924): <frozen importlib._bootstrap>(929): <frozen importlib._bootstrap>(935): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap, funcname: find_spec
<frozen importlib._bootstrap>(748): <frozen importlib._bootstrap>(749): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap, funcname: find_spec
<frozen importlib._bootstrap>(828): <frozen importlib._bootstrap>(831): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1437): <frozen importlib._bootstrap_external>(1439):  --- modulename: _bootstrap_external, funcname: _get_spec
<frozen importlib._bootstrap_external>(1404): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1577):  --- modulename: _bootstrap_external, funcname: _path_isfile
<frozen importlib._bootstrap_external>(161):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type
<frozen importlib._bootstrap_external>(152): <frozen importlib._bootstrap_external>(153):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(156): <frozen importlib._bootstrap_external>(1578): <frozen importlib._bootstrap_external>(1579): <frozen importlib._bootstrap_external>(1578):  --- modulename: _bootstrap_external, funcname: _get_spec
<frozen importlib._bootstrap_external>(1532):  --- modulename: _bootstrap_external, funcname: __init__
<frozen importlib._bootstrap_external>(1164): <frozen importlib._bootstrap_external>(1165): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1533):  --- modulename: _bootstrap_external, funcname: spec_from_file_location
<frozen importlib._bootstrap_external>(733): <frozen importlib._bootstrap_external>(745): <frozen importlib._bootstrap_external>(746):  --- modulename: _bootstrap_external, funcname: _path_isabs
<frozen importlib._bootstrap_external>(182): <frozen importlib._bootstrap_external>(758):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(359): <frozen importlib._bootstrap>(360): <frozen importlib._bootstrap>(361): <frozen importlib._bootstrap>(362): <frozen importlib._bootstrap>(363): <frozen importlib._bootstrap>(366): <frozen importlib._bootstrap>(367): <frozen importlib._bootstrap_external>(759): <frozen importlib._bootstrap_external>(762): <frozen importlib._bootstrap_external>(772): <frozen importlib._bootstrap_external>(783): <frozen importlib._bootstrap_external>(784): <frozen importlib._bootstrap_external>(789): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1416): <frozen importlib._bootstrap_external>(1417): <frozen importlib._bootstrap_external>(1440): <frozen importlib._bootstrap_external>(1442): <frozen importlib._bootstrap_external>(1453): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(948): <frozen importlib._bootstrap>(963): <frozen importlib._bootstrap>(1003): <frozen importlib._bootstrap>(1006):  --- modulename: _bootstrap, funcname: _load_unlocked
<frozen importlib._bootstrap>(666): <frozen importlib._bootstrap>(668): <frozen importlib._bootstrap>(674):  --- modulename: _bootstrap, funcname: module_from_spec
<frozen importlib._bootstrap>(567): <frozen importlib._bootstrap>(568): <frozen importlib._bootstrap>(571):  --- modulename: _bootstrap_external, funcname: create_module
<frozen importlib._bootstrap_external>(1176): <frozen importlib._bootstrap_external>(1177): <frozen importlib._bootstrap_external>(1176):  --- modulename: _bootstrap, funcname: _call_with_frames_removed
<frozen importlib._bootstrap>(241):  --- modulename: _bootstrap, funcname: parent
<frozen importlib._bootstrap>(407): <frozen importlib._bootstrap>(408): <frozen importlib._bootstrap_external>(1178): <frozen importlib._bootstrap_external>(1179): <frozen importlib._bootstrap_external>(1178):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1180): <frozen importlib._bootstrap>(575): <frozen importlib._bootstrap>(577):  --- modulename: _bootstrap, funcname: _init_module_attrs
<frozen importlib._bootstrap>(496): <frozen importlib._bootstrap>(502): <frozen importlib._bootstrap>(530): <frozen importlib._bootstrap>(536): <frozen importlib._bootstrap>(537): <frozen importlib._bootstrap>(541): <frozen importlib._bootstrap>(542): <frozen importlib._bootstrap>(548):  --- modulename: _bootstrap, funcname: has_location
<frozen importlib._bootstrap>(414): <frozen importlib._bootstrap>(549): <frozen importlib._bootstrap>(555): <frozen importlib._bootstrap>(556):  --- modulename: _bootstrap, funcname: cached
<frozen importlib._bootstrap>(393): <frozen importlib._bootstrap>(394): <frozen importlib._bootstrap>(395): <frozen importlib._bootstrap>(397):  --- modulename: _bootstrap_external, funcname: _get_cached
<frozen importlib._bootstrap_external>(511): <frozen importlib._bootstrap_external>(516): <frozen importlib._bootstrap_external>(519): <frozen importlib._bootstrap>(398): <frozen importlib._bootstrap>(561): <frozen importlib._bootstrap>(578): <frozen importlib._bootstrap>(679): <frozen importlib._bootstrap>(680): <frozen importlib._bootstrap>(681): <frozen importlib._bootstrap>(682): <frozen importlib._bootstrap>(683): <frozen importlib._bootstrap>(688):  --- modulename: _bootstrap_external, funcname: exec_module
<frozen importlib._bootstrap_external>(1184):  --- modulename: _bootstrap, funcname: _call_with_frames_removed
<frozen importlib._bootstrap>(241):  --- modulename: abc, funcname: register
abc.py(115):             return _abc_register(cls, subclass)
 --- modulename: abc, funcname: __subclasscheck__
abc.py(123):             return _abc_subclasscheck(cls, subclass)
 --- modulename: _bootstrap, funcname: _find_and_load
<frozen importlib._bootstrap>(1024):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(166): <frozen importlib._bootstrap>(167):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(170):  --- modulename: _bootstrap, funcname: _get_module_lock
<frozen importlib._bootstrap>(185): <frozen importlib._bootstrap>(186): <frozen importlib._bootstrap>(187): <frozen importlib._bootstrap>(188): <frozen importlib._bootstrap>(189): <frozen importlib._bootstrap>(190): <frozen importlib._bootstrap>(192): <frozen importlib._bootstrap>(193): <frozen importlib._bootstrap>(196):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(72): <frozen importlib._bootstrap>(73): <frozen importlib._bootstrap>(74): <frozen importlib._bootstrap>(75): <frozen importlib._bootstrap>(76): <frozen importlib._bootstrap>(77): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(209): <frozen importlib._bootstrap>(211): <frozen importlib._bootstrap>(213): <frozen importlib._bootstrap>(171):  --- modulename: _bootstrap, funcname: acquire
<frozen importlib._bootstrap>(106): <frozen importlib._bootstrap>(107): <frozen importlib._bootstrap>(108): <frozen importlib._bootstrap>(109): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(111): <frozen importlib._bootstrap>(112): <frozen importlib._bootstrap>(113): <frozen importlib._bootstrap>(114): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(123): <frozen importlib._bootstrap>(1025): <frozen importlib._bootstrap>(1026): <frozen importlib._bootstrap>(1027):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked
<frozen importlib._bootstrap>(988): <frozen importlib._bootstrap>(989): <frozen importlib._bootstrap>(990): <frozen importlib._bootstrap>(1002):  --- modulename: _bootstrap, funcname: _find_spec
<frozen importlib._bootstrap>(923): <frozen importlib._bootstrap>(924): <frozen importlib._bootstrap>(929): <frozen importlib._bootstrap>(935): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap, funcname: find_spec
<frozen importlib._bootstrap>(748): <frozen importlib._bootstrap>(750): <frozen importlib._bootstrap>(753): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap, funcname: find_spec
<frozen importlib._bootstrap>(828): <frozen importlib._bootstrap>(831): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1437): <frozen importlib._bootstrap_external>(1438): <frozen importlib._bootstrap_external>(1439):  --- modulename: _bootstrap_external, funcname: _get_spec
<frozen importlib._bootstrap_external>(1404): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1365): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1580): <frozen importlib._bootstrap_external>(1585): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1415): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1580): <frozen importlib._bootstrap_external>(1585): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1415): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1580): <frozen importlib._bootstrap_external>(1585): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1415): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1580): <frozen importlib._bootstrap_external>(1585): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1415): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1580): <frozen importlib._bootstrap_external>(1585): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1415): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1580): <frozen importlib._bootstrap_external>(1585): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1415): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1580): <frozen importlib._bootstrap_external>(1585): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1415): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1580): <frozen importlib._bootstrap_external>(1585): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1415): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1427):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(359): <frozen importlib._bootstrap>(360): <frozen importlib._bootstrap>(361): <frozen importlib._bootstrap>(362): <frozen importlib._bootstrap>(363): <frozen importlib._bootstrap>(366): <frozen importlib._bootstrap>(367): <frozen importlib._bootstrap_external>(1428): <frozen importlib._bootstrap_external>(1429): <frozen importlib._bootstrap_external>(1440): <frozen importlib._bootstrap_external>(1442): <frozen importlib._bootstrap_external>(1443): <frozen importlib._bootstrap_external>(1444): <frozen importlib._bootstrap_external>(1451): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(965): <frozen importlib._bootstrap>(1003): <frozen importlib._bootstrap>(1004): <frozen importlib._bootstrap>(1024):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(174):  --- modulename: _bootstrap, funcname: release
<frozen importlib._bootstrap>(126): <frozen importlib._bootstrap>(127): <frozen importlib._bootstrap>(128): <frozen importlib._bootstrap>(130): <frozen importlib._bootstrap>(131): <frozen importlib._bootstrap>(132): <frozen importlib._bootstrap>(133): <frozen importlib._bootstrap>(134): <frozen importlib._bootstrap>(127):  --- modulename: _bootstrap, funcname: cb
<frozen importlib._bootstrap>(199): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(204): <frozen importlib._bootstrap>(205): <frozen importlib._bootstrap>(207):  --- modulename: re, funcname: compile
re.py(251):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(290):     if isinstance(flags, RegexFlag):
re.py(292):     try:
re.py(293):         return _cache[type(pattern), pattern, flags]
re.py(294):     except KeyError:
re.py(295):         pass
re.py(296):     if isinstance(pattern, Pattern):
re.py(301):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(620):     return isinstance(obj, (str, bytes))
re.py(303):     p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(786):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(620):     return isinstance(obj, (str, bytes))
sre_compile.py(787):         pattern = p
sre_compile.py(788):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(947):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(226):         self.istext = isinstance(string, str)
sre_parse.py(227):         self.string = string
sre_parse.py(228):         if not self.istext:
sre_parse.py(230):         self.decoded_string = string
sre_parse.py(231):         self.index = 0
sre_parse.py(232):         self.next = None
sre_parse.py(233):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(949):     if state is None:
sre_parse.py(950):         state = State()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(77):         self.flags = 0
sre_parse.py(78):         self.groupdict = {}
sre_parse.py(79):         self.groupwidths = [None]  # group 0
sre_parse.py(80):         self.lookbehindgroups = None
sre_parse.py(81):         self.grouprefpos = {}
sre_parse.py(951):     state.flags = flags
sre_parse.py(952):     state.str = str
sre_parse.py(954):     try:
sre_parse.py(955):         p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(439):     items = []
sre_parse.py(440):     itemsappend = items.append
sre_parse.py(441):     sourcematch = source.match
sre_parse.py(442):     start = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(683):         elif this == ".":
sre_parse.py(686):         elif this == "(":
sre_parse.py(687):             start = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(688):             group = True
sre_parse.py(689):             name = None
sre_parse.py(690):             add_flags = 0
sre_parse.py(691):             del_flags = 0
sre_parse.py(692):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(834):             if group is not None:
sre_parse.py(835):                 try:
sre_parse.py(836):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(86):         gid = self.groups
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_parse.py(87):         self.groupwidths.append(None)
sre_parse.py(88):         if self.groups > MAXGROUPS:
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_parse.py(90):         if name is not None:
sre_parse.py(96):         return gid
sre_parse.py(839):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and
sre_parse.py(841):             p = _parse_sub(source, state, sub_verbose, nested + 1)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(439):     items = []
sre_parse.py(440):     itemsappend = items.append
sre_parse.py(441):     sourcematch = source.match
sre_parse.py(442):     start = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(533):             here = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(535):             set = []
sre_parse.py(536):             setappend = set.append
sre_parse.py(539):             if source.next == '[':
sre_parse.py(545):             negate = sourcematch("^")
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(553):                     break
sre_parse.py(606):             set = _uniq(set)
 --- modulename: sre_parse, funcname: _uniq
sre_parse.py(434):     return list(dict.fromkeys(items))
sre_parse.py(608):             if _len(set) == 1 and set[0][0] is LITERAL:
sre_parse.py(610):                 if negate:
sre_parse.py(611):                     subpatternappend((NOT_LITERAL, set[0][1]))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(627):                 min, max = 0, MAXREPEAT
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(511):             break # end of subpattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(533):             here = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(535):             set = []
sre_parse.py(536):             setappend = set.append
sre_parse.py(539):             if source.next == '[':
sre_parse.py(545):             negate = sourcematch("^")
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(553):                     break
sre_parse.py(606):             set = _uniq(set)
 --- modulename: sre_parse, funcname: _uniq
sre_parse.py(434):     return list(dict.fromkeys(items))
sre_parse.py(608):             if _len(set) == 1 and set[0][0] is LITERAL:
sre_parse.py(610):                 if negate:
sre_parse.py(611):                     subpatternappend((NOT_LITERAL, set[0][1]))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(627):                 min, max = 0, MAXREPEAT
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(511):             break # end of subpattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(511):             break # end of subpattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(625):                 min, max = 0, 1
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(511):             break # end of subpattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(526):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(358):     code = CATEGORIES.get(escape)
sre_parse.py(359):     if code:
sre_parse.py(361):     code = ESCAPES.get(escape)
sre_parse.py(362):     if code:
sre_parse.py(364):     try:
sre_parse.py(365):         c = escape[1:2]
sre_parse.py(366):         if c == "x":
sre_parse.py(372):         elif c == "u" and source.istext:
sre_parse.py(378):         elif c == "U" and source.istext:
sre_parse.py(386):         elif c == "N" and source.istext:
sre_parse.py(398):         elif c == "0":
sre_parse.py(402):         elif c in DIGITS:
sre_parse.py(425):         if len(escape) == 2:
sre_parse.py(426):             if c in ASCIILETTERS:
sre_parse.py(428):             return LITERAL, ord(escape[1])
sre_parse.py(527):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(526):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(358):     code = CATEGORIES.get(escape)
sre_parse.py(359):     if code:
sre_parse.py(361):     code = ESCAPES.get(escape)
sre_parse.py(362):     if code:
sre_parse.py(364):     try:
sre_parse.py(365):         c = escape[1:2]
sre_parse.py(366):         if c == "x":
sre_parse.py(372):         elif c == "u" and source.istext:
sre_parse.py(378):         elif c == "U" and source.istext:
sre_parse.py(386):         elif c == "N" and source.istext:
sre_parse.py(398):         elif c == "0":
sre_parse.py(402):         elif c in DIGITS:
sre_parse.py(425):         if len(escape) == 2:
sre_parse.py(426):             if c in ASCIILETTERS:
sre_parse.py(428):             return LITERAL, ord(escape[1])
sre_parse.py(527):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(511):             break # end of subpattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(526):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(358):     code = CATEGORIES.get(escape)
sre_parse.py(359):     if code:
sre_parse.py(361):     code = ESCAPES.get(escape)
sre_parse.py(362):     if code:
sre_parse.py(364):     try:
sre_parse.py(365):         c = escape[1:2]
sre_parse.py(366):         if c == "x":
sre_parse.py(372):         elif c == "u" and source.istext:
sre_parse.py(378):         elif c == "U" and source.istext:
sre_parse.py(386):         elif c == "N" and source.istext:
sre_parse.py(398):         elif c == "0":
sre_parse.py(402):         elif c in DIGITS:
sre_parse.py(425):         if len(escape) == 2:
sre_parse.py(426):             if c in ASCIILETTERS:
sre_parse.py(428):             return LITERAL, ord(escape[1])
sre_parse.py(527):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(526):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(358):     code = CATEGORIES.get(escape)
sre_parse.py(359):     if code:
sre_parse.py(361):     code = ESCAPES.get(escape)
sre_parse.py(362):     if code:
sre_parse.py(364):     try:
sre_parse.py(365):         c = escape[1:2]
sre_parse.py(366):         if c == "x":
sre_parse.py(372):         elif c == "u" and source.istext:
sre_parse.py(378):         elif c == "U" and source.istext:
sre_parse.py(386):         elif c == "N" and source.istext:
sre_parse.py(398):         elif c == "0":
sre_parse.py(402):         elif c in DIGITS:
sre_parse.py(425):         if len(escape) == 2:
sre_parse.py(426):             if c in ASCIILETTERS:
sre_parse.py(428):             return LITERAL, ord(escape[1])
sre_parse.py(527):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(511):             break # end of subpattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(533):             here = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(535):             set = []
sre_parse.py(536):             setappend = set.append
sre_parse.py(539):             if source.next == '[':
sre_parse.py(545):             negate = sourcematch("^")
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(555):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(298):     code = ESCAPES.get(escape)
sre_parse.py(299):     if code:
sre_parse.py(301):     code = CATEGORIES.get(escape)
sre_parse.py(302):     if code and code[0] is IN:
sre_parse.py(304):     try:
sre_parse.py(305):         c = escape[1:2]
sre_parse.py(306):         if c == "x":
sre_parse.py(312):         elif c == "u" and source.istext:
sre_parse.py(318):         elif c == "U" and source.istext:
sre_parse.py(326):         elif c == "N" and source.istext:
sre_parse.py(338):         elif c in OCTDIGITS:
sre_parse.py(346):         elif c in DIGITS:
sre_parse.py(348):         if len(escape) == 2:
sre_parse.py(349):             if c in ASCIILETTERS:
sre_parse.py(351):             return LITERAL, ord(escape[1])
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(555):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(298):     code = ESCAPES.get(escape)
sre_parse.py(299):     if code:
sre_parse.py(301):     code = CATEGORIES.get(escape)
sre_parse.py(302):     if code and code[0] is IN:
sre_parse.py(304):     try:
sre_parse.py(305):         c = escape[1:2]
sre_parse.py(306):         if c == "x":
sre_parse.py(312):         elif c == "u" and source.istext:
sre_parse.py(318):         elif c == "U" and source.istext:
sre_parse.py(326):         elif c == "N" and source.istext:
sre_parse.py(338):         elif c in OCTDIGITS:
sre_parse.py(346):         elif c in DIGITS:
sre_parse.py(348):         if len(escape) == 2:
sre_parse.py(349):             if c in ASCIILETTERS:
sre_parse.py(351):             return LITERAL, ord(escape[1])
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(555):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(298):     code = ESCAPES.get(escape)
sre_parse.py(299):     if code:
sre_parse.py(301):     code = CATEGORIES.get(escape)
sre_parse.py(302):     if code and code[0] is IN:
sre_parse.py(304):     try:
sre_parse.py(305):         c = escape[1:2]
sre_parse.py(306):         if c == "x":
sre_parse.py(312):         elif c == "u" and source.istext:
sre_parse.py(318):         elif c == "U" and source.istext:
sre_parse.py(326):         elif c == "N" and source.istext:
sre_parse.py(338):         elif c in OCTDIGITS:
sre_parse.py(346):         elif c in DIGITS:
sre_parse.py(348):         if len(escape) == 2:
sre_parse.py(349):             if c in ASCIILETTERS:
sre_parse.py(351):             return LITERAL, ord(escape[1])
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(555):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(298):     code = ESCAPES.get(escape)
sre_parse.py(299):     if code:
sre_parse.py(301):     code = CATEGORIES.get(escape)
sre_parse.py(302):     if code and code[0] is IN:
sre_parse.py(304):     try:
sre_parse.py(305):         c = escape[1:2]
sre_parse.py(306):         if c == "x":
sre_parse.py(312):         elif c == "u" and source.istext:
sre_parse.py(318):         elif c == "U" and source.istext:
sre_parse.py(326):         elif c == "N" and source.istext:
sre_parse.py(338):         elif c in OCTDIGITS:
sre_parse.py(346):         elif c in DIGITS:
sre_parse.py(348):         if len(escape) == 2:
sre_parse.py(349):             if c in ASCIILETTERS:
sre_parse.py(351):             return LITERAL, ord(escape[1])
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(553):                     break
sre_parse.py(606):             set = _uniq(set)
 --- modulename: sre_parse, funcname: _uniq
sre_parse.py(434):     return list(dict.fromkeys(items))
sre_parse.py(608):             if _len(set) == 1 and set[0][0] is LITERAL:
sre_parse.py(615):                 if negate:
sre_parse.py(619):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(511):             break # end of subpattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(447):             break
sre_parse.py(449):     if len(items) == 1:
sre_parse.py(452):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(455):     while True:
sre_parse.py(456):         prefix = None
sre_parse.py(457):         for item in items:
sre_parse.py(458):             if not item:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(460):             if prefix is None:
sre_parse.py(461):                 prefix = item[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(457):         for item in items:
sre_parse.py(458):             if not item:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(460):             if prefix is None:
sre_parse.py(462):             elif item[0] != prefix:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(463):                 break
sre_parse.py(471):         break
sre_parse.py(474):     set = []
sre_parse.py(475):     for item in items:
sre_parse.py(476):         if len(item) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(477):             break
sre_parse.py(491):     subpattern.append((BRANCH, (None, items)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(492):     return subpattern
sre_parse.py(842):             if not source.match(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(845):             if group is not None:
sre_parse.py(846):                 state.closegroup(group, p)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(98):         self.groupwidths[gid] = p.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(182):                 i = MAXREPEAT - 1
sre_parse.py(183):                 j = 0
sre_parse.py(184):                 for av in av[1]:
sre_parse.py(185):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(186):                     i = min(i, l)
sre_parse.py(187):                     j = max(j, h)
sre_parse.py(184):                 for av in av[1]:
sre_parse.py(185):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(186):                     i = min(i, l)
sre_parse.py(187):                     j = max(j, h)
sre_parse.py(184):                 for av in av[1]:
sre_parse.py(185):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(186):                     i = min(i, l)
sre_parse.py(187):                     j = max(j, h)
sre_parse.py(184):                 for av in av[1]:
sre_parse.py(185):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(186):                     i = min(i, l)
sre_parse.py(187):                     j = max(j, h)
sre_parse.py(184):                 for av in av[1]:
sre_parse.py(185):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(186):                     i = min(i, l)
sre_parse.py(187):                     j = max(j, h)
sre_parse.py(184):                 for av in av[1]:
sre_parse.py(185):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(186):                     i = min(i, l)
sre_parse.py(187):                     j = max(j, h)
sre_parse.py(184):                 for av in av[1]:
sre_parse.py(185):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(186):                     i = min(i, l)
sre_parse.py(187):                     j = max(j, h)
sre_parse.py(184):                 for av in av[1]:
sre_parse.py(188):                 lo = lo + i
sre_parse.py(189):                 hi = hi + j
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(847):             subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(511):             break # end of subpattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(862):             group, add_flags, del_flags, p = av
sre_parse.py(863):             if group is None and not add_flags and not del_flags:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(683):         elif this == ".":
sre_parse.py(686):         elif this == "(":
sre_parse.py(687):             start = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(688):             group = True
sre_parse.py(689):             name = None
sre_parse.py(690):             add_flags = 0
sre_parse.py(691):             del_flags = 0
sre_parse.py(692):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(834):             if group is not None:
sre_parse.py(835):                 try:
sre_parse.py(836):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(86):         gid = self.groups
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_parse.py(87):         self.groupwidths.append(None)
sre_parse.py(88):         if self.groups > MAXGROUPS:
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_parse.py(90):         if name is not None:
sre_parse.py(96):         return gid
sre_parse.py(839):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and
sre_parse.py(841):             p = _parse_sub(source, state, sub_verbose, nested + 1)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(439):     items = []
sre_parse.py(440):     itemsappend = items.append
sre_parse.py(441):     sourcematch = source.match
sre_parse.py(442):     start = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(683):         elif this == ".":
sre_parse.py(686):         elif this == "(":
sre_parse.py(687):             start = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(688):             group = True
sre_parse.py(689):             name = None
sre_parse.py(690):             add_flags = 0
sre_parse.py(691):             del_flags = 0
sre_parse.py(692):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(694):                 char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(695):                 if char is None:
sre_parse.py(697):                 if char == "P":
sre_parse.py(728):                 elif char == ":":
sre_parse.py(730):                     group = None
sre_parse.py(834):             if group is not None:
sre_parse.py(839):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and
sre_parse.py(841):             p = _parse_sub(source, state, sub_verbose, nested + 1)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(439):     items = []
sre_parse.py(440):     itemsappend = items.append
sre_parse.py(441):     sourcematch = source.match
sre_parse.py(442):     start = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(526):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(358):     code = CATEGORIES.get(escape)
sre_parse.py(359):     if code:
sre_parse.py(361):     code = ESCAPES.get(escape)
sre_parse.py(362):     if code:
sre_parse.py(364):     try:
sre_parse.py(365):         c = escape[1:2]
sre_parse.py(366):         if c == "x":
sre_parse.py(372):         elif c == "u" and source.istext:
sre_parse.py(378):         elif c == "U" and source.istext:
sre_parse.py(386):         elif c == "N" and source.istext:
sre_parse.py(398):         elif c == "0":
sre_parse.py(402):         elif c in DIGITS:
sre_parse.py(425):         if len(escape) == 2:
sre_parse.py(426):             if c in ASCIILETTERS:
sre_parse.py(428):             return LITERAL, ord(escape[1])
sre_parse.py(527):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(533):             here = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(535):             set = []
sre_parse.py(536):             setappend = set.append
sre_parse.py(539):             if source.next == '[':
sre_parse.py(545):             negate = sourcematch("^")
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(553):                     break
sre_parse.py(606):             set = _uniq(set)
 --- modulename: sre_parse, funcname: _uniq
sre_parse.py(434):     return list(dict.fromkeys(items))
sre_parse.py(608):             if _len(set) == 1 and set[0][0] is LITERAL:
sre_parse.py(610):                 if negate:
sre_parse.py(611):                     subpatternappend((NOT_LITERAL, set[0][1]))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(629):             elif this == "+":
sre_parse.py(630):                 min, max = 1, MAXREPEAT
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(526):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(358):     code = CATEGORIES.get(escape)
sre_parse.py(359):     if code:
sre_parse.py(361):     code = ESCAPES.get(escape)
sre_parse.py(362):     if code:
sre_parse.py(364):     try:
sre_parse.py(365):         c = escape[1:2]
sre_parse.py(366):         if c == "x":
sre_parse.py(372):         elif c == "u" and source.istext:
sre_parse.py(378):         elif c == "U" and source.istext:
sre_parse.py(386):         elif c == "N" and source.istext:
sre_parse.py(398):         elif c == "0":
sre_parse.py(402):         elif c in DIGITS:
sre_parse.py(425):         if len(escape) == 2:
sre_parse.py(426):             if c in ASCIILETTERS:
sre_parse.py(428):             return LITERAL, ord(escape[1])
sre_parse.py(527):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(511):             break # end of subpattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(447):             break
sre_parse.py(449):     if len(items) == 1:
sre_parse.py(450):         return items[0]
sre_parse.py(842):             if not source.match(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(845):             if group is not None:
sre_parse.py(847):             subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(625):                 min, max = 0, 1
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(675):                 group, add_flags, del_flags, p = item[0][1]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(676):                 if group is None and not add_flags and not del_flags:
sre_parse.py(677):                     item = p
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(533):             here = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(535):             set = []
sre_parse.py(536):             setappend = set.append
sre_parse.py(539):             if source.next == '[':
sre_parse.py(545):             negate = sourcematch("^")
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(555):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(298):     code = ESCAPES.get(escape)
sre_parse.py(299):     if code:
sre_parse.py(301):     code = CATEGORIES.get(escape)
sre_parse.py(302):     if code and code[0] is IN:
sre_parse.py(304):     try:
sre_parse.py(305):         c = escape[1:2]
sre_parse.py(306):         if c == "x":
sre_parse.py(312):         elif c == "u" and source.istext:
sre_parse.py(318):         elif c == "U" and source.istext:
sre_parse.py(326):         elif c == "N" and source.istext:
sre_parse.py(338):         elif c in OCTDIGITS:
sre_parse.py(346):         elif c in DIGITS:
sre_parse.py(348):         if len(escape) == 2:
sre_parse.py(349):             if c in ASCIILETTERS:
sre_parse.py(351):             return LITERAL, ord(escape[1])
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(555):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(298):     code = ESCAPES.get(escape)
sre_parse.py(299):     if code:
sre_parse.py(301):     code = CATEGORIES.get(escape)
sre_parse.py(302):     if code and code[0] is IN:
sre_parse.py(304):     try:
sre_parse.py(305):         c = escape[1:2]
sre_parse.py(306):         if c == "x":
sre_parse.py(312):         elif c == "u" and source.istext:
sre_parse.py(318):         elif c == "U" and source.istext:
sre_parse.py(326):         elif c == "N" and source.istext:
sre_parse.py(338):         elif c in OCTDIGITS:
sre_parse.py(346):         elif c in DIGITS:
sre_parse.py(348):         if len(escape) == 2:
sre_parse.py(349):             if c in ASCIILETTERS:
sre_parse.py(351):             return LITERAL, ord(escape[1])
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(555):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(298):     code = ESCAPES.get(escape)
sre_parse.py(299):     if code:
sre_parse.py(301):     code = CATEGORIES.get(escape)
sre_parse.py(302):     if code and code[0] is IN:
sre_parse.py(304):     try:
sre_parse.py(305):         c = escape[1:2]
sre_parse.py(306):         if c == "x":
sre_parse.py(312):         elif c == "u" and source.istext:
sre_parse.py(318):         elif c == "U" and source.istext:
sre_parse.py(326):         elif c == "N" and source.istext:
sre_parse.py(338):         elif c in OCTDIGITS:
sre_parse.py(346):         elif c in DIGITS:
sre_parse.py(348):         if len(escape) == 2:
sre_parse.py(349):             if c in ASCIILETTERS:
sre_parse.py(351):             return LITERAL, ord(escape[1])
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(555):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(298):     code = ESCAPES.get(escape)
sre_parse.py(299):     if code:
sre_parse.py(301):     code = CATEGORIES.get(escape)
sre_parse.py(302):     if code and code[0] is IN:
sre_parse.py(304):     try:
sre_parse.py(305):         c = escape[1:2]
sre_parse.py(306):         if c == "x":
sre_parse.py(312):         elif c == "u" and source.istext:
sre_parse.py(318):         elif c == "U" and source.istext:
sre_parse.py(326):         elif c == "N" and source.istext:
sre_parse.py(338):         elif c in OCTDIGITS:
sre_parse.py(346):         elif c in DIGITS:
sre_parse.py(348):         if len(escape) == 2:
sre_parse.py(349):             if c in ASCIILETTERS:
sre_parse.py(351):             return LITERAL, ord(escape[1])
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(555):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(298):     code = ESCAPES.get(escape)
sre_parse.py(299):     if code:
sre_parse.py(301):     code = CATEGORIES.get(escape)
sre_parse.py(302):     if code and code[0] is IN:
sre_parse.py(303):         return code
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(603):                         code1 = code1[1][0]
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(553):                     break
sre_parse.py(606):             set = _uniq(set)
 --- modulename: sre_parse, funcname: _uniq
sre_parse.py(434):     return list(dict.fromkeys(items))
sre_parse.py(608):             if _len(set) == 1 and set[0][0] is LITERAL:
sre_parse.py(615):                 if negate:
sre_parse.py(616):                     set.insert(0, (NEGATE, None))
sre_parse.py(619):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(629):             elif this == "+":
sre_parse.py(630):                 min, max = 1, MAXREPEAT
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(511):             break # end of subpattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(447):             break
sre_parse.py(449):     if len(items) == 1:
sre_parse.py(450):         return items[0]
sre_parse.py(842):             if not source.match(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(845):             if group is not None:
sre_parse.py(846):                 state.closegroup(group, p)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(98):         self.groupwidths[gid] = p.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(847):             subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(511):             break # end of subpattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(862):             group, add_flags, del_flags, p = av
sre_parse.py(863):             if group is None and not add_flags and not del_flags:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(526):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(358):     code = CATEGORIES.get(escape)
sre_parse.py(359):     if code:
sre_parse.py(360):         return code
sre_parse.py(527):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(238):         except IndexError:
sre_parse.py(239):             self.next = None
sre_parse.py(240):             return
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(629):             elif this == "+":
sre_parse.py(630):                 min, max = 1, MAXREPEAT
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(509):             break # end of pattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(447):             break
sre_parse.py(449):     if len(items) == 1:
sre_parse.py(452):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(455):     while True:
sre_parse.py(456):         prefix = None
sre_parse.py(457):         for item in items:
sre_parse.py(458):             if not item:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(460):             if prefix is None:
sre_parse.py(461):                 prefix = item[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(457):         for item in items:
sre_parse.py(458):             if not item:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(460):             if prefix is None:
sre_parse.py(462):             elif item[0] != prefix:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(463):                 break
sre_parse.py(471):         break
sre_parse.py(474):     set = []
sre_parse.py(475):     for item in items:
sre_parse.py(476):         if len(item) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(478):         op, av = item[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(479):         if op is LITERAL:
sre_parse.py(481):         elif op is IN and av[0][0] is not NEGATE:
sre_parse.py(484):             break
sre_parse.py(491):     subpattern.append((BRANCH, (None, items)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(492):     return subpattern
sre_parse.py(965):     p.state.flags = fix_flags(str, p.state.flags)
 --- modulename: sre_parse, funcname: fix_flags
sre_parse.py(930):     if isinstance(src, str):
sre_parse.py(931):         if flags & SRE_FLAG_LOCALE:
sre_parse.py(933):         if not flags & SRE_FLAG_ASCII:
sre_parse.py(934):             flags |= SRE_FLAG_UNICODE
sre_parse.py(942):     return flags
sre_parse.py(967):     if source.next is not None:
sre_parse.py(971):     for g in p.state.grouprefpos:
sre_parse.py(976):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(979):     return p
sre_compile.py(792):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(624):     flags = p.state.flags | flags
sre_compile.py(625):     code = []
sre_compile.py(628):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(564):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(182):                 i = MAXREPEAT - 1
sre_parse.py(183):                 j = 0
sre_parse.py(184):                 for av in av[1]:
sre_parse.py(185):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(195):                 i, j = av[-1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(178):             return self.width
sre_parse.py(196):                 lo = lo + i
sre_parse.py(197):                 hi = hi + j
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(186):                     i = min(i, l)
sre_parse.py(187):                     j = max(j, h)
sre_parse.py(184):                 for av in av[1]:
sre_parse.py(185):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(195):                 i, j = av[-1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(178):             return self.width
sre_parse.py(196):                 lo = lo + i
sre_parse.py(197):                 hi = hi + j
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(186):                     i = min(i, l)
sre_parse.py(187):                     j = max(j, h)
sre_parse.py(184):                 for av in av[1]:
sre_parse.py(185):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(186):                     i = min(i, l)
sre_parse.py(187):                     j = max(j, h)
sre_parse.py(184):                 for av in av[1]:
sre_parse.py(188):                 lo = lo + i
sre_parse.py(189):                 hi = hi + j
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_compile.py(565):     if hi > MAXCODE:
sre_compile.py(567):     if lo == 0:
sre_compile.py(571):     prefix = []
sre_compile.py(572):     prefix_skip = 0
sre_compile.py(573):     charset = [] # not used
sre_compile.py(574):     if not (flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE):
sre_compile.py(576):         prefix, prefix_skip, got_all = _get_literal_prefix(pattern, flags)
 --- modulename: sre_compile, funcname: _get_literal_prefix
sre_compile.py(487):     prefix = []
sre_compile.py(488):     prefixappend = prefix.append
sre_compile.py(489):     prefix_skip = None
sre_compile.py(490):     iscased = _get_iscased(flags)
 --- modulename: sre_compile, funcname: _get_iscased
sre_compile.py(478):     if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(479):         return None
sre_compile.py(491):     for op, av in pattern.data:
sre_compile.py(492):         if op is LITERAL:
sre_compile.py(496):         elif op is SUBPATTERN:
sre_compile.py(511):             break
sre_compile.py(514):     return prefix, prefix_skip, False
sre_compile.py(578):         if not prefix:
sre_compile.py(579):             charset = _get_charset_prefix(pattern, flags)
 --- modulename: sre_compile, funcname: _get_charset_prefix
sre_compile.py(517):     while True:
sre_compile.py(518):         if not pattern.data:
sre_compile.py(520):         op, av = pattern.data[0]
sre_compile.py(521):         if op is not SUBPATTERN:
sre_compile.py(522):             break
sre_compile.py(528):     iscased = _get_iscased(flags)
 --- modulename: sre_compile, funcname: _get_iscased
sre_compile.py(478):     if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(479):         return None
sre_compile.py(529):     if op is LITERAL:
sre_compile.py(533):     elif op is BRANCH:
sre_compile.py(534):         charset = []
sre_compile.py(535):         charsetappend = charset.append
sre_compile.py(536):         for p in av[1]:
sre_compile.py(537):             if not p:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(539):             op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(540):             if op is LITERAL and not (iscased and iscased(av)):
sre_compile.py(543):                 return None
sre_compile.py(585):     emit = code.append
sre_compile.py(586):     emit(INFO)
sre_compile.py(587):     skip = len(code); emit(0)
sre_compile.py(589):     mask = 0
sre_compile.py(590):     if prefix:
sre_compile.py(594):     elif charset:
sre_compile.py(596):     emit(mask)
sre_compile.py(598):     if lo < MAXCODE:
sre_compile.py(599):         emit(lo)
sre_compile.py(603):     emit(min(hi, MAXCODE))
sre_compile.py(605):     if prefix:
sre_compile.py(613):     elif charset:
sre_compile.py(617):     code[skip] = len(code) - skip
sre_compile.py(631):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(178):         elif op is SUBPATTERN:
sre_compile.py(188):         elif op in SUCCESS_CODES:
sre_compile.py(190):         elif op in ASSERT_CODES:
sre_compile.py(203):         elif op is CALL:
sre_compile.py(209):         elif op is AT:
sre_compile.py(218):         elif op is BRANCH:
sre_compile.py(219):             emit(op)
sre_compile.py(220):             tail = []
sre_compile.py(221):             tailappend = tail.append
sre_compile.py(222):             for av in av[1]:
sre_compile.py(223):                 skip = _len(code); emit(0)
sre_compile.py(225):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(178):         elif op is SUBPATTERN:
sre_compile.py(179):             group, add_flags, del_flags, p = av
sre_compile.py(180):             if group:
sre_compile.py(181):                 emit(MARK)
sre_compile.py(182):                 emit((group-1)*2)
sre_compile.py(184):             _compile(code, p, _combine_flags(flags, add_flags, del_flags))
 --- modulename: sre_compile, funcname: _combine_flags
sre_compile.py(83):     if add_flags & TYPE_FLAGS:
sre_compile.py(85):     return (flags | add_flags) & ~del_flags
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(178):         elif op is SUBPATTERN:
sre_compile.py(188):         elif op in SUCCESS_CODES:
sre_compile.py(190):         elif op in ASSERT_CODES:
sre_compile.py(203):         elif op is CALL:
sre_compile.py(209):         elif op is AT:
sre_compile.py(218):         elif op is BRANCH:
sre_compile.py(219):             emit(op)
sre_compile.py(220):             tail = []
sre_compile.py(221):             tailappend = tail.append
sre_compile.py(222):             for av in av[1]:
sre_compile.py(223):                 skip = _len(code); emit(0)
sre_compile.py(225):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(226):                 emit(JUMP)
sre_compile.py(227):                 tailappend(_len(code)); emit(0)
sre_compile.py(228):                 code[skip] = _len(code) - skip
sre_compile.py(222):             for av in av[1]:
sre_compile.py(223):                 skip = _len(code); emit(0)
sre_compile.py(225):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(226):                 emit(JUMP)
sre_compile.py(227):                 tailappend(_len(code)); emit(0)
sre_compile.py(228):                 code[skip] = _len(code) - skip
sre_compile.py(222):             for av in av[1]:
sre_compile.py(223):                 skip = _len(code); emit(0)
sre_compile.py(225):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(226):                 emit(JUMP)
sre_compile.py(227):                 tailappend(_len(code)); emit(0)
sre_compile.py(228):                 code[skip] = _len(code) - skip
sre_compile.py(222):             for av in av[1]:
sre_compile.py(223):                 skip = _len(code); emit(0)
sre_compile.py(225):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(226):                 emit(JUMP)
sre_compile.py(227):                 tailappend(_len(code)); emit(0)
sre_compile.py(228):                 code[skip] = _len(code) - skip
sre_compile.py(222):             for av in av[1]:
sre_compile.py(223):                 skip = _len(code); emit(0)
sre_compile.py(225):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(226):                 emit(JUMP)
sre_compile.py(227):                 tailappend(_len(code)); emit(0)
sre_compile.py(228):                 code[skip] = _len(code) - skip
sre_compile.py(222):             for av in av[1]:
sre_compile.py(223):                 skip = _len(code); emit(0)
sre_compile.py(225):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(226):                 emit(JUMP)
sre_compile.py(227):                 tailappend(_len(code)); emit(0)
sre_compile.py(228):                 code[skip] = _len(code) - skip
sre_compile.py(222):             for av in av[1]:
sre_compile.py(223):                 skip = _len(code); emit(0)
sre_compile.py(225):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(136):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(294):     out = []
sre_compile.py(295):     tail = []
sre_compile.py(296):     charmap = bytearray(256)
sre_compile.py(297):     hascased = False
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(358):     runs = []
sre_compile.py(359):     q = 0
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(364):         if len(runs) >= 2:
sre_compile.py(367):         q = charmap.find(0, p)
sre_compile.py(368):         if q < 0:
sre_compile.py(371):         runs.append((p, q))
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(364):         if len(runs) >= 2:
sre_compile.py(367):         q = charmap.find(0, p)
sre_compile.py(368):         if q < 0:
sre_compile.py(371):         runs.append((p, q))
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(364):         if len(runs) >= 2:
sre_compile.py(365):             runs = None
sre_compile.py(366):             break
sre_compile.py(372):     if runs is not None:
sre_compile.py(387):     if len(charmap) == 256:
sre_compile.py(388):         data = _mk_bitmap(charmap)
 --- modulename: sre_compile, funcname: _mk_bitmap
sre_compile.py(436):     s = bits.translate(_BITS_TRANS)[::-1]
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(438):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
 --- modulename: sre_compile, funcname: <listcomp>
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(438):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(438):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(438):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(438):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(438):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(438):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(438):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(438):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(389):         out.append((CHARSET, data))
sre_compile.py(390):         out += tail
sre_compile.py(391):         return out, hascased
sre_compile.py(137):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:
sre_compile.py(139):             elif not hascased:
sre_compile.py(140):                 emit(IN)
sre_compile.py(145):             skip = _len(code); emit(0)
sre_compile.py(146):             _compile_charset(charset, flags, code)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(267):     emit = code.append
sre_compile.py(268):     for op, av in charset:
sre_compile.py(269):         emit(op)
sre_compile.py(270):         if op is NEGATE:
sre_compile.py(272):         elif op is LITERAL:
sre_compile.py(274):         elif op is RANGE or op is RANGE_UNI_IGNORE:
sre_compile.py(277):         elif op is CHARSET:
sre_compile.py(278):             code.extend(av)
sre_compile.py(268):     for op, av in charset:
sre_compile.py(290):     emit(FAILURE)
sre_compile.py(147):             code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(226):                 emit(JUMP)
sre_compile.py(227):                 tailappend(_len(code)); emit(0)
sre_compile.py(228):                 code[skip] = _len(code) - skip
sre_compile.py(222):             for av in av[1]:
sre_compile.py(229):             emit(FAILURE) # end of branch
sre_compile.py(230):             for tail in tail:
sre_compile.py(231):                 code[tail] = _len(code) - tail
sre_compile.py(230):             for tail in tail:
sre_compile.py(231):                 code[tail] = _len(code) - tail
sre_compile.py(230):             for tail in tail:
sre_compile.py(231):                 code[tail] = _len(code) - tail
sre_compile.py(230):             for tail in tail:
sre_compile.py(231):                 code[tail] = _len(code) - tail
sre_compile.py(230):             for tail in tail:
sre_compile.py(231):                 code[tail] = _len(code) - tail
sre_compile.py(230):             for tail in tail:
sre_compile.py(231):                 code[tail] = _len(code) - tail
sre_compile.py(230):             for tail in tail:
sre_compile.py(231):                 code[tail] = _len(code) - tail
sre_compile.py(230):             for tail in tail:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(185):             if group:
sre_compile.py(186):                 emit(MARK)
sre_compile.py(187):                 emit((group-1)*2+1)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(226):                 emit(JUMP)
sre_compile.py(227):                 tailappend(_len(code)); emit(0)
sre_compile.py(228):                 code[skip] = _len(code) - skip
sre_compile.py(222):             for av in av[1]:
sre_compile.py(223):                 skip = _len(code); emit(0)
sre_compile.py(225):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(178):         elif op is SUBPATTERN:
sre_compile.py(179):             group, add_flags, del_flags, p = av
sre_compile.py(180):             if group:
sre_compile.py(181):                 emit(MARK)
sre_compile.py(182):                 emit((group-1)*2)
sre_compile.py(184):             _compile(code, p, _combine_flags(flags, add_flags, del_flags))
 --- modulename: sre_compile, funcname: _combine_flags
sre_compile.py(83):     if add_flags & TYPE_FLAGS:
sre_compile.py(85):     return (flags | add_flags) & ~del_flags
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(450):         return False
sre_compile.py(168):                 emit(REPEAT)
sre_compile.py(169):                 skip = _len(code); emit(0)
sre_compile.py(170):                 emit(av[0])
sre_compile.py(171):                 emit(av[1])
sre_compile.py(172):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(173):                 code[skip] = _len(code) - skip
sre_compile.py(174):                 if op is MAX_REPEAT:
sre_compile.py(175):                     emit(MAX_UNTIL)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(136):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(294):     out = []
sre_compile.py(295):     tail = []
sre_compile.py(296):     charmap = bytearray(256)
sre_compile.py(297):     hascased = False
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(312):                 elif op is RANGE:
sre_compile.py(329):                 elif op is NEGATE:
sre_compile.py(330):                     out.append((op, av))
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(312):                 elif op is RANGE:
sre_compile.py(329):                 elif op is NEGATE:
sre_compile.py(332):                     tail.append((op, av))
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(358):     runs = []
sre_compile.py(359):     q = 0
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(364):         if len(runs) >= 2:
sre_compile.py(367):         q = charmap.find(0, p)
sre_compile.py(368):         if q < 0:
sre_compile.py(371):         runs.append((p, q))
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(364):         if len(runs) >= 2:
sre_compile.py(367):         q = charmap.find(0, p)
sre_compile.py(368):         if q < 0:
sre_compile.py(371):         runs.append((p, q))
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(364):         if len(runs) >= 2:
sre_compile.py(365):             runs = None
sre_compile.py(366):             break
sre_compile.py(372):     if runs is not None:
sre_compile.py(387):     if len(charmap) == 256:
sre_compile.py(388):         data = _mk_bitmap(charmap)
 --- modulename: sre_compile, funcname: _mk_bitmap
sre_compile.py(436):     s = bits.translate(_BITS_TRANS)[::-1]
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(438):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
 --- modulename: sre_compile, funcname: <listcomp>
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(438):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(438):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(438):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(438):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(438):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(438):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(438):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(438):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(389):         out.append((CHARSET, data))
sre_compile.py(390):         out += tail
sre_compile.py(391):         return out, hascased
sre_compile.py(137):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:
sre_compile.py(139):             elif not hascased:
sre_compile.py(140):                 emit(IN)
sre_compile.py(145):             skip = _len(code); emit(0)
sre_compile.py(146):             _compile_charset(charset, flags, code)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(267):     emit = code.append
sre_compile.py(268):     for op, av in charset:
sre_compile.py(269):         emit(op)
sre_compile.py(270):         if op is NEGATE:
sre_compile.py(271):             pass
sre_compile.py(268):     for op, av in charset:
sre_compile.py(269):         emit(op)
sre_compile.py(270):         if op is NEGATE:
sre_compile.py(272):         elif op is LITERAL:
sre_compile.py(274):         elif op is RANGE or op is RANGE_UNI_IGNORE:
sre_compile.py(277):         elif op is CHARSET:
sre_compile.py(278):             code.extend(av)
sre_compile.py(268):     for op, av in charset:
sre_compile.py(269):         emit(op)
sre_compile.py(270):         if op is NEGATE:
sre_compile.py(272):         elif op is LITERAL:
sre_compile.py(274):         elif op is RANGE or op is RANGE_UNI_IGNORE:
sre_compile.py(277):         elif op is CHARSET:
sre_compile.py(279):         elif op is BIGCHARSET:
sre_compile.py(281):         elif op is CATEGORY:
sre_compile.py(282):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(284):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(285):                 emit(CH_UNICODE[av])
sre_compile.py(268):     for op, av in charset:
sre_compile.py(290):     emit(FAILURE)
sre_compile.py(147):             code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(185):             if group:
sre_compile.py(186):                 emit(MARK)
sre_compile.py(187):                 emit((group-1)*2+1)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(226):                 emit(JUMP)
sre_compile.py(227):                 tailappend(_len(code)); emit(0)
sre_compile.py(228):                 code[skip] = _len(code) - skip
sre_compile.py(222):             for av in av[1]:
sre_compile.py(223):                 skip = _len(code); emit(0)
sre_compile.py(225):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(136):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(294):     out = []
sre_compile.py(295):     tail = []
sre_compile.py(296):     charmap = bytearray(256)
sre_compile.py(297):     hascased = False
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(312):                 elif op is RANGE:
sre_compile.py(329):                 elif op is NEGATE:
sre_compile.py(332):                     tail.append((op, av))
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(358):     runs = []
sre_compile.py(359):     q = 0
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(363):             break
sre_compile.py(372):     if runs is not None:
sre_compile.py(374):         for p, q in runs:
sre_compile.py(379):         out += tail
sre_compile.py(381):         if hascased or len(out) < len(charset):
sre_compile.py(384):         return charset, hascased
sre_compile.py(137):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:
sre_compile.py(139):             elif not hascased:
sre_compile.py(140):                 emit(IN)
sre_compile.py(145):             skip = _len(code); emit(0)
sre_compile.py(146):             _compile_charset(charset, flags, code)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(267):     emit = code.append
sre_compile.py(268):     for op, av in charset:
sre_compile.py(269):         emit(op)
sre_compile.py(270):         if op is NEGATE:
sre_compile.py(272):         elif op is LITERAL:
sre_compile.py(274):         elif op is RANGE or op is RANGE_UNI_IGNORE:
sre_compile.py(277):         elif op is CHARSET:
sre_compile.py(279):         elif op is BIGCHARSET:
sre_compile.py(281):         elif op is CATEGORY:
sre_compile.py(282):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(284):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(285):                 emit(CH_UNICODE[av])
sre_compile.py(268):     for op, av in charset:
sre_compile.py(290):     emit(FAILURE)
sre_compile.py(147):             code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(226):                 emit(JUMP)
sre_compile.py(227):                 tailappend(_len(code)); emit(0)
sre_compile.py(228):                 code[skip] = _len(code) - skip
sre_compile.py(222):             for av in av[1]:
sre_compile.py(229):             emit(FAILURE) # end of branch
sre_compile.py(230):             for tail in tail:
sre_compile.py(231):                 code[tail] = _len(code) - tail
sre_compile.py(230):             for tail in tail:
sre_compile.py(231):                 code[tail] = _len(code) - tail
sre_compile.py(230):             for tail in tail:
sre_compile.py(231):                 code[tail] = _len(code) - tail
sre_compile.py(230):             for tail in tail:
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(633):     code.append(SUCCESS)
sre_compile.py(635):     return code
sre_compile.py(794):     if flags & SRE_FLAG_DEBUG:
sre_compile.py(799):     groupindex = p.state.groupdict
sre_compile.py(800):     indexgroup = [None] * p.state.groups
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_compile.py(801):     for k, i in groupindex.items():
sre_compile.py(804):     return _sre.compile(
sre_compile.py(805):         pattern, flags | p.state.flags, code,
sre_compile.py(806):         p.state.groups-1,
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_compile.py(807):         groupindex, tuple(indexgroup)
sre_compile.py(804):     return _sre.compile(
re.py(304):     if not (flags & DEBUG):
 --- modulename: enum, funcname: __and__
enum.py(987):         if not isinstance(other, (self.__class__, int)):
enum.py(989):         return self.__class__(self._value_ & self.__class__(other)._value_)
 --- modulename: enum, funcname: __call__
enum.py(384):         if names is None:  # simple value lookup
enum.py(385):             return cls.__new__(cls, value)
 --- modulename: enum, funcname: __new__
enum.py(682):         if type(value) is cls:
enum.py(687):         try:
enum.py(688):             return cls._value2member_map_[value]
 --- modulename: enum, funcname: __call__
enum.py(384):         if names is None:  # simple value lookup
enum.py(385):             return cls.__new__(cls, value)
 --- modulename: enum, funcname: __new__
enum.py(682):         if type(value) is cls:
enum.py(687):         try:
enum.py(688):             return cls._value2member_map_[value]
re.py(305):         if len(_cache) >= _MAXCACHE:
re.py(311):         _cache[type(pattern), pattern, flags] = p
re.py(312):     return p
<frozen importlib._bootstrap_external>(1185): <frozen importlib._bootstrap_external>(1186): <frozen importlib._bootstrap_external>(1185):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap>(699): <frozen importlib._bootstrap>(700): <frozen importlib._bootstrap>(701):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap>(703): <frozen importlib._bootstrap>(705): <frozen importlib._bootstrap>(1007): <frozen importlib._bootstrap>(1009): <frozen importlib._bootstrap>(1010): <frozen importlib._bootstrap>(1011): <frozen importlib._bootstrap>(1012): <frozen importlib._bootstrap>(1016): <frozen importlib._bootstrap>(1024):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(174):  --- modulename: _bootstrap, funcname: release
<frozen importlib._bootstrap>(126): <frozen importlib._bootstrap>(127): <frozen importlib._bootstrap>(128): <frozen importlib._bootstrap>(130): <frozen importlib._bootstrap>(131): <frozen importlib._bootstrap>(132): <frozen importlib._bootstrap>(133): <frozen importlib._bootstrap>(134): <frozen importlib._bootstrap>(127):  --- modulename: _bootstrap, funcname: cb
<frozen importlib._bootstrap>(199): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(204): <frozen importlib._bootstrap>(205): <frozen importlib._bootstrap>(207): <frozen importlib._bootstrap>(1063): <frozen importlib._bootstrap>(1087):  --- modulename: abc, funcname: __new__
abc.py(106):             cls = super().__new__(mcls, name, bases, namespace, **kwargs)
abc.py(107):             _abc_init(cls)
abc.py(108):             return cls
 --- modulename: re, funcname: compile
re.py(251):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(290):     if isinstance(flags, RegexFlag):
re.py(292):     try:
re.py(293):         return _cache[type(pattern), pattern, flags]
re.py(294):     except KeyError:
re.py(295):         pass
re.py(296):     if isinstance(pattern, Pattern):
re.py(301):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(620):     return isinstance(obj, (str, bytes))
re.py(303):     p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(786):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(620):     return isinstance(obj, (str, bytes))
sre_compile.py(787):         pattern = p
sre_compile.py(788):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(947):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(226):         self.istext = isinstance(string, str)
sre_parse.py(227):         self.string = string
sre_parse.py(228):         if not self.istext:
sre_parse.py(229):             string = str(string, 'latin1')
sre_parse.py(230):         self.decoded_string = string
sre_parse.py(231):         self.index = 0
sre_parse.py(232):         self.next = None
sre_parse.py(233):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(949):     if state is None:
sre_parse.py(950):         state = State()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(77):         self.flags = 0
sre_parse.py(78):         self.groupdict = {}
sre_parse.py(79):         self.groupwidths = [None]  # group 0
sre_parse.py(80):         self.lookbehindgroups = None
sre_parse.py(81):         self.grouprefpos = {}
sre_parse.py(951):     state.flags = flags
sre_parse.py(952):     state.str = str
sre_parse.py(954):     try:
sre_parse.py(955):         p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(439):     items = []
sre_parse.py(440):     itemsappend = items.append
sre_parse.py(441):     sourcematch = source.match
sre_parse.py(442):     start = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(526):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(358):     code = CATEGORIES.get(escape)
sre_parse.py(359):     if code:
sre_parse.py(360):         return code
sre_parse.py(527):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(629):             elif this == "+":
sre_parse.py(630):                 min, max = 1, MAXREPEAT
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(238):         except IndexError:
sre_parse.py(239):             self.next = None
sre_parse.py(240):             return
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(683):         elif this == ".":
sre_parse.py(686):         elif this == "(":
sre_parse.py(849):         elif this == "^":
sre_parse.py(852):         elif this == "$":
sre_parse.py(853):             subpatternappend((AT, AT_END))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(509):             break # end of pattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(447):             break
sre_parse.py(449):     if len(items) == 1:
sre_parse.py(450):         return items[0]
sre_parse.py(965):     p.state.flags = fix_flags(str, p.state.flags)
 --- modulename: sre_parse, funcname: fix_flags
sre_parse.py(930):     if isinstance(src, str):
sre_parse.py(938):         if flags & SRE_FLAG_UNICODE:
sre_parse.py(940):         if flags & SRE_FLAG_LOCALE and flags & SRE_FLAG_ASCII:
sre_parse.py(942):     return flags
sre_parse.py(967):     if source.next is not None:
sre_parse.py(971):     for g in p.state.grouprefpos:
sre_parse.py(976):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(979):     return p
sre_compile.py(792):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(624):     flags = p.state.flags | flags
sre_compile.py(625):     code = []
sre_compile.py(628):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(564):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(205):             elif op is GROUPREF:
sre_parse.py(209):             elif op is GROUPREF_EXISTS:
sre_parse.py(219):             elif op is SUCCESS:
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_compile.py(565):     if hi > MAXCODE:
sre_compile.py(567):     if lo == 0:
sre_compile.py(571):     prefix = []
sre_compile.py(572):     prefix_skip = 0
sre_compile.py(573):     charset = [] # not used
sre_compile.py(574):     if not (flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE):
sre_compile.py(576):         prefix, prefix_skip, got_all = _get_literal_prefix(pattern, flags)
 --- modulename: sre_compile, funcname: _get_literal_prefix
sre_compile.py(487):     prefix = []
sre_compile.py(488):     prefixappend = prefix.append
sre_compile.py(489):     prefix_skip = None
sre_compile.py(490):     iscased = _get_iscased(flags)
 --- modulename: sre_compile, funcname: _get_iscased
sre_compile.py(478):     if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(479):         return None
sre_compile.py(491):     for op, av in pattern.data:
sre_compile.py(492):         if op is LITERAL:
sre_compile.py(493):             if iscased and iscased(av):
sre_compile.py(495):             prefixappend(av)
sre_compile.py(491):     for op, av in pattern.data:
sre_compile.py(492):         if op is LITERAL:
sre_compile.py(493):             if iscased and iscased(av):
sre_compile.py(495):             prefixappend(av)
sre_compile.py(491):     for op, av in pattern.data:
sre_compile.py(492):         if op is LITERAL:
sre_compile.py(496):         elif op is SUBPATTERN:
sre_compile.py(511):             break
sre_compile.py(514):     return prefix, prefix_skip, False
sre_compile.py(578):         if not prefix:
sre_compile.py(585):     emit = code.append
sre_compile.py(586):     emit(INFO)
sre_compile.py(587):     skip = len(code); emit(0)
sre_compile.py(589):     mask = 0
sre_compile.py(590):     if prefix:
sre_compile.py(591):         mask = SRE_INFO_PREFIX
sre_compile.py(592):         if prefix_skip is None and got_all:
sre_compile.py(596):     emit(mask)
sre_compile.py(598):     if lo < MAXCODE:
sre_compile.py(599):         emit(lo)
sre_compile.py(603):     emit(min(hi, MAXCODE))
sre_compile.py(605):     if prefix:
sre_compile.py(606):         emit(len(prefix)) # length
sre_compile.py(607):         if prefix_skip is None:
sre_compile.py(608):             prefix_skip =  len(prefix)
sre_compile.py(609):         emit(prefix_skip) # skip
sre_compile.py(610):         code.extend(prefix)
sre_compile.py(612):         code.extend(_generate_overlap_table(prefix))
 --- modulename: sre_compile, funcname: _generate_overlap_table
sre_compile.py(465):     table = [0] * len(prefix)
sre_compile.py(466):     for i in range(1, len(prefix)):
sre_compile.py(467):         idx = table[i - 1]
sre_compile.py(468):         while prefix[i] != prefix[idx]:
sre_compile.py(469):             if idx == 0:
sre_compile.py(470):                 table[i] = 0
sre_compile.py(471):                 break
sre_compile.py(466):     for i in range(1, len(prefix)):
sre_compile.py(475):     return table
sre_compile.py(617):     code[skip] = len(code) - skip
sre_compile.py(631):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(136):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(294):     out = []
sre_compile.py(295):     tail = []
sre_compile.py(296):     charmap = bytearray(256)
sre_compile.py(297):     hascased = False
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(312):                 elif op is RANGE:
sre_compile.py(329):                 elif op is NEGATE:
sre_compile.py(332):                     tail.append((op, av))
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(358):     runs = []
sre_compile.py(359):     q = 0
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(363):             break
sre_compile.py(372):     if runs is not None:
sre_compile.py(374):         for p, q in runs:
sre_compile.py(379):         out += tail
sre_compile.py(381):         if hascased or len(out) < len(charset):
sre_compile.py(384):         return charset, hascased
sre_compile.py(137):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:
sre_compile.py(139):             elif not hascased:
sre_compile.py(140):                 emit(IN)
sre_compile.py(145):             skip = _len(code); emit(0)
sre_compile.py(146):             _compile_charset(charset, flags, code)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(267):     emit = code.append
sre_compile.py(268):     for op, av in charset:
sre_compile.py(269):         emit(op)
sre_compile.py(270):         if op is NEGATE:
sre_compile.py(272):         elif op is LITERAL:
sre_compile.py(274):         elif op is RANGE or op is RANGE_UNI_IGNORE:
sre_compile.py(277):         elif op is CHARSET:
sre_compile.py(279):         elif op is BIGCHARSET:
sre_compile.py(281):         elif op is CATEGORY:
sre_compile.py(282):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(284):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(287):                 emit(av)
sre_compile.py(268):     for op, av in charset:
sre_compile.py(290):     emit(FAILURE)
sre_compile.py(147):             code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(178):         elif op is SUBPATTERN:
sre_compile.py(188):         elif op in SUCCESS_CODES:
sre_compile.py(190):         elif op in ASSERT_CODES:
sre_compile.py(203):         elif op is CALL:
sre_compile.py(209):         elif op is AT:
sre_compile.py(210):             emit(op)
sre_compile.py(211):             if flags & SRE_FLAG_MULTILINE:
sre_compile.py(213):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(215):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(217):             emit(av)
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(633):     code.append(SUCCESS)
sre_compile.py(635):     return code
sre_compile.py(794):     if flags & SRE_FLAG_DEBUG:
sre_compile.py(799):     groupindex = p.state.groupdict
sre_compile.py(800):     indexgroup = [None] * p.state.groups
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_compile.py(801):     for k, i in groupindex.items():
sre_compile.py(804):     return _sre.compile(
sre_compile.py(805):         pattern, flags | p.state.flags, code,
sre_compile.py(806):         p.state.groups-1,
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_compile.py(807):         groupindex, tuple(indexgroup)
sre_compile.py(804):     return _sre.compile(
re.py(304):     if not (flags & DEBUG):
 --- modulename: enum, funcname: __and__
enum.py(987):         if not isinstance(other, (self.__class__, int)):
enum.py(989):         return self.__class__(self._value_ & self.__class__(other)._value_)
 --- modulename: enum, funcname: __call__
enum.py(384):         if names is None:  # simple value lookup
enum.py(385):             return cls.__new__(cls, value)
 --- modulename: enum, funcname: __new__
enum.py(682):         if type(value) is cls:
enum.py(687):         try:
enum.py(688):             return cls._value2member_map_[value]
 --- modulename: enum, funcname: __call__
enum.py(384):         if names is None:  # simple value lookup
enum.py(385):             return cls.__new__(cls, value)
 --- modulename: enum, funcname: __new__
enum.py(682):         if type(value) is cls:
enum.py(687):         try:
enum.py(688):             return cls._value2member_map_[value]
re.py(305):         if len(_cache) >= _MAXCACHE:
re.py(311):         _cache[type(pattern), pattern, flags] = p
re.py(312):     return p
 --- modulename: re, funcname: match
re.py(190):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
re.py(290):     if isinstance(flags, RegexFlag):
re.py(292):     try:
re.py(293):         return _cache[type(pattern), pattern, flags]
re.py(294):     except KeyError:
re.py(295):         pass
re.py(296):     if isinstance(pattern, Pattern):
re.py(301):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(620):     return isinstance(obj, (str, bytes))
re.py(303):     p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(786):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(620):     return isinstance(obj, (str, bytes))
sre_compile.py(787):         pattern = p
sre_compile.py(788):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(947):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(226):         self.istext = isinstance(string, str)
sre_parse.py(227):         self.string = string
sre_parse.py(228):         if not self.istext:
sre_parse.py(230):         self.decoded_string = string
sre_parse.py(231):         self.index = 0
sre_parse.py(232):         self.next = None
sre_parse.py(233):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(949):     if state is None:
sre_parse.py(950):         state = State()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(77):         self.flags = 0
sre_parse.py(78):         self.groupdict = {}
sre_parse.py(79):         self.groupwidths = [None]  # group 0
sre_parse.py(80):         self.lookbehindgroups = None
sre_parse.py(81):         self.grouprefpos = {}
sre_parse.py(951):     state.flags = flags
sre_parse.py(952):     state.str = str
sre_parse.py(954):     try:
sre_parse.py(955):         p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(439):     items = []
sre_parse.py(440):     itemsappend = items.append
sre_parse.py(441):     sourcematch = source.match
sre_parse.py(442):     start = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(533):             here = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(535):             set = []
sre_parse.py(536):             setappend = set.append
sre_parse.py(539):             if source.next == '[':
sre_parse.py(545):             negate = sourcematch("^")
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(571):                     that = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(572):                     if that is None:
sre_parse.py(575):                     if that == "]":
sre_parse.py(581):                     if that[0] == "\\":
sre_parse.py(584):                         if that == '-':
sre_parse.py(591):                         code2 = LITERAL, _ord(that)
sre_parse.py(592):                     if code1[0] != LITERAL or code2[0] != LITERAL:
sre_parse.py(595):                     lo = code1[1]
sre_parse.py(596):                     hi = code2[1]
sre_parse.py(597):                     if hi < lo:
sre_parse.py(600):                     setappend((RANGE, (lo, hi)))
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(553):                     break
sre_parse.py(606):             set = _uniq(set)
 --- modulename: sre_parse, funcname: _uniq
sre_parse.py(434):     return list(dict.fromkeys(items))
sre_parse.py(608):             if _len(set) == 1 and set[0][0] is LITERAL:
sre_parse.py(615):                 if negate:
sre_parse.py(619):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(238):         except IndexError:
sre_parse.py(239):             self.next = None
sre_parse.py(240):             return
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(629):             elif this == "+":
sre_parse.py(630):                 min, max = 1, MAXREPEAT
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(509):             break # end of pattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(447):             break
sre_parse.py(449):     if len(items) == 1:
sre_parse.py(450):         return items[0]
sre_parse.py(965):     p.state.flags = fix_flags(str, p.state.flags)
 --- modulename: sre_parse, funcname: fix_flags
sre_parse.py(930):     if isinstance(src, str):
sre_parse.py(931):         if flags & SRE_FLAG_LOCALE:
sre_parse.py(933):         if not flags & SRE_FLAG_ASCII:
sre_parse.py(934):             flags |= SRE_FLAG_UNICODE
sre_parse.py(942):     return flags
sre_parse.py(967):     if source.next is not None:
sre_parse.py(971):     for g in p.state.grouprefpos:
sre_parse.py(976):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(979):     return p
sre_compile.py(792):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(624):     flags = p.state.flags | flags
sre_compile.py(625):     code = []
sre_compile.py(628):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(564):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_compile.py(565):     if hi > MAXCODE:
sre_compile.py(567):     if lo == 0:
sre_compile.py(571):     prefix = []
sre_compile.py(572):     prefix_skip = 0
sre_compile.py(573):     charset = [] # not used
sre_compile.py(574):     if not (flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE):
sre_compile.py(576):         prefix, prefix_skip, got_all = _get_literal_prefix(pattern, flags)
 --- modulename: sre_compile, funcname: _get_literal_prefix
sre_compile.py(487):     prefix = []
sre_compile.py(488):     prefixappend = prefix.append
sre_compile.py(489):     prefix_skip = None
sre_compile.py(490):     iscased = _get_iscased(flags)
 --- modulename: sre_compile, funcname: _get_iscased
sre_compile.py(478):     if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(479):         return None
sre_compile.py(491):     for op, av in pattern.data:
sre_compile.py(492):         if op is LITERAL:
sre_compile.py(496):         elif op is SUBPATTERN:
sre_compile.py(511):             break
sre_compile.py(514):     return prefix, prefix_skip, False
sre_compile.py(578):         if not prefix:
sre_compile.py(579):             charset = _get_charset_prefix(pattern, flags)
 --- modulename: sre_compile, funcname: _get_charset_prefix
sre_compile.py(517):     while True:
sre_compile.py(518):         if not pattern.data:
sre_compile.py(520):         op, av = pattern.data[0]
sre_compile.py(521):         if op is not SUBPATTERN:
sre_compile.py(522):             break
sre_compile.py(528):     iscased = _get_iscased(flags)
 --- modulename: sre_compile, funcname: _get_iscased
sre_compile.py(478):     if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(479):         return None
sre_compile.py(529):     if op is LITERAL:
sre_compile.py(533):     elif op is BRANCH:
sre_compile.py(545):     elif op is IN:
sre_compile.py(558):     return None
sre_compile.py(585):     emit = code.append
sre_compile.py(586):     emit(INFO)
sre_compile.py(587):     skip = len(code); emit(0)
sre_compile.py(589):     mask = 0
sre_compile.py(590):     if prefix:
sre_compile.py(594):     elif charset:
sre_compile.py(596):     emit(mask)
sre_compile.py(598):     if lo < MAXCODE:
sre_compile.py(599):         emit(lo)
sre_compile.py(603):     emit(min(hi, MAXCODE))
sre_compile.py(605):     if prefix:
sre_compile.py(613):     elif charset:
sre_compile.py(617):     code[skip] = len(code) - skip
sre_compile.py(631):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(136):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(294):     out = []
sre_compile.py(295):     tail = []
sre_compile.py(296):     charmap = bytearray(256)
sre_compile.py(297):     hascased = False
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(312):                 elif op is RANGE:
sre_compile.py(313):                     r = range(av[0], av[1]+1)
sre_compile.py(314):                     if fixup:
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(358):     runs = []
sre_compile.py(359):     q = 0
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(364):         if len(runs) >= 2:
sre_compile.py(367):         q = charmap.find(0, p)
sre_compile.py(368):         if q < 0:
sre_compile.py(371):         runs.append((p, q))
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(363):             break
sre_compile.py(372):     if runs is not None:
sre_compile.py(374):         for p, q in runs:
sre_compile.py(375):             if q - p == 1:
sre_compile.py(378):                 out.append((RANGE, (p, q - 1)))
sre_compile.py(374):         for p, q in runs:
sre_compile.py(379):         out += tail
sre_compile.py(381):         if hascased or len(out) < len(charset):
sre_compile.py(384):         return charset, hascased
sre_compile.py(137):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:
sre_compile.py(139):             elif not hascased:
sre_compile.py(140):                 emit(IN)
sre_compile.py(145):             skip = _len(code); emit(0)
sre_compile.py(146):             _compile_charset(charset, flags, code)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(267):     emit = code.append
sre_compile.py(268):     for op, av in charset:
sre_compile.py(269):         emit(op)
sre_compile.py(270):         if op is NEGATE:
sre_compile.py(272):         elif op is LITERAL:
sre_compile.py(274):         elif op is RANGE or op is RANGE_UNI_IGNORE:
sre_compile.py(275):             emit(av[0])
sre_compile.py(276):             emit(av[1])
sre_compile.py(268):     for op, av in charset:
sre_compile.py(290):     emit(FAILURE)
sre_compile.py(147):             code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(633):     code.append(SUCCESS)
sre_compile.py(635):     return code
sre_compile.py(794):     if flags & SRE_FLAG_DEBUG:
sre_compile.py(799):     groupindex = p.state.groupdict
sre_compile.py(800):     indexgroup = [None] * p.state.groups
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_compile.py(801):     for k, i in groupindex.items():
sre_compile.py(804):     return _sre.compile(
sre_compile.py(805):         pattern, flags | p.state.flags, code,
sre_compile.py(806):         p.state.groups-1,
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_compile.py(807):         groupindex, tuple(indexgroup)
sre_compile.py(804):     return _sre.compile(
re.py(304):     if not (flags & DEBUG):
 --- modulename: enum, funcname: __and__
enum.py(987):         if not isinstance(other, (self.__class__, int)):
enum.py(989):         return self.__class__(self._value_ & self.__class__(other)._value_)
 --- modulename: enum, funcname: __call__
enum.py(384):         if names is None:  # simple value lookup
enum.py(385):             return cls.__new__(cls, value)
 --- modulename: enum, funcname: __new__
enum.py(682):         if type(value) is cls:
enum.py(687):         try:
enum.py(688):             return cls._value2member_map_[value]
 --- modulename: enum, funcname: __call__
enum.py(384):         if names is None:  # simple value lookup
enum.py(385):             return cls.__new__(cls, value)
 --- modulename: enum, funcname: __new__
enum.py(682):         if type(value) is cls:
enum.py(687):         try:
enum.py(688):             return cls._value2member_map_[value]
re.py(305):         if len(_cache) >= _MAXCACHE:
re.py(311):         _cache[type(pattern), pattern, flags] = p
re.py(312):     return p
 --- modulename: re, funcname: compile
re.py(251):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(290):     if isinstance(flags, RegexFlag):
re.py(291):         flags = flags.value
 --- modulename: types, funcname: __get__
types.py(177):         if instance is None:
types.py(181):         elif self.fget is None:
types.py(183):         return self.fget(instance)
 --- modulename: enum, funcname: value
enum.py(804):         return self._value_
re.py(292):     try:
re.py(293):         return _cache[type(pattern), pattern, flags]
re.py(294):     except KeyError:
re.py(295):         pass
re.py(296):     if isinstance(pattern, Pattern):
re.py(301):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(620):     return isinstance(obj, (str, bytes))
re.py(303):     p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(786):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(620):     return isinstance(obj, (str, bytes))
sre_compile.py(787):         pattern = p
sre_compile.py(788):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(947):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(226):         self.istext = isinstance(string, str)
sre_parse.py(227):         self.string = string
sre_parse.py(228):         if not self.istext:
sre_parse.py(230):         self.decoded_string = string
sre_parse.py(231):         self.index = 0
sre_parse.py(232):         self.next = None
sre_parse.py(233):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(949):     if state is None:
sre_parse.py(950):         state = State()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(77):         self.flags = 0
sre_parse.py(78):         self.groupdict = {}
sre_parse.py(79):         self.groupwidths = [None]  # group 0
sre_parse.py(80):         self.lookbehindgroups = None
sre_parse.py(81):         self.grouprefpos = {}
sre_parse.py(951):     state.flags = flags
sre_parse.py(952):     state.str = str
sre_parse.py(954):     try:
sre_parse.py(955):         p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(439):     items = []
sre_parse.py(440):     itemsappend = items.append
sre_parse.py(441):     sourcematch = source.match
sre_parse.py(442):     start = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(683):         elif this == ".":
sre_parse.py(686):         elif this == "(":
sre_parse.py(849):         elif this == "^":
sre_parse.py(850):             subpatternappend((AT, AT_BEGINNING))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(683):         elif this == ".":
sre_parse.py(686):         elif this == "(":
sre_parse.py(687):             start = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(688):             group = True
sre_parse.py(689):             name = None
sre_parse.py(690):             add_flags = 0
sre_parse.py(691):             del_flags = 0
sre_parse.py(692):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(834):             if group is not None:
sre_parse.py(835):                 try:
sre_parse.py(836):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(86):         gid = self.groups
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_parse.py(87):         self.groupwidths.append(None)
sre_parse.py(88):         if self.groups > MAXGROUPS:
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_parse.py(90):         if name is not None:
sre_parse.py(96):         return gid
sre_parse.py(839):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and
sre_parse.py(841):             p = _parse_sub(source, state, sub_verbose, nested + 1)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(439):     items = []
sre_parse.py(440):     itemsappend = items.append
sre_parse.py(441):     sourcematch = source.match
sre_parse.py(442):     start = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(526):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(358):     code = CATEGORIES.get(escape)
sre_parse.py(359):     if code:
sre_parse.py(361):     code = ESCAPES.get(escape)
sre_parse.py(362):     if code:
sre_parse.py(364):     try:
sre_parse.py(365):         c = escape[1:2]
sre_parse.py(366):         if c == "x":
sre_parse.py(372):         elif c == "u" and source.istext:
sre_parse.py(378):         elif c == "U" and source.istext:
sre_parse.py(386):         elif c == "N" and source.istext:
sre_parse.py(398):         elif c == "0":
sre_parse.py(402):         elif c in DIGITS:
sre_parse.py(425):         if len(escape) == 2:
sre_parse.py(426):             if c in ASCIILETTERS:
sre_parse.py(428):             return LITERAL, ord(escape[1])
sre_parse.py(527):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(533):             here = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(535):             set = []
sre_parse.py(536):             setappend = set.append
sre_parse.py(539):             if source.next == '[':
sre_parse.py(545):             negate = sourcematch("^")
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(553):                     break
sre_parse.py(606):             set = _uniq(set)
 --- modulename: sre_parse, funcname: _uniq
sre_parse.py(434):     return list(dict.fromkeys(items))
sre_parse.py(608):             if _len(set) == 1 and set[0][0] is LITERAL:
sre_parse.py(610):                 if negate:
sre_parse.py(611):                     subpatternappend((NOT_LITERAL, set[0][1]))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(629):             elif this == "+":
sre_parse.py(630):                 min, max = 1, MAXREPEAT
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(511):             break # end of subpattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(447):             break
sre_parse.py(449):     if len(items) == 1:
sre_parse.py(450):         return items[0]
sre_parse.py(842):             if not source.match(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(845):             if group is not None:
sre_parse.py(846):                 state.closegroup(group, p)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(98):         self.groupwidths[gid] = p.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(847):             subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(526):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(358):     code = CATEGORIES.get(escape)
sre_parse.py(359):     if code:
sre_parse.py(360):         return code
sre_parse.py(527):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(629):             elif this == "+":
sre_parse.py(630):                 min, max = 1, MAXREPEAT
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(526):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(358):     code = CATEGORIES.get(escape)
sre_parse.py(359):     if code:
sre_parse.py(360):         return code
sre_parse.py(527):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(627):                 min, max = 0, MAXREPEAT
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(526):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(358):     code = CATEGORIES.get(escape)
sre_parse.py(359):     if code:
sre_parse.py(360):         return code
sre_parse.py(527):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(627):                 min, max = 0, MAXREPEAT
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(533):             here = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(535):             set = []
sre_parse.py(536):             setappend = set.append
sre_parse.py(539):             if source.next == '[':
sre_parse.py(545):             negate = sourcematch("^")
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(555):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(298):     code = ESCAPES.get(escape)
sre_parse.py(299):     if code:
sre_parse.py(301):     code = CATEGORIES.get(escape)
sre_parse.py(302):     if code and code[0] is IN:
sre_parse.py(304):     try:
sre_parse.py(305):         c = escape[1:2]
sre_parse.py(306):         if c == "x":
sre_parse.py(312):         elif c == "u" and source.istext:
sre_parse.py(318):         elif c == "U" and source.istext:
sre_parse.py(326):         elif c == "N" and source.istext:
sre_parse.py(338):         elif c in OCTDIGITS:
sre_parse.py(346):         elif c in DIGITS:
sre_parse.py(348):         if len(escape) == 2:
sre_parse.py(349):             if c in ASCIILETTERS:
sre_parse.py(351):             return LITERAL, ord(escape[1])
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(553):                     break
sre_parse.py(606):             set = _uniq(set)
 --- modulename: sre_parse, funcname: _uniq
sre_parse.py(434):     return list(dict.fromkeys(items))
sre_parse.py(608):             if _len(set) == 1 and set[0][0] is LITERAL:
sre_parse.py(615):                 if negate:
sre_parse.py(619):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(533):             here = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(535):             set = []
sre_parse.py(536):             setappend = set.append
sre_parse.py(539):             if source.next == '[':
sre_parse.py(545):             negate = sourcematch("^")
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(555):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(298):     code = ESCAPES.get(escape)
sre_parse.py(299):     if code:
sre_parse.py(301):     code = CATEGORIES.get(escape)
sre_parse.py(302):     if code and code[0] is IN:
sre_parse.py(304):     try:
sre_parse.py(305):         c = escape[1:2]
sre_parse.py(306):         if c == "x":
sre_parse.py(312):         elif c == "u" and source.istext:
sre_parse.py(318):         elif c == "U" and source.istext:
sre_parse.py(326):         elif c == "N" and source.istext:
sre_parse.py(338):         elif c in OCTDIGITS:
sre_parse.py(346):         elif c in DIGITS:
sre_parse.py(348):         if len(escape) == 2:
sre_parse.py(349):             if c in ASCIILETTERS:
sre_parse.py(351):             return LITERAL, ord(escape[1])
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(553):                     break
sre_parse.py(606):             set = _uniq(set)
 --- modulename: sre_parse, funcname: _uniq
sre_parse.py(434):     return list(dict.fromkeys(items))
sre_parse.py(608):             if _len(set) == 1 and set[0][0] is LITERAL:
sre_parse.py(615):                 if negate:
sre_parse.py(616):                     set.insert(0, (NEGATE, None))
sre_parse.py(619):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(627):                 min, max = 0, MAXREPEAT
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(533):             here = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(535):             set = []
sre_parse.py(536):             setappend = set.append
sre_parse.py(539):             if source.next == '[':
sre_parse.py(545):             negate = sourcematch("^")
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(555):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(298):     code = ESCAPES.get(escape)
sre_parse.py(299):     if code:
sre_parse.py(301):     code = CATEGORIES.get(escape)
sre_parse.py(302):     if code and code[0] is IN:
sre_parse.py(304):     try:
sre_parse.py(305):         c = escape[1:2]
sre_parse.py(306):         if c == "x":
sre_parse.py(312):         elif c == "u" and source.istext:
sre_parse.py(318):         elif c == "U" and source.istext:
sre_parse.py(326):         elif c == "N" and source.istext:
sre_parse.py(338):         elif c in OCTDIGITS:
sre_parse.py(346):         elif c in DIGITS:
sre_parse.py(348):         if len(escape) == 2:
sre_parse.py(349):             if c in ASCIILETTERS:
sre_parse.py(351):             return LITERAL, ord(escape[1])
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(553):                     break
sre_parse.py(606):             set = _uniq(set)
 --- modulename: sre_parse, funcname: _uniq
sre_parse.py(434):     return list(dict.fromkeys(items))
sre_parse.py(608):             if _len(set) == 1 and set[0][0] is LITERAL:
sre_parse.py(615):                 if negate:
sre_parse.py(619):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(683):         elif this == ".":
sre_parse.py(686):         elif this == "(":
sre_parse.py(687):             start = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(688):             group = True
sre_parse.py(689):             name = None
sre_parse.py(690):             add_flags = 0
sre_parse.py(691):             del_flags = 0
sre_parse.py(692):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(834):             if group is not None:
sre_parse.py(835):                 try:
sre_parse.py(836):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(86):         gid = self.groups
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_parse.py(87):         self.groupwidths.append(None)
sre_parse.py(88):         if self.groups > MAXGROUPS:
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_parse.py(90):         if name is not None:
sre_parse.py(96):         return gid
sre_parse.py(839):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and
sre_parse.py(841):             p = _parse_sub(source, state, sub_verbose, nested + 1)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(439):     items = []
sre_parse.py(440):     itemsappend = items.append
sre_parse.py(441):     sourcematch = source.match
sre_parse.py(442):     start = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(526):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(358):     code = CATEGORIES.get(escape)
sre_parse.py(359):     if code:
sre_parse.py(360):         return code
sre_parse.py(527):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(627):                 min, max = 0, MAXREPEAT
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(526):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(358):     code = CATEGORIES.get(escape)
sre_parse.py(359):     if code:
sre_parse.py(361):     code = ESCAPES.get(escape)
sre_parse.py(362):     if code:
sre_parse.py(364):     try:
sre_parse.py(365):         c = escape[1:2]
sre_parse.py(366):         if c == "x":
sre_parse.py(372):         elif c == "u" and source.istext:
sre_parse.py(378):         elif c == "U" and source.istext:
sre_parse.py(386):         elif c == "N" and source.istext:
sre_parse.py(398):         elif c == "0":
sre_parse.py(402):         elif c in DIGITS:
sre_parse.py(425):         if len(escape) == 2:
sre_parse.py(426):             if c in ASCIILETTERS:
sre_parse.py(428):             return LITERAL, ord(escape[1])
sre_parse.py(527):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(511):             break # end of subpattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(511):             break # end of subpattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(447):             break
sre_parse.py(449):     if len(items) == 1:
sre_parse.py(452):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(455):     while True:
sre_parse.py(456):         prefix = None
sre_parse.py(457):         for item in items:
sre_parse.py(458):             if not item:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(460):             if prefix is None:
sre_parse.py(461):                 prefix = item[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(457):         for item in items:
sre_parse.py(458):             if not item:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(459):                 break
sre_parse.py(471):         break
sre_parse.py(474):     set = []
sre_parse.py(475):     for item in items:
sre_parse.py(476):         if len(item) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(477):             break
sre_parse.py(491):     subpattern.append((BRANCH, (None, items)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(492):     return subpattern
sre_parse.py(842):             if not source.match(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(238):         except IndexError:
sre_parse.py(239):             self.next = None
sre_parse.py(240):             return
sre_parse.py(253):             return True
sre_parse.py(845):             if group is not None:
sre_parse.py(846):                 state.closegroup(group, p)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(98):         self.groupwidths[gid] = p.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(182):                 i = MAXREPEAT - 1
sre_parse.py(183):                 j = 0
sre_parse.py(184):                 for av in av[1]:
sre_parse.py(185):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(186):                     i = min(i, l)
sre_parse.py(187):                     j = max(j, h)
sre_parse.py(184):                 for av in av[1]:
sre_parse.py(185):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(186):                     i = min(i, l)
sre_parse.py(187):                     j = max(j, h)
sre_parse.py(184):                 for av in av[1]:
sre_parse.py(188):                 lo = lo + i
sre_parse.py(189):                 hi = hi + j
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(847):             subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(509):             break # end of pattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(862):             group, add_flags, del_flags, p = av
sre_parse.py(863):             if group is None and not add_flags and not del_flags:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(862):             group, add_flags, del_flags, p = av
sre_parse.py(863):             if group is None and not add_flags and not del_flags:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(447):             break
sre_parse.py(449):     if len(items) == 1:
sre_parse.py(450):         return items[0]
sre_parse.py(965):     p.state.flags = fix_flags(str, p.state.flags)
 --- modulename: sre_parse, funcname: fix_flags
sre_parse.py(930):     if isinstance(src, str):
sre_parse.py(931):         if flags & SRE_FLAG_LOCALE:
sre_parse.py(933):         if not flags & SRE_FLAG_ASCII:
sre_parse.py(934):             flags |= SRE_FLAG_UNICODE
sre_parse.py(942):     return flags
sre_parse.py(967):     if source.next is not None:
sre_parse.py(971):     for g in p.state.grouprefpos:
sre_parse.py(976):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(979):     return p
sre_compile.py(792):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(624):     flags = p.state.flags | flags
sre_compile.py(625):     code = []
sre_compile.py(628):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(564):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(205):             elif op is GROUPREF:
sre_parse.py(209):             elif op is GROUPREF_EXISTS:
sre_parse.py(219):             elif op is SUCCESS:
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(195):                 i, j = av[-1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(178):             return self.width
sre_parse.py(196):                 lo = lo + i
sre_parse.py(197):                 hi = hi + j
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(195):                 i, j = av[-1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(178):             return self.width
sre_parse.py(196):                 lo = lo + i
sre_parse.py(197):                 hi = hi + j
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_compile.py(565):     if hi > MAXCODE:
sre_compile.py(567):     if lo == 0:
sre_compile.py(571):     prefix = []
sre_compile.py(572):     prefix_skip = 0
sre_compile.py(573):     charset = [] # not used
sre_compile.py(574):     if not (flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE):
sre_compile.py(576):         prefix, prefix_skip, got_all = _get_literal_prefix(pattern, flags)
 --- modulename: sre_compile, funcname: _get_literal_prefix
sre_compile.py(487):     prefix = []
sre_compile.py(488):     prefixappend = prefix.append
sre_compile.py(489):     prefix_skip = None
sre_compile.py(490):     iscased = _get_iscased(flags)
 --- modulename: sre_compile, funcname: _get_iscased
sre_compile.py(478):     if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(479):         return None
sre_compile.py(491):     for op, av in pattern.data:
sre_compile.py(492):         if op is LITERAL:
sre_compile.py(496):         elif op is SUBPATTERN:
sre_compile.py(511):             break
sre_compile.py(514):     return prefix, prefix_skip, False
sre_compile.py(578):         if not prefix:
sre_compile.py(579):             charset = _get_charset_prefix(pattern, flags)
 --- modulename: sre_compile, funcname: _get_charset_prefix
sre_compile.py(517):     while True:
sre_compile.py(518):         if not pattern.data:
sre_compile.py(520):         op, av = pattern.data[0]
sre_compile.py(521):         if op is not SUBPATTERN:
sre_compile.py(522):             break
sre_compile.py(528):     iscased = _get_iscased(flags)
 --- modulename: sre_compile, funcname: _get_iscased
sre_compile.py(478):     if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(479):         return None
sre_compile.py(529):     if op is LITERAL:
sre_compile.py(533):     elif op is BRANCH:
sre_compile.py(545):     elif op is IN:
sre_compile.py(558):     return None
sre_compile.py(585):     emit = code.append
sre_compile.py(586):     emit(INFO)
sre_compile.py(587):     skip = len(code); emit(0)
sre_compile.py(589):     mask = 0
sre_compile.py(590):     if prefix:
sre_compile.py(594):     elif charset:
sre_compile.py(596):     emit(mask)
sre_compile.py(598):     if lo < MAXCODE:
sre_compile.py(599):         emit(lo)
sre_compile.py(603):     emit(min(hi, MAXCODE))
sre_compile.py(605):     if prefix:
sre_compile.py(613):     elif charset:
sre_compile.py(617):     code[skip] = len(code) - skip
sre_compile.py(631):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(178):         elif op is SUBPATTERN:
sre_compile.py(188):         elif op in SUCCESS_CODES:
sre_compile.py(190):         elif op in ASSERT_CODES:
sre_compile.py(203):         elif op is CALL:
sre_compile.py(209):         elif op is AT:
sre_compile.py(210):             emit(op)
sre_compile.py(211):             if flags & SRE_FLAG_MULTILINE:
sre_compile.py(213):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(215):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(216):                 av = AT_UNICODE.get(av, av)
sre_compile.py(217):             emit(av)
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(178):         elif op is SUBPATTERN:
sre_compile.py(179):             group, add_flags, del_flags, p = av
sre_compile.py(180):             if group:
sre_compile.py(181):                 emit(MARK)
sre_compile.py(182):                 emit((group-1)*2)
sre_compile.py(184):             _compile(code, p, _combine_flags(flags, add_flags, del_flags))
 --- modulename: sre_compile, funcname: _combine_flags
sre_compile.py(83):     if add_flags & TYPE_FLAGS:
sre_compile.py(85):     return (flags | add_flags) & ~del_flags
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(185):             if group:
sre_compile.py(186):                 emit(MARK)
sre_compile.py(187):                 emit((group-1)*2+1)
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(136):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(294):     out = []
sre_compile.py(295):     tail = []
sre_compile.py(296):     charmap = bytearray(256)
sre_compile.py(297):     hascased = False
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(312):                 elif op is RANGE:
sre_compile.py(329):                 elif op is NEGATE:
sre_compile.py(332):                     tail.append((op, av))
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(358):     runs = []
sre_compile.py(359):     q = 0
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(363):             break
sre_compile.py(372):     if runs is not None:
sre_compile.py(374):         for p, q in runs:
sre_compile.py(379):         out += tail
sre_compile.py(381):         if hascased or len(out) < len(charset):
sre_compile.py(384):         return charset, hascased
sre_compile.py(137):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:
sre_compile.py(139):             elif not hascased:
sre_compile.py(140):                 emit(IN)
sre_compile.py(145):             skip = _len(code); emit(0)
sre_compile.py(146):             _compile_charset(charset, flags, code)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(267):     emit = code.append
sre_compile.py(268):     for op, av in charset:
sre_compile.py(269):         emit(op)
sre_compile.py(270):         if op is NEGATE:
sre_compile.py(272):         elif op is LITERAL:
sre_compile.py(274):         elif op is RANGE or op is RANGE_UNI_IGNORE:
sre_compile.py(277):         elif op is CHARSET:
sre_compile.py(279):         elif op is BIGCHARSET:
sre_compile.py(281):         elif op is CATEGORY:
sre_compile.py(282):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(284):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(285):                 emit(CH_UNICODE[av])
sre_compile.py(268):     for op, av in charset:
sre_compile.py(290):     emit(FAILURE)
sre_compile.py(147):             code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(136):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(294):     out = []
sre_compile.py(295):     tail = []
sre_compile.py(296):     charmap = bytearray(256)
sre_compile.py(297):     hascased = False
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(312):                 elif op is RANGE:
sre_compile.py(329):                 elif op is NEGATE:
sre_compile.py(332):                     tail.append((op, av))
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(358):     runs = []
sre_compile.py(359):     q = 0
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(363):             break
sre_compile.py(372):     if runs is not None:
sre_compile.py(374):         for p, q in runs:
sre_compile.py(379):         out += tail
sre_compile.py(381):         if hascased or len(out) < len(charset):
sre_compile.py(384):         return charset, hascased
sre_compile.py(137):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:
sre_compile.py(139):             elif not hascased:
sre_compile.py(140):                 emit(IN)
sre_compile.py(145):             skip = _len(code); emit(0)
sre_compile.py(146):             _compile_charset(charset, flags, code)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(267):     emit = code.append
sre_compile.py(268):     for op, av in charset:
sre_compile.py(269):         emit(op)
sre_compile.py(270):         if op is NEGATE:
sre_compile.py(272):         elif op is LITERAL:
sre_compile.py(274):         elif op is RANGE or op is RANGE_UNI_IGNORE:
sre_compile.py(277):         elif op is CHARSET:
sre_compile.py(279):         elif op is BIGCHARSET:
sre_compile.py(281):         elif op is CATEGORY:
sre_compile.py(282):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(284):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(285):                 emit(CH_UNICODE[av])
sre_compile.py(268):     for op, av in charset:
sre_compile.py(290):     emit(FAILURE)
sre_compile.py(147):             code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(136):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(294):     out = []
sre_compile.py(295):     tail = []
sre_compile.py(296):     charmap = bytearray(256)
sre_compile.py(297):     hascased = False
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(312):                 elif op is RANGE:
sre_compile.py(329):                 elif op is NEGATE:
sre_compile.py(332):                     tail.append((op, av))
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(358):     runs = []
sre_compile.py(359):     q = 0
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(363):             break
sre_compile.py(372):     if runs is not None:
sre_compile.py(374):         for p, q in runs:
sre_compile.py(379):         out += tail
sre_compile.py(381):         if hascased or len(out) < len(charset):
sre_compile.py(384):         return charset, hascased
sre_compile.py(137):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:
sre_compile.py(139):             elif not hascased:
sre_compile.py(140):                 emit(IN)
sre_compile.py(145):             skip = _len(code); emit(0)
sre_compile.py(146):             _compile_charset(charset, flags, code)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(267):     emit = code.append
sre_compile.py(268):     for op, av in charset:
sre_compile.py(269):         emit(op)
sre_compile.py(270):         if op is NEGATE:
sre_compile.py(272):         elif op is LITERAL:
sre_compile.py(274):         elif op is RANGE or op is RANGE_UNI_IGNORE:
sre_compile.py(277):         elif op is CHARSET:
sre_compile.py(279):         elif op is BIGCHARSET:
sre_compile.py(281):         elif op is CATEGORY:
sre_compile.py(282):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(284):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(285):                 emit(CH_UNICODE[av])
sre_compile.py(268):     for op, av in charset:
sre_compile.py(290):     emit(FAILURE)
sre_compile.py(147):             code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(136):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(294):     out = []
sre_compile.py(295):     tail = []
sre_compile.py(296):     charmap = bytearray(256)
sre_compile.py(297):     hascased = False
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(358):     runs = []
sre_compile.py(359):     q = 0
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(364):         if len(runs) >= 2:
sre_compile.py(367):         q = charmap.find(0, p)
sre_compile.py(368):         if q < 0:
sre_compile.py(371):         runs.append((p, q))
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(364):         if len(runs) >= 2:
sre_compile.py(367):         q = charmap.find(0, p)
sre_compile.py(368):         if q < 0:
sre_compile.py(371):         runs.append((p, q))
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(363):             break
sre_compile.py(372):     if runs is not None:
sre_compile.py(374):         for p, q in runs:
sre_compile.py(375):             if q - p == 1:
sre_compile.py(376):                 out.append((LITERAL, p))
sre_compile.py(374):         for p, q in runs:
sre_compile.py(375):             if q - p == 1:
sre_compile.py(376):                 out.append((LITERAL, p))
sre_compile.py(374):         for p, q in runs:
sre_compile.py(379):         out += tail
sre_compile.py(381):         if hascased or len(out) < len(charset):
sre_compile.py(384):         return charset, hascased
sre_compile.py(137):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:
sre_compile.py(139):             elif not hascased:
sre_compile.py(140):                 emit(IN)
sre_compile.py(145):             skip = _len(code); emit(0)
sre_compile.py(146):             _compile_charset(charset, flags, code)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(267):     emit = code.append
sre_compile.py(268):     for op, av in charset:
sre_compile.py(269):         emit(op)
sre_compile.py(270):         if op is NEGATE:
sre_compile.py(272):         elif op is LITERAL:
sre_compile.py(273):             emit(av)
sre_compile.py(268):     for op, av in charset:
sre_compile.py(269):         emit(op)
sre_compile.py(270):         if op is NEGATE:
sre_compile.py(272):         elif op is LITERAL:
sre_compile.py(273):             emit(av)
sre_compile.py(268):     for op, av in charset:
sre_compile.py(290):     emit(FAILURE)
sre_compile.py(147):             code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(136):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(294):     out = []
sre_compile.py(295):     tail = []
sre_compile.py(296):     charmap = bytearray(256)
sre_compile.py(297):     hascased = False
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(312):                 elif op is RANGE:
sre_compile.py(329):                 elif op is NEGATE:
sre_compile.py(330):                     out.append((op, av))
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(358):     runs = []
sre_compile.py(359):     q = 0
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(364):         if len(runs) >= 2:
sre_compile.py(367):         q = charmap.find(0, p)
sre_compile.py(368):         if q < 0:
sre_compile.py(371):         runs.append((p, q))
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(364):         if len(runs) >= 2:
sre_compile.py(367):         q = charmap.find(0, p)
sre_compile.py(368):         if q < 0:
sre_compile.py(371):         runs.append((p, q))
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(363):             break
sre_compile.py(372):     if runs is not None:
sre_compile.py(374):         for p, q in runs:
sre_compile.py(375):             if q - p == 1:
sre_compile.py(376):                 out.append((LITERAL, p))
sre_compile.py(374):         for p, q in runs:
sre_compile.py(375):             if q - p == 1:
sre_compile.py(376):                 out.append((LITERAL, p))
sre_compile.py(374):         for p, q in runs:
sre_compile.py(379):         out += tail
sre_compile.py(381):         if hascased or len(out) < len(charset):
sre_compile.py(384):         return charset, hascased
sre_compile.py(137):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:
sre_compile.py(139):             elif not hascased:
sre_compile.py(140):                 emit(IN)
sre_compile.py(145):             skip = _len(code); emit(0)
sre_compile.py(146):             _compile_charset(charset, flags, code)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(267):     emit = code.append
sre_compile.py(268):     for op, av in charset:
sre_compile.py(269):         emit(op)
sre_compile.py(270):         if op is NEGATE:
sre_compile.py(271):             pass
sre_compile.py(268):     for op, av in charset:
sre_compile.py(269):         emit(op)
sre_compile.py(270):         if op is NEGATE:
sre_compile.py(272):         elif op is LITERAL:
sre_compile.py(273):             emit(av)
sre_compile.py(268):     for op, av in charset:
sre_compile.py(269):         emit(op)
sre_compile.py(270):         if op is NEGATE:
sre_compile.py(272):         elif op is LITERAL:
sre_compile.py(273):             emit(av)
sre_compile.py(268):     for op, av in charset:
sre_compile.py(290):     emit(FAILURE)
sre_compile.py(147):             code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(136):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(294):     out = []
sre_compile.py(295):     tail = []
sre_compile.py(296):     charmap = bytearray(256)
sre_compile.py(297):     hascased = False
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(358):     runs = []
sre_compile.py(359):     q = 0
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(364):         if len(runs) >= 2:
sre_compile.py(367):         q = charmap.find(0, p)
sre_compile.py(368):         if q < 0:
sre_compile.py(371):         runs.append((p, q))
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(364):         if len(runs) >= 2:
sre_compile.py(367):         q = charmap.find(0, p)
sre_compile.py(368):         if q < 0:
sre_compile.py(371):         runs.append((p, q))
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(363):             break
sre_compile.py(372):     if runs is not None:
sre_compile.py(374):         for p, q in runs:
sre_compile.py(375):             if q - p == 1:
sre_compile.py(376):                 out.append((LITERAL, p))
sre_compile.py(374):         for p, q in runs:
sre_compile.py(375):             if q - p == 1:
sre_compile.py(376):                 out.append((LITERAL, p))
sre_compile.py(374):         for p, q in runs:
sre_compile.py(379):         out += tail
sre_compile.py(381):         if hascased or len(out) < len(charset):
sre_compile.py(384):         return charset, hascased
sre_compile.py(137):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:
sre_compile.py(139):             elif not hascased:
sre_compile.py(140):                 emit(IN)
sre_compile.py(145):             skip = _len(code); emit(0)
sre_compile.py(146):             _compile_charset(charset, flags, code)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(267):     emit = code.append
sre_compile.py(268):     for op, av in charset:
sre_compile.py(269):         emit(op)
sre_compile.py(270):         if op is NEGATE:
sre_compile.py(272):         elif op is LITERAL:
sre_compile.py(273):             emit(av)
sre_compile.py(268):     for op, av in charset:
sre_compile.py(269):         emit(op)
sre_compile.py(270):         if op is NEGATE:
sre_compile.py(272):         elif op is LITERAL:
sre_compile.py(273):             emit(av)
sre_compile.py(268):     for op, av in charset:
sre_compile.py(290):     emit(FAILURE)
sre_compile.py(147):             code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(178):         elif op is SUBPATTERN:
sre_compile.py(179):             group, add_flags, del_flags, p = av
sre_compile.py(180):             if group:
sre_compile.py(181):                 emit(MARK)
sre_compile.py(182):                 emit((group-1)*2)
sre_compile.py(184):             _compile(code, p, _combine_flags(flags, add_flags, del_flags))
 --- modulename: sre_compile, funcname: _combine_flags
sre_compile.py(83):     if add_flags & TYPE_FLAGS:
sre_compile.py(85):     return (flags | add_flags) & ~del_flags
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(178):         elif op is SUBPATTERN:
sre_compile.py(188):         elif op in SUCCESS_CODES:
sre_compile.py(190):         elif op in ASSERT_CODES:
sre_compile.py(203):         elif op is CALL:
sre_compile.py(209):         elif op is AT:
sre_compile.py(218):         elif op is BRANCH:
sre_compile.py(219):             emit(op)
sre_compile.py(220):             tail = []
sre_compile.py(221):             tailappend = tail.append
sre_compile.py(222):             for av in av[1]:
sre_compile.py(223):                 skip = _len(code); emit(0)
sre_compile.py(225):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(136):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(294):     out = []
sre_compile.py(295):     tail = []
sre_compile.py(296):     charmap = bytearray(256)
sre_compile.py(297):     hascased = False
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(312):                 elif op is RANGE:
sre_compile.py(329):                 elif op is NEGATE:
sre_compile.py(332):                     tail.append((op, av))
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(358):     runs = []
sre_compile.py(359):     q = 0
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(363):             break
sre_compile.py(372):     if runs is not None:
sre_compile.py(374):         for p, q in runs:
sre_compile.py(379):         out += tail
sre_compile.py(381):         if hascased or len(out) < len(charset):
sre_compile.py(384):         return charset, hascased
sre_compile.py(137):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:
sre_compile.py(139):             elif not hascased:
sre_compile.py(140):                 emit(IN)
sre_compile.py(145):             skip = _len(code); emit(0)
sre_compile.py(146):             _compile_charset(charset, flags, code)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(267):     emit = code.append
sre_compile.py(268):     for op, av in charset:
sre_compile.py(269):         emit(op)
sre_compile.py(270):         if op is NEGATE:
sre_compile.py(272):         elif op is LITERAL:
sre_compile.py(274):         elif op is RANGE or op is RANGE_UNI_IGNORE:
sre_compile.py(277):         elif op is CHARSET:
sre_compile.py(279):         elif op is BIGCHARSET:
sre_compile.py(281):         elif op is CATEGORY:
sre_compile.py(282):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(284):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(285):                 emit(CH_UNICODE[av])
sre_compile.py(268):     for op, av in charset:
sre_compile.py(290):     emit(FAILURE)
sre_compile.py(147):             code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(226):                 emit(JUMP)
sre_compile.py(227):                 tailappend(_len(code)); emit(0)
sre_compile.py(228):                 code[skip] = _len(code) - skip
sre_compile.py(222):             for av in av[1]:
sre_compile.py(223):                 skip = _len(code); emit(0)
sre_compile.py(225):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(226):                 emit(JUMP)
sre_compile.py(227):                 tailappend(_len(code)); emit(0)
sre_compile.py(228):                 code[skip] = _len(code) - skip
sre_compile.py(222):             for av in av[1]:
sre_compile.py(229):             emit(FAILURE) # end of branch
sre_compile.py(230):             for tail in tail:
sre_compile.py(231):                 code[tail] = _len(code) - tail
sre_compile.py(230):             for tail in tail:
sre_compile.py(231):                 code[tail] = _len(code) - tail
sre_compile.py(230):             for tail in tail:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(185):             if group:
sre_compile.py(186):                 emit(MARK)
sre_compile.py(187):                 emit((group-1)*2+1)
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(633):     code.append(SUCCESS)
sre_compile.py(635):     return code
sre_compile.py(794):     if flags & SRE_FLAG_DEBUG:
sre_compile.py(799):     groupindex = p.state.groupdict
sre_compile.py(800):     indexgroup = [None] * p.state.groups
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_compile.py(801):     for k, i in groupindex.items():
sre_compile.py(804):     return _sre.compile(
sre_compile.py(805):         pattern, flags | p.state.flags, code,
sre_compile.py(806):         p.state.groups-1,
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_compile.py(807):         groupindex, tuple(indexgroup)
sre_compile.py(804):     return _sre.compile(
re.py(304):     if not (flags & DEBUG):
 --- modulename: enum, funcname: __and__
enum.py(987):         if not isinstance(other, (self.__class__, int)):
enum.py(989):         return self.__class__(self._value_ & self.__class__(other)._value_)
 --- modulename: enum, funcname: __call__
enum.py(384):         if names is None:  # simple value lookup
enum.py(385):             return cls.__new__(cls, value)
 --- modulename: enum, funcname: __new__
enum.py(682):         if type(value) is cls:
enum.py(687):         try:
enum.py(688):             return cls._value2member_map_[value]
 --- modulename: enum, funcname: __call__
enum.py(384):         if names is None:  # simple value lookup
enum.py(385):             return cls.__new__(cls, value)
 --- modulename: enum, funcname: __new__
enum.py(682):         if type(value) is cls:
enum.py(687):         try:
enum.py(688):             return cls._value2member_map_[value]
re.py(305):         if len(_cache) >= _MAXCACHE:
re.py(311):         _cache[type(pattern), pattern, flags] = p
re.py(312):     return p
 --- modulename: re, funcname: compile
re.py(251):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(290):     if isinstance(flags, RegexFlag):
re.py(292):     try:
re.py(293):         return _cache[type(pattern), pattern, flags]
re.py(294):     except KeyError:
re.py(295):         pass
re.py(296):     if isinstance(pattern, Pattern):
re.py(301):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(620):     return isinstance(obj, (str, bytes))
re.py(303):     p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(786):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(620):     return isinstance(obj, (str, bytes))
sre_compile.py(787):         pattern = p
sre_compile.py(788):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(947):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(226):         self.istext = isinstance(string, str)
sre_parse.py(227):         self.string = string
sre_parse.py(228):         if not self.istext:
sre_parse.py(230):         self.decoded_string = string
sre_parse.py(231):         self.index = 0
sre_parse.py(232):         self.next = None
sre_parse.py(233):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(949):     if state is None:
sre_parse.py(950):         state = State()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(77):         self.flags = 0
sre_parse.py(78):         self.groupdict = {}
sre_parse.py(79):         self.groupwidths = [None]  # group 0
sre_parse.py(80):         self.lookbehindgroups = None
sre_parse.py(81):         self.grouprefpos = {}
sre_parse.py(951):     state.flags = flags
sre_parse.py(952):     state.str = str
sre_parse.py(954):     try:
sre_parse.py(955):         p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(439):     items = []
sre_parse.py(440):     itemsappend = items.append
sre_parse.py(441):     sourcematch = source.match
sre_parse.py(442):     start = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(533):             here = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(535):             set = []
sre_parse.py(536):             setappend = set.append
sre_parse.py(539):             if source.next == '[':
sre_parse.py(545):             negate = sourcematch("^")
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(555):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(298):     code = ESCAPES.get(escape)
sre_parse.py(299):     if code:
sre_parse.py(301):     code = CATEGORIES.get(escape)
sre_parse.py(302):     if code and code[0] is IN:
sre_parse.py(304):     try:
sre_parse.py(305):         c = escape[1:2]
sre_parse.py(306):         if c == "x":
sre_parse.py(308):             escape += source.getwhile(2, HEXDIGITS)
 --- modulename: sre_parse, funcname: getwhile
sre_parse.py(260):         result = ''
sre_parse.py(261):         for _ in range(n):
sre_parse.py(262):             c = self.next
sre_parse.py(263):             if c not in charset:
sre_parse.py(265):             result += c
sre_parse.py(266):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(261):         for _ in range(n):
sre_parse.py(262):             c = self.next
sre_parse.py(263):             if c not in charset:
sre_parse.py(265):             result += c
sre_parse.py(266):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(261):         for _ in range(n):
sre_parse.py(267):         return result
sre_parse.py(309):             if len(escape) != 4:
sre_parse.py(311):             return LITERAL, int(escape[2:], 16)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(555):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(298):     code = ESCAPES.get(escape)
sre_parse.py(299):     if code:
sre_parse.py(301):     code = CATEGORIES.get(escape)
sre_parse.py(302):     if code and code[0] is IN:
sre_parse.py(304):     try:
sre_parse.py(305):         c = escape[1:2]
sre_parse.py(306):         if c == "x":
sre_parse.py(308):             escape += source.getwhile(2, HEXDIGITS)
 --- modulename: sre_parse, funcname: getwhile
sre_parse.py(260):         result = ''
sre_parse.py(261):         for _ in range(n):
sre_parse.py(262):             c = self.next
sre_parse.py(263):             if c not in charset:
sre_parse.py(265):             result += c
sre_parse.py(266):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(261):         for _ in range(n):
sre_parse.py(262):             c = self.next
sre_parse.py(263):             if c not in charset:
sre_parse.py(265):             result += c
sre_parse.py(266):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(261):         for _ in range(n):
sre_parse.py(267):         return result
sre_parse.py(309):             if len(escape) != 4:
sre_parse.py(311):             return LITERAL, int(escape[2:], 16)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(555):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(298):     code = ESCAPES.get(escape)
sre_parse.py(299):     if code:
sre_parse.py(301):     code = CATEGORIES.get(escape)
sre_parse.py(302):     if code and code[0] is IN:
sre_parse.py(304):     try:
sre_parse.py(305):         c = escape[1:2]
sre_parse.py(306):         if c == "x":
sre_parse.py(308):             escape += source.getwhile(2, HEXDIGITS)
 --- modulename: sre_parse, funcname: getwhile
sre_parse.py(260):         result = ''
sre_parse.py(261):         for _ in range(n):
sre_parse.py(262):             c = self.next
sre_parse.py(263):             if c not in charset:
sre_parse.py(265):             result += c
sre_parse.py(266):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(261):         for _ in range(n):
sre_parse.py(262):             c = self.next
sre_parse.py(263):             if c not in charset:
sre_parse.py(265):             result += c
sre_parse.py(266):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(261):         for _ in range(n):
sre_parse.py(267):         return result
sre_parse.py(309):             if len(escape) != 4:
sre_parse.py(311):             return LITERAL, int(escape[2:], 16)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(571):                     that = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(572):                     if that is None:
sre_parse.py(575):                     if that == "]":
sre_parse.py(581):                     if that[0] == "\\":
sre_parse.py(584):                         if that == '-':
sre_parse.py(591):                         code2 = LITERAL, _ord(that)
sre_parse.py(592):                     if code1[0] != LITERAL or code2[0] != LITERAL:
sre_parse.py(595):                     lo = code1[1]
sre_parse.py(596):                     hi = code2[1]
sre_parse.py(597):                     if hi < lo:
sre_parse.py(600):                     setappend((RANGE, (lo, hi)))
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(571):                     that = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(572):                     if that is None:
sre_parse.py(575):                     if that == "]":
sre_parse.py(581):                     if that[0] == "\\":
sre_parse.py(584):                         if that == '-':
sre_parse.py(591):                         code2 = LITERAL, _ord(that)
sre_parse.py(592):                     if code1[0] != LITERAL or code2[0] != LITERAL:
sre_parse.py(595):                     lo = code1[1]
sre_parse.py(596):                     hi = code2[1]
sre_parse.py(597):                     if hi < lo:
sre_parse.py(600):                     setappend((RANGE, (lo, hi)))
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(571):                     that = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(572):                     if that is None:
sre_parse.py(575):                     if that == "]":
sre_parse.py(581):                     if that[0] == "\\":
sre_parse.py(584):                         if that == '-':
sre_parse.py(591):                         code2 = LITERAL, _ord(that)
sre_parse.py(592):                     if code1[0] != LITERAL or code2[0] != LITERAL:
sre_parse.py(595):                     lo = code1[1]
sre_parse.py(596):                     hi = code2[1]
sre_parse.py(597):                     if hi < lo:
sre_parse.py(600):                     setappend((RANGE, (lo, hi)))
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(571):                     that = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(572):                     if that is None:
sre_parse.py(575):                     if that == "]":
sre_parse.py(576):                         if code1[0] is IN:
sre_parse.py(578):                         setappend(code1)
sre_parse.py(579):                         setappend((LITERAL, _ord("-")))
sre_parse.py(580):                         break
sre_parse.py(606):             set = _uniq(set)
 --- modulename: sre_parse, funcname: _uniq
sre_parse.py(434):     return list(dict.fromkeys(items))
sre_parse.py(608):             if _len(set) == 1 and set[0][0] is LITERAL:
sre_parse.py(615):                 if negate:
sre_parse.py(616):                     set.insert(0, (NEGATE, None))
sre_parse.py(619):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(238):         except IndexError:
sre_parse.py(239):             self.next = None
sre_parse.py(240):             return
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(629):             elif this == "+":
sre_parse.py(630):                 min, max = 1, MAXREPEAT
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(509):             break # end of pattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(447):             break
sre_parse.py(449):     if len(items) == 1:
sre_parse.py(450):         return items[0]
sre_parse.py(965):     p.state.flags = fix_flags(str, p.state.flags)
 --- modulename: sre_parse, funcname: fix_flags
sre_parse.py(930):     if isinstance(src, str):
sre_parse.py(931):         if flags & SRE_FLAG_LOCALE:
sre_parse.py(933):         if not flags & SRE_FLAG_ASCII:
sre_parse.py(934):             flags |= SRE_FLAG_UNICODE
sre_parse.py(942):     return flags
sre_parse.py(967):     if source.next is not None:
sre_parse.py(971):     for g in p.state.grouprefpos:
sre_parse.py(976):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(979):     return p
sre_compile.py(792):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(624):     flags = p.state.flags | flags
sre_compile.py(625):     code = []
sre_compile.py(628):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(564):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_compile.py(565):     if hi > MAXCODE:
sre_compile.py(567):     if lo == 0:
sre_compile.py(571):     prefix = []
sre_compile.py(572):     prefix_skip = 0
sre_compile.py(573):     charset = [] # not used
sre_compile.py(574):     if not (flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE):
sre_compile.py(576):         prefix, prefix_skip, got_all = _get_literal_prefix(pattern, flags)
 --- modulename: sre_compile, funcname: _get_literal_prefix
sre_compile.py(487):     prefix = []
sre_compile.py(488):     prefixappend = prefix.append
sre_compile.py(489):     prefix_skip = None
sre_compile.py(490):     iscased = _get_iscased(flags)
 --- modulename: sre_compile, funcname: _get_iscased
sre_compile.py(478):     if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(479):         return None
sre_compile.py(491):     for op, av in pattern.data:
sre_compile.py(492):         if op is LITERAL:
sre_compile.py(496):         elif op is SUBPATTERN:
sre_compile.py(511):             break
sre_compile.py(514):     return prefix, prefix_skip, False
sre_compile.py(578):         if not prefix:
sre_compile.py(579):             charset = _get_charset_prefix(pattern, flags)
 --- modulename: sre_compile, funcname: _get_charset_prefix
sre_compile.py(517):     while True:
sre_compile.py(518):         if not pattern.data:
sre_compile.py(520):         op, av = pattern.data[0]
sre_compile.py(521):         if op is not SUBPATTERN:
sre_compile.py(522):             break
sre_compile.py(528):     iscased = _get_iscased(flags)
 --- modulename: sre_compile, funcname: _get_iscased
sre_compile.py(478):     if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(479):         return None
sre_compile.py(529):     if op is LITERAL:
sre_compile.py(533):     elif op is BRANCH:
sre_compile.py(545):     elif op is IN:
sre_compile.py(558):     return None
sre_compile.py(585):     emit = code.append
sre_compile.py(586):     emit(INFO)
sre_compile.py(587):     skip = len(code); emit(0)
sre_compile.py(589):     mask = 0
sre_compile.py(590):     if prefix:
sre_compile.py(594):     elif charset:
sre_compile.py(596):     emit(mask)
sre_compile.py(598):     if lo < MAXCODE:
sre_compile.py(599):         emit(lo)
sre_compile.py(603):     emit(min(hi, MAXCODE))
sre_compile.py(605):     if prefix:
sre_compile.py(613):     elif charset:
sre_compile.py(617):     code[skip] = len(code) - skip
sre_compile.py(631):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(136):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(294):     out = []
sre_compile.py(295):     tail = []
sre_compile.py(296):     charmap = bytearray(256)
sre_compile.py(297):     hascased = False
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(312):                 elif op is RANGE:
sre_compile.py(329):                 elif op is NEGATE:
sre_compile.py(330):                     out.append((op, av))
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(312):                 elif op is RANGE:
sre_compile.py(313):                     r = range(av[0], av[1]+1)
sre_compile.py(314):                     if fixup:
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(312):                 elif op is RANGE:
sre_compile.py(313):                     r = range(av[0], av[1]+1)
sre_compile.py(314):                     if fixup:
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(312):                 elif op is RANGE:
sre_compile.py(313):                     r = range(av[0], av[1]+1)
sre_compile.py(314):                     if fixup:
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(302):                     if fixup:
sre_compile.py(311):                         charmap[av] = 1
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(358):     runs = []
sre_compile.py(359):     q = 0
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(364):         if len(runs) >= 2:
sre_compile.py(367):         q = charmap.find(0, p)
sre_compile.py(368):         if q < 0:
sre_compile.py(371):         runs.append((p, q))
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(364):         if len(runs) >= 2:
sre_compile.py(367):         q = charmap.find(0, p)
sre_compile.py(368):         if q < 0:
sre_compile.py(371):         runs.append((p, q))
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(364):         if len(runs) >= 2:
sre_compile.py(365):             runs = None
sre_compile.py(366):             break
sre_compile.py(372):     if runs is not None:
sre_compile.py(387):     if len(charmap) == 256:
sre_compile.py(388):         data = _mk_bitmap(charmap)
 --- modulename: sre_compile, funcname: _mk_bitmap
sre_compile.py(436):     s = bits.translate(_BITS_TRANS)[::-1]
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(438):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
 --- modulename: sre_compile, funcname: <listcomp>
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(438):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(438):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(438):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(438):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(438):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(438):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(438):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(438):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(437):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(389):         out.append((CHARSET, data))
sre_compile.py(390):         out += tail
sre_compile.py(391):         return out, hascased
sre_compile.py(137):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:
sre_compile.py(139):             elif not hascased:
sre_compile.py(140):                 emit(IN)
sre_compile.py(145):             skip = _len(code); emit(0)
sre_compile.py(146):             _compile_charset(charset, flags, code)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(267):     emit = code.append
sre_compile.py(268):     for op, av in charset:
sre_compile.py(269):         emit(op)
sre_compile.py(270):         if op is NEGATE:
sre_compile.py(271):             pass
sre_compile.py(268):     for op, av in charset:
sre_compile.py(269):         emit(op)
sre_compile.py(270):         if op is NEGATE:
sre_compile.py(272):         elif op is LITERAL:
sre_compile.py(274):         elif op is RANGE or op is RANGE_UNI_IGNORE:
sre_compile.py(277):         elif op is CHARSET:
sre_compile.py(278):             code.extend(av)
sre_compile.py(268):     for op, av in charset:
sre_compile.py(290):     emit(FAILURE)
sre_compile.py(147):             code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(633):     code.append(SUCCESS)
sre_compile.py(635):     return code
sre_compile.py(794):     if flags & SRE_FLAG_DEBUG:
sre_compile.py(799):     groupindex = p.state.groupdict
sre_compile.py(800):     indexgroup = [None] * p.state.groups
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_compile.py(801):     for k, i in groupindex.items():
sre_compile.py(804):     return _sre.compile(
sre_compile.py(805):         pattern, flags | p.state.flags, code,
sre_compile.py(806):         p.state.groups-1,
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_compile.py(807):         groupindex, tuple(indexgroup)
sre_compile.py(804):     return _sre.compile(
re.py(304):     if not (flags & DEBUG):
 --- modulename: enum, funcname: __and__
enum.py(987):         if not isinstance(other, (self.__class__, int)):
enum.py(989):         return self.__class__(self._value_ & self.__class__(other)._value_)
 --- modulename: enum, funcname: __call__
enum.py(384):         if names is None:  # simple value lookup
enum.py(385):             return cls.__new__(cls, value)
 --- modulename: enum, funcname: __new__
enum.py(682):         if type(value) is cls:
enum.py(687):         try:
enum.py(688):             return cls._value2member_map_[value]
 --- modulename: enum, funcname: __call__
enum.py(384):         if names is None:  # simple value lookup
enum.py(385):             return cls.__new__(cls, value)
 --- modulename: enum, funcname: __new__
enum.py(682):         if type(value) is cls:
enum.py(687):         try:
enum.py(688):             return cls._value2member_map_[value]
re.py(305):         if len(_cache) >= _MAXCACHE:
re.py(311):         _cache[type(pattern), pattern, flags] = p
re.py(312):     return p
 --- modulename: re, funcname: compile
re.py(251):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(290):     if isinstance(flags, RegexFlag):
re.py(291):         flags = flags.value
 --- modulename: types, funcname: __get__
types.py(177):         if instance is None:
types.py(181):         elif self.fget is None:
types.py(183):         return self.fget(instance)
 --- modulename: enum, funcname: value
enum.py(804):         return self._value_
re.py(292):     try:
re.py(293):         return _cache[type(pattern), pattern, flags]
re.py(294):     except KeyError:
re.py(295):         pass
re.py(296):     if isinstance(pattern, Pattern):
re.py(301):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(620):     return isinstance(obj, (str, bytes))
re.py(303):     p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(786):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(620):     return isinstance(obj, (str, bytes))
sre_compile.py(787):         pattern = p
sre_compile.py(788):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(947):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(226):         self.istext = isinstance(string, str)
sre_parse.py(227):         self.string = string
sre_parse.py(228):         if not self.istext:
sre_parse.py(230):         self.decoded_string = string
sre_parse.py(231):         self.index = 0
sre_parse.py(232):         self.next = None
sre_parse.py(233):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(949):     if state is None:
sre_parse.py(950):         state = State()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(77):         self.flags = 0
sre_parse.py(78):         self.groupdict = {}
sre_parse.py(79):         self.groupwidths = [None]  # group 0
sre_parse.py(80):         self.lookbehindgroups = None
sre_parse.py(81):         self.grouprefpos = {}
sre_parse.py(951):     state.flags = flags
sre_parse.py(952):     state.str = str
sre_parse.py(954):     try:
sre_parse.py(955):         p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(439):     items = []
sre_parse.py(440):     itemsappend = items.append
sre_parse.py(441):     sourcematch = source.match
sre_parse.py(442):     start = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(526):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(358):     code = CATEGORIES.get(escape)
sre_parse.py(359):     if code:
sre_parse.py(360):         return code
sre_parse.py(527):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(629):             elif this == "+":
sre_parse.py(630):                 min, max = 1, MAXREPEAT
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(683):         elif this == ".":
sre_parse.py(686):         elif this == "(":
sre_parse.py(687):             start = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(688):             group = True
sre_parse.py(689):             name = None
sre_parse.py(690):             add_flags = 0
sre_parse.py(691):             del_flags = 0
sre_parse.py(692):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(834):             if group is not None:
sre_parse.py(835):                 try:
sre_parse.py(836):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(86):         gid = self.groups
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_parse.py(87):         self.groupwidths.append(None)
sre_parse.py(88):         if self.groups > MAXGROUPS:
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_parse.py(90):         if name is not None:
sre_parse.py(96):         return gid
sre_parse.py(839):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and
sre_parse.py(841):             p = _parse_sub(source, state, sub_verbose, nested + 1)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(439):     items = []
sre_parse.py(440):     itemsappend = items.append
sre_parse.py(441):     sourcematch = source.match
sre_parse.py(442):     start = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(526):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(358):     code = CATEGORIES.get(escape)
sre_parse.py(359):     if code:
sre_parse.py(360):         return code
sre_parse.py(527):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(629):             elif this == "+":
sre_parse.py(630):                 min, max = 1, MAXREPEAT
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(511):             break # end of subpattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(447):             break
sre_parse.py(449):     if len(items) == 1:
sre_parse.py(450):         return items[0]
sre_parse.py(842):             if not source.match(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(845):             if group is not None:
sre_parse.py(846):                 state.closegroup(group, p)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(98):         self.groupwidths[gid] = p.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(847):             subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(526):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(358):     code = CATEGORIES.get(escape)
sre_parse.py(359):     if code:
sre_parse.py(360):         return code
sre_parse.py(527):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(627):                 min, max = 0, MAXREPEAT
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(526):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(358):     code = CATEGORIES.get(escape)
sre_parse.py(359):     if code:
sre_parse.py(360):         return code
sre_parse.py(527):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(627):                 min, max = 0, MAXREPEAT
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(683):         elif this == ".":
sre_parse.py(686):         elif this == "(":
sre_parse.py(687):             start = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(688):             group = True
sre_parse.py(689):             name = None
sre_parse.py(690):             add_flags = 0
sre_parse.py(691):             del_flags = 0
sre_parse.py(692):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(694):                 char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(695):                 if char is None:
sre_parse.py(697):                 if char == "P":
sre_parse.py(728):                 elif char == ":":
sre_parse.py(730):                     group = None
sre_parse.py(834):             if group is not None:
sre_parse.py(839):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and
sre_parse.py(841):             p = _parse_sub(source, state, sub_verbose, nested + 1)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(439):     items = []
sre_parse.py(440):     itemsappend = items.append
sre_parse.py(441):     sourcematch = source.match
sre_parse.py(442):     start = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(526):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(358):     code = CATEGORIES.get(escape)
sre_parse.py(359):     if code:
sre_parse.py(361):     code = ESCAPES.get(escape)
sre_parse.py(362):     if code:
sre_parse.py(364):     try:
sre_parse.py(365):         c = escape[1:2]
sre_parse.py(366):         if c == "x":
sre_parse.py(372):         elif c == "u" and source.istext:
sre_parse.py(378):         elif c == "U" and source.istext:
sre_parse.py(386):         elif c == "N" and source.istext:
sre_parse.py(398):         elif c == "0":
sre_parse.py(402):         elif c in DIGITS:
sre_parse.py(425):         if len(escape) == 2:
sre_parse.py(426):             if c in ASCIILETTERS:
sre_parse.py(428):             return LITERAL, ord(escape[1])
sre_parse.py(527):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(683):         elif this == ".":
sre_parse.py(686):         elif this == "(":
sre_parse.py(687):             start = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(688):             group = True
sre_parse.py(689):             name = None
sre_parse.py(690):             add_flags = 0
sre_parse.py(691):             del_flags = 0
sre_parse.py(692):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(834):             if group is not None:
sre_parse.py(835):                 try:
sre_parse.py(836):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(86):         gid = self.groups
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_parse.py(87):         self.groupwidths.append(None)
sre_parse.py(88):         if self.groups > MAXGROUPS:
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_parse.py(90):         if name is not None:
sre_parse.py(96):         return gid
sre_parse.py(839):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and
sre_parse.py(841):             p = _parse_sub(source, state, sub_verbose, nested + 1)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(439):     items = []
sre_parse.py(440):     itemsappend = items.append
sre_parse.py(441):     sourcematch = source.match
sre_parse.py(442):     start = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(533):             here = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(535):             set = []
sre_parse.py(536):             setappend = set.append
sre_parse.py(539):             if source.next == '[':
sre_parse.py(545):             negate = sourcematch("^")
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(555):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(298):     code = ESCAPES.get(escape)
sre_parse.py(299):     if code:
sre_parse.py(301):     code = CATEGORIES.get(escape)
sre_parse.py(302):     if code and code[0] is IN:
sre_parse.py(304):     try:
sre_parse.py(305):         c = escape[1:2]
sre_parse.py(306):         if c == "x":
sre_parse.py(312):         elif c == "u" and source.istext:
sre_parse.py(318):         elif c == "U" and source.istext:
sre_parse.py(326):         elif c == "N" and source.istext:
sre_parse.py(338):         elif c in OCTDIGITS:
sre_parse.py(346):         elif c in DIGITS:
sre_parse.py(348):         if len(escape) == 2:
sre_parse.py(349):             if c in ASCIILETTERS:
sre_parse.py(351):             return LITERAL, ord(escape[1])
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(553):                     break
sre_parse.py(606):             set = _uniq(set)
 --- modulename: sre_parse, funcname: _uniq
sre_parse.py(434):     return list(dict.fromkeys(items))
sre_parse.py(608):             if _len(set) == 1 and set[0][0] is LITERAL:
sre_parse.py(610):                 if negate:
sre_parse.py(611):                     subpatternappend((NOT_LITERAL, set[0][1]))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(627):                 min, max = 0, MAXREPEAT
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(511):             break # end of subpattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(447):             break
sre_parse.py(449):     if len(items) == 1:
sre_parse.py(450):         return items[0]
sre_parse.py(842):             if not source.match(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(845):             if group is not None:
sre_parse.py(846):                 state.closegroup(group, p)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(98):         self.groupwidths[gid] = p.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(847):             subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(526):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(358):     code = CATEGORIES.get(escape)
sre_parse.py(359):     if code:
sre_parse.py(361):     code = ESCAPES.get(escape)
sre_parse.py(362):     if code:
sre_parse.py(364):     try:
sre_parse.py(365):         c = escape[1:2]
sre_parse.py(366):         if c == "x":
sre_parse.py(372):         elif c == "u" and source.istext:
sre_parse.py(378):         elif c == "U" and source.istext:
sre_parse.py(386):         elif c == "N" and source.istext:
sre_parse.py(398):         elif c == "0":
sre_parse.py(402):         elif c in DIGITS:
sre_parse.py(425):         if len(escape) == 2:
sre_parse.py(426):             if c in ASCIILETTERS:
sre_parse.py(428):             return LITERAL, ord(escape[1])
sre_parse.py(527):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(511):             break # end of subpattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(862):             group, add_flags, del_flags, p = av
sre_parse.py(863):             if group is None and not add_flags and not del_flags:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(683):         elif this == ".":
sre_parse.py(686):         elif this == "(":
sre_parse.py(687):             start = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(688):             group = True
sre_parse.py(689):             name = None
sre_parse.py(690):             add_flags = 0
sre_parse.py(691):             del_flags = 0
sre_parse.py(692):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(834):             if group is not None:
sre_parse.py(835):                 try:
sre_parse.py(836):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(86):         gid = self.groups
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_parse.py(87):         self.groupwidths.append(None)
sre_parse.py(88):         if self.groups > MAXGROUPS:
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_parse.py(90):         if name is not None:
sre_parse.py(96):         return gid
sre_parse.py(839):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and
sre_parse.py(841):             p = _parse_sub(source, state, sub_verbose, nested + 1)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(439):     items = []
sre_parse.py(440):     itemsappend = items.append
sre_parse.py(441):     sourcematch = source.match
sre_parse.py(442):     start = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(533):             here = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(535):             set = []
sre_parse.py(536):             setappend = set.append
sre_parse.py(539):             if source.next == '[':
sre_parse.py(545):             negate = sourcematch("^")
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(553):                     break
sre_parse.py(606):             set = _uniq(set)
 --- modulename: sre_parse, funcname: _uniq
sre_parse.py(434):     return list(dict.fromkeys(items))
sre_parse.py(608):             if _len(set) == 1 and set[0][0] is LITERAL:
sre_parse.py(610):                 if negate:
sre_parse.py(611):                     subpatternappend((NOT_LITERAL, set[0][1]))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(627):                 min, max = 0, MAXREPEAT
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(511):             break # end of subpattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(447):             break
sre_parse.py(449):     if len(items) == 1:
sre_parse.py(450):         return items[0]
sre_parse.py(842):             if not source.match(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(845):             if group is not None:
sre_parse.py(846):                 state.closegroup(group, p)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(98):         self.groupwidths[gid] = p.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(847):             subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(511):             break # end of subpattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(862):             group, add_flags, del_flags, p = av
sre_parse.py(863):             if group is None and not add_flags and not del_flags:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(447):             break
sre_parse.py(449):     if len(items) == 1:
sre_parse.py(452):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(455):     while True:
sre_parse.py(456):         prefix = None
sre_parse.py(457):         for item in items:
sre_parse.py(458):             if not item:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(460):             if prefix is None:
sre_parse.py(461):                 prefix = item[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(457):         for item in items:
sre_parse.py(458):             if not item:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(460):             if prefix is None:
sre_parse.py(462):             elif item[0] != prefix:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(463):                 break
sre_parse.py(471):         break
sre_parse.py(474):     set = []
sre_parse.py(475):     for item in items:
sre_parse.py(476):         if len(item) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(477):             break
sre_parse.py(491):     subpattern.append((BRANCH, (None, items)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(492):     return subpattern
sre_parse.py(842):             if not source.match(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(238):         except IndexError:
sre_parse.py(239):             self.next = None
sre_parse.py(240):             return
sre_parse.py(253):             return True
sre_parse.py(845):             if group is not None:
sre_parse.py(847):             subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(509):             break # end of pattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(862):             group, add_flags, del_flags, p = av
sre_parse.py(863):             if group is None and not add_flags and not del_flags:
sre_parse.py(864):                 subpattern[i: i+1] = p
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(862):             group, add_flags, del_flags, p = av
sre_parse.py(863):             if group is None and not add_flags and not del_flags:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(447):             break
sre_parse.py(449):     if len(items) == 1:
sre_parse.py(450):         return items[0]
sre_parse.py(965):     p.state.flags = fix_flags(str, p.state.flags)
 --- modulename: sre_parse, funcname: fix_flags
sre_parse.py(930):     if isinstance(src, str):
sre_parse.py(931):         if flags & SRE_FLAG_LOCALE:
sre_parse.py(933):         if not flags & SRE_FLAG_ASCII:
sre_parse.py(934):             flags |= SRE_FLAG_UNICODE
sre_parse.py(942):     return flags
sre_parse.py(967):     if source.next is not None:
sre_parse.py(971):     for g in p.state.grouprefpos:
sre_parse.py(976):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(979):     return p
sre_compile.py(792):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(624):     flags = p.state.flags | flags
sre_compile.py(625):     code = []
sre_compile.py(628):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(564):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(195):                 i, j = av[-1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(178):             return self.width
sre_parse.py(196):                 lo = lo + i
sre_parse.py(197):                 hi = hi + j
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(182):                 i = MAXREPEAT - 1
sre_parse.py(183):                 j = 0
sre_parse.py(184):                 for av in av[1]:
sre_parse.py(185):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(195):                 i, j = av[-1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(178):             return self.width
sre_parse.py(196):                 lo = lo + i
sre_parse.py(197):                 hi = hi + j
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(186):                     i = min(i, l)
sre_parse.py(187):                     j = max(j, h)
sre_parse.py(184):                 for av in av[1]:
sre_parse.py(185):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(195):                 i, j = av[-1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(178):             return self.width
sre_parse.py(196):                 lo = lo + i
sre_parse.py(197):                 hi = hi + j
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(186):                     i = min(i, l)
sre_parse.py(187):                     j = max(j, h)
sre_parse.py(184):                 for av in av[1]:
sre_parse.py(188):                 lo = lo + i
sre_parse.py(189):                 hi = hi + j
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_compile.py(565):     if hi > MAXCODE:
sre_compile.py(567):     if lo == 0:
sre_compile.py(571):     prefix = []
sre_compile.py(572):     prefix_skip = 0
sre_compile.py(573):     charset = [] # not used
sre_compile.py(574):     if not (flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE):
sre_compile.py(576):         prefix, prefix_skip, got_all = _get_literal_prefix(pattern, flags)
 --- modulename: sre_compile, funcname: _get_literal_prefix
sre_compile.py(487):     prefix = []
sre_compile.py(488):     prefixappend = prefix.append
sre_compile.py(489):     prefix_skip = None
sre_compile.py(490):     iscased = _get_iscased(flags)
 --- modulename: sre_compile, funcname: _get_iscased
sre_compile.py(478):     if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(479):         return None
sre_compile.py(491):     for op, av in pattern.data:
sre_compile.py(492):         if op is LITERAL:
sre_compile.py(496):         elif op is SUBPATTERN:
sre_compile.py(511):             break
sre_compile.py(514):     return prefix, prefix_skip, False
sre_compile.py(578):         if not prefix:
sre_compile.py(579):             charset = _get_charset_prefix(pattern, flags)
 --- modulename: sre_compile, funcname: _get_charset_prefix
sre_compile.py(517):     while True:
sre_compile.py(518):         if not pattern.data:
sre_compile.py(520):         op, av = pattern.data[0]
sre_compile.py(521):         if op is not SUBPATTERN:
sre_compile.py(522):             break
sre_compile.py(528):     iscased = _get_iscased(flags)
 --- modulename: sre_compile, funcname: _get_iscased
sre_compile.py(478):     if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(479):         return None
sre_compile.py(529):     if op is LITERAL:
sre_compile.py(533):     elif op is BRANCH:
sre_compile.py(545):     elif op is IN:
sre_compile.py(558):     return None
sre_compile.py(585):     emit = code.append
sre_compile.py(586):     emit(INFO)
sre_compile.py(587):     skip = len(code); emit(0)
sre_compile.py(589):     mask = 0
sre_compile.py(590):     if prefix:
sre_compile.py(594):     elif charset:
sre_compile.py(596):     emit(mask)
sre_compile.py(598):     if lo < MAXCODE:
sre_compile.py(599):         emit(lo)
sre_compile.py(603):     emit(min(hi, MAXCODE))
sre_compile.py(605):     if prefix:
sre_compile.py(613):     elif charset:
sre_compile.py(617):     code[skip] = len(code) - skip
sre_compile.py(631):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(136):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(294):     out = []
sre_compile.py(295):     tail = []
sre_compile.py(296):     charmap = bytearray(256)
sre_compile.py(297):     hascased = False
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(312):                 elif op is RANGE:
sre_compile.py(329):                 elif op is NEGATE:
sre_compile.py(332):                     tail.append((op, av))
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(358):     runs = []
sre_compile.py(359):     q = 0
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(363):             break
sre_compile.py(372):     if runs is not None:
sre_compile.py(374):         for p, q in runs:
sre_compile.py(379):         out += tail
sre_compile.py(381):         if hascased or len(out) < len(charset):
sre_compile.py(384):         return charset, hascased
sre_compile.py(137):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:
sre_compile.py(139):             elif not hascased:
sre_compile.py(140):                 emit(IN)
sre_compile.py(145):             skip = _len(code); emit(0)
sre_compile.py(146):             _compile_charset(charset, flags, code)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(267):     emit = code.append
sre_compile.py(268):     for op, av in charset:
sre_compile.py(269):         emit(op)
sre_compile.py(270):         if op is NEGATE:
sre_compile.py(272):         elif op is LITERAL:
sre_compile.py(274):         elif op is RANGE or op is RANGE_UNI_IGNORE:
sre_compile.py(277):         elif op is CHARSET:
sre_compile.py(279):         elif op is BIGCHARSET:
sre_compile.py(281):         elif op is CATEGORY:
sre_compile.py(282):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(284):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(285):                 emit(CH_UNICODE[av])
sre_compile.py(268):     for op, av in charset:
sre_compile.py(290):     emit(FAILURE)
sre_compile.py(147):             code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(178):         elif op is SUBPATTERN:
sre_compile.py(179):             group, add_flags, del_flags, p = av
sre_compile.py(180):             if group:
sre_compile.py(181):                 emit(MARK)
sre_compile.py(182):                 emit((group-1)*2)
sre_compile.py(184):             _compile(code, p, _combine_flags(flags, add_flags, del_flags))
 --- modulename: sre_compile, funcname: _combine_flags
sre_compile.py(83):     if add_flags & TYPE_FLAGS:
sre_compile.py(85):     return (flags | add_flags) & ~del_flags
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(136):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(294):     out = []
sre_compile.py(295):     tail = []
sre_compile.py(296):     charmap = bytearray(256)
sre_compile.py(297):     hascased = False
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(312):                 elif op is RANGE:
sre_compile.py(329):                 elif op is NEGATE:
sre_compile.py(332):                     tail.append((op, av))
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(358):     runs = []
sre_compile.py(359):     q = 0
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(363):             break
sre_compile.py(372):     if runs is not None:
sre_compile.py(374):         for p, q in runs:
sre_compile.py(379):         out += tail
sre_compile.py(381):         if hascased or len(out) < len(charset):
sre_compile.py(384):         return charset, hascased
sre_compile.py(137):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:
sre_compile.py(139):             elif not hascased:
sre_compile.py(140):                 emit(IN)
sre_compile.py(145):             skip = _len(code); emit(0)
sre_compile.py(146):             _compile_charset(charset, flags, code)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(267):     emit = code.append
sre_compile.py(268):     for op, av in charset:
sre_compile.py(269):         emit(op)
sre_compile.py(270):         if op is NEGATE:
sre_compile.py(272):         elif op is LITERAL:
sre_compile.py(274):         elif op is RANGE or op is RANGE_UNI_IGNORE:
sre_compile.py(277):         elif op is CHARSET:
sre_compile.py(279):         elif op is BIGCHARSET:
sre_compile.py(281):         elif op is CATEGORY:
sre_compile.py(282):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(284):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(285):                 emit(CH_UNICODE[av])
sre_compile.py(268):     for op, av in charset:
sre_compile.py(290):     emit(FAILURE)
sre_compile.py(147):             code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(185):             if group:
sre_compile.py(186):                 emit(MARK)
sre_compile.py(187):                 emit((group-1)*2+1)
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(136):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(294):     out = []
sre_compile.py(295):     tail = []
sre_compile.py(296):     charmap = bytearray(256)
sre_compile.py(297):     hascased = False
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(312):                 elif op is RANGE:
sre_compile.py(329):                 elif op is NEGATE:
sre_compile.py(332):                     tail.append((op, av))
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(358):     runs = []
sre_compile.py(359):     q = 0
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(363):             break
sre_compile.py(372):     if runs is not None:
sre_compile.py(374):         for p, q in runs:
sre_compile.py(379):         out += tail
sre_compile.py(381):         if hascased or len(out) < len(charset):
sre_compile.py(384):         return charset, hascased
sre_compile.py(137):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:
sre_compile.py(139):             elif not hascased:
sre_compile.py(140):                 emit(IN)
sre_compile.py(145):             skip = _len(code); emit(0)
sre_compile.py(146):             _compile_charset(charset, flags, code)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(267):     emit = code.append
sre_compile.py(268):     for op, av in charset:
sre_compile.py(269):         emit(op)
sre_compile.py(270):         if op is NEGATE:
sre_compile.py(272):         elif op is LITERAL:
sre_compile.py(274):         elif op is RANGE or op is RANGE_UNI_IGNORE:
sre_compile.py(277):         elif op is CHARSET:
sre_compile.py(279):         elif op is BIGCHARSET:
sre_compile.py(281):         elif op is CATEGORY:
sre_compile.py(282):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(284):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(285):                 emit(CH_UNICODE[av])
sre_compile.py(268):     for op, av in charset:
sre_compile.py(290):     emit(FAILURE)
sre_compile.py(147):             code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(136):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(294):     out = []
sre_compile.py(295):     tail = []
sre_compile.py(296):     charmap = bytearray(256)
sre_compile.py(297):     hascased = False
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(312):                 elif op is RANGE:
sre_compile.py(329):                 elif op is NEGATE:
sre_compile.py(332):                     tail.append((op, av))
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(358):     runs = []
sre_compile.py(359):     q = 0
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(363):             break
sre_compile.py(372):     if runs is not None:
sre_compile.py(374):         for p, q in runs:
sre_compile.py(379):         out += tail
sre_compile.py(381):         if hascased or len(out) < len(charset):
sre_compile.py(384):         return charset, hascased
sre_compile.py(137):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:
sre_compile.py(139):             elif not hascased:
sre_compile.py(140):                 emit(IN)
sre_compile.py(145):             skip = _len(code); emit(0)
sre_compile.py(146):             _compile_charset(charset, flags, code)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(267):     emit = code.append
sre_compile.py(268):     for op, av in charset:
sre_compile.py(269):         emit(op)
sre_compile.py(270):         if op is NEGATE:
sre_compile.py(272):         elif op is LITERAL:
sre_compile.py(274):         elif op is RANGE or op is RANGE_UNI_IGNORE:
sre_compile.py(277):         elif op is CHARSET:
sre_compile.py(279):         elif op is BIGCHARSET:
sre_compile.py(281):         elif op is CATEGORY:
sre_compile.py(282):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(284):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(285):                 emit(CH_UNICODE[av])
sre_compile.py(268):     for op, av in charset:
sre_compile.py(290):     emit(FAILURE)
sre_compile.py(147):             code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(178):         elif op is SUBPATTERN:
sre_compile.py(188):         elif op in SUCCESS_CODES:
sre_compile.py(190):         elif op in ASSERT_CODES:
sre_compile.py(203):         elif op is CALL:
sre_compile.py(209):         elif op is AT:
sre_compile.py(218):         elif op is BRANCH:
sre_compile.py(219):             emit(op)
sre_compile.py(220):             tail = []
sre_compile.py(221):             tailappend = tail.append
sre_compile.py(222):             for av in av[1]:
sre_compile.py(223):                 skip = _len(code); emit(0)
sre_compile.py(225):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(178):         elif op is SUBPATTERN:
sre_compile.py(179):             group, add_flags, del_flags, p = av
sre_compile.py(180):             if group:
sre_compile.py(181):                 emit(MARK)
sre_compile.py(182):                 emit((group-1)*2)
sre_compile.py(184):             _compile(code, p, _combine_flags(flags, add_flags, del_flags))
 --- modulename: sre_compile, funcname: _combine_flags
sre_compile.py(83):     if add_flags & TYPE_FLAGS:
sre_compile.py(85):     return (flags | add_flags) & ~del_flags
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(185):             if group:
sre_compile.py(186):                 emit(MARK)
sre_compile.py(187):                 emit((group-1)*2+1)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(226):                 emit(JUMP)
sre_compile.py(227):                 tailappend(_len(code)); emit(0)
sre_compile.py(228):                 code[skip] = _len(code) - skip
sre_compile.py(222):             for av in av[1]:
sre_compile.py(223):                 skip = _len(code); emit(0)
sre_compile.py(225):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(178):         elif op is SUBPATTERN:
sre_compile.py(179):             group, add_flags, del_flags, p = av
sre_compile.py(180):             if group:
sre_compile.py(181):                 emit(MARK)
sre_compile.py(182):                 emit((group-1)*2)
sre_compile.py(184):             _compile(code, p, _combine_flags(flags, add_flags, del_flags))
 --- modulename: sre_compile, funcname: _combine_flags
sre_compile.py(83):     if add_flags & TYPE_FLAGS:
sre_compile.py(85):     return (flags | add_flags) & ~del_flags
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(185):             if group:
sre_compile.py(186):                 emit(MARK)
sre_compile.py(187):                 emit((group-1)*2+1)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(226):                 emit(JUMP)
sre_compile.py(227):                 tailappend(_len(code)); emit(0)
sre_compile.py(228):                 code[skip] = _len(code) - skip
sre_compile.py(222):             for av in av[1]:
sre_compile.py(229):             emit(FAILURE) # end of branch
sre_compile.py(230):             for tail in tail:
sre_compile.py(231):                 code[tail] = _len(code) - tail
sre_compile.py(230):             for tail in tail:
sre_compile.py(231):                 code[tail] = _len(code) - tail
sre_compile.py(230):             for tail in tail:
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(633):     code.append(SUCCESS)
sre_compile.py(635):     return code
sre_compile.py(794):     if flags & SRE_FLAG_DEBUG:
sre_compile.py(799):     groupindex = p.state.groupdict
sre_compile.py(800):     indexgroup = [None] * p.state.groups
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_compile.py(801):     for k, i in groupindex.items():
sre_compile.py(804):     return _sre.compile(
sre_compile.py(805):         pattern, flags | p.state.flags, code,
sre_compile.py(806):         p.state.groups-1,
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_compile.py(807):         groupindex, tuple(indexgroup)
sre_compile.py(804):     return _sre.compile(
re.py(304):     if not (flags & DEBUG):
 --- modulename: enum, funcname: __and__
enum.py(987):         if not isinstance(other, (self.__class__, int)):
enum.py(989):         return self.__class__(self._value_ & self.__class__(other)._value_)
 --- modulename: enum, funcname: __call__
enum.py(384):         if names is None:  # simple value lookup
enum.py(385):             return cls.__new__(cls, value)
 --- modulename: enum, funcname: __new__
enum.py(682):         if type(value) is cls:
enum.py(687):         try:
enum.py(688):             return cls._value2member_map_[value]
 --- modulename: enum, funcname: __call__
enum.py(384):         if names is None:  # simple value lookup
enum.py(385):             return cls.__new__(cls, value)
 --- modulename: enum, funcname: __new__
enum.py(682):         if type(value) is cls:
enum.py(687):         try:
enum.py(688):             return cls._value2member_map_[value]
re.py(305):         if len(_cache) >= _MAXCACHE:
re.py(311):         _cache[type(pattern), pattern, flags] = p
re.py(312):     return p
 --- modulename: _bootstrap, funcname: _find_and_load
<frozen importlib._bootstrap>(1024):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(166): <frozen importlib._bootstrap>(167):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(170):  --- modulename: _bootstrap, funcname: _get_module_lock
<frozen importlib._bootstrap>(185): <frozen importlib._bootstrap>(186): <frozen importlib._bootstrap>(187): <frozen importlib._bootstrap>(188): <frozen importlib._bootstrap>(189): <frozen importlib._bootstrap>(190): <frozen importlib._bootstrap>(192): <frozen importlib._bootstrap>(193): <frozen importlib._bootstrap>(196):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(72): <frozen importlib._bootstrap>(73): <frozen importlib._bootstrap>(74): <frozen importlib._bootstrap>(75): <frozen importlib._bootstrap>(76): <frozen importlib._bootstrap>(77): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(209): <frozen importlib._bootstrap>(211): <frozen importlib._bootstrap>(213): <frozen importlib._bootstrap>(171):  --- modulename: _bootstrap, funcname: acquire
<frozen importlib._bootstrap>(106): <frozen importlib._bootstrap>(107): <frozen importlib._bootstrap>(108): <frozen importlib._bootstrap>(109): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(111): <frozen importlib._bootstrap>(112): <frozen importlib._bootstrap>(113): <frozen importlib._bootstrap>(114): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(123): <frozen importlib._bootstrap>(1025): <frozen importlib._bootstrap>(1026): <frozen importlib._bootstrap>(1027):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked
<frozen importlib._bootstrap>(988): <frozen importlib._bootstrap>(989): <frozen importlib._bootstrap>(990): <frozen importlib._bootstrap>(1002):  --- modulename: _bootstrap, funcname: _find_spec
<frozen importlib._bootstrap>(923): <frozen importlib._bootstrap>(924): <frozen importlib._bootstrap>(929): <frozen importlib._bootstrap>(935): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap, funcname: find_spec
<frozen importlib._bootstrap>(748): <frozen importlib._bootstrap>(750): <frozen importlib._bootstrap>(753): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap, funcname: find_spec
<frozen importlib._bootstrap>(828): <frozen importlib._bootstrap>(831): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1437): <frozen importlib._bootstrap_external>(1438): <frozen importlib._bootstrap_external>(1439):  --- modulename: _bootstrap_external, funcname: _get_spec
<frozen importlib._bootstrap_external>(1404): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1365): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1580): <frozen importlib._bootstrap_external>(1585): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1415): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1577):  --- modulename: _bootstrap_external, funcname: _path_isfile
<frozen importlib._bootstrap_external>(161):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type
<frozen importlib._bootstrap_external>(152): <frozen importlib._bootstrap_external>(153):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(156): <frozen importlib._bootstrap_external>(1578): <frozen importlib._bootstrap_external>(1579): <frozen importlib._bootstrap_external>(1578):  --- modulename: _bootstrap_external, funcname: _get_spec
<frozen importlib._bootstrap_external>(1532):  --- modulename: _bootstrap_external, funcname: __init__
<frozen importlib._bootstrap_external>(1043): <frozen importlib._bootstrap_external>(1044): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1533):  --- modulename: _bootstrap_external, funcname: spec_from_file_location
<frozen importlib._bootstrap_external>(733): <frozen importlib._bootstrap_external>(745): <frozen importlib._bootstrap_external>(746):  --- modulename: _bootstrap_external, funcname: _path_isabs
<frozen importlib._bootstrap_external>(182): <frozen importlib._bootstrap_external>(758):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(359): <frozen importlib._bootstrap>(360): <frozen importlib._bootstrap>(361): <frozen importlib._bootstrap>(362): <frozen importlib._bootstrap>(363): <frozen importlib._bootstrap>(366): <frozen importlib._bootstrap>(367): <frozen importlib._bootstrap_external>(759): <frozen importlib._bootstrap_external>(762): <frozen importlib._bootstrap_external>(772): <frozen importlib._bootstrap_external>(783): <frozen importlib._bootstrap_external>(784): <frozen importlib._bootstrap_external>(789): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1416): <frozen importlib._bootstrap_external>(1417): <frozen importlib._bootstrap_external>(1440): <frozen importlib._bootstrap_external>(1442): <frozen importlib._bootstrap_external>(1453): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(948): <frozen importlib._bootstrap>(963): <frozen importlib._bootstrap>(1003): <frozen importlib._bootstrap>(1006):  --- modulename: _bootstrap, funcname: _load_unlocked
<frozen importlib._bootstrap>(666): <frozen importlib._bootstrap>(668): <frozen importlib._bootstrap>(674):  --- modulename: _bootstrap, funcname: module_from_spec
<frozen importlib._bootstrap>(567): <frozen importlib._bootstrap>(568): <frozen importlib._bootstrap>(571):  --- modulename: _bootstrap_external, funcname: create_module
<frozen importlib._bootstrap_external>(874): <frozen importlib._bootstrap>(575): <frozen importlib._bootstrap>(576):  --- modulename: _bootstrap, funcname: _new_module
<frozen importlib._bootstrap>(49): <frozen importlib._bootstrap>(577):  --- modulename: _bootstrap, funcname: _init_module_attrs
<frozen importlib._bootstrap>(496): <frozen importlib._bootstrap>(502): <frozen importlib._bootstrap>(503): <frozen importlib._bootstrap>(504): <frozen importlib._bootstrap>(525): <frozen importlib._bootstrap>(526): <frozen importlib._bootstrap>(530): <frozen importlib._bootstrap>(531): <frozen importlib._bootstrap>(532):  --- modulename: _bootstrap, funcname: parent
<frozen importlib._bootstrap>(407): <frozen importlib._bootstrap>(408): <frozen importlib._bootstrap>(536): <frozen importlib._bootstrap>(537): <frozen importlib._bootstrap>(541): <frozen importlib._bootstrap>(542): <frozen importlib._bootstrap>(548):  --- modulename: _bootstrap, funcname: has_location
<frozen importlib._bootstrap>(414): <frozen importlib._bootstrap>(549): <frozen importlib._bootstrap>(550): <frozen importlib._bootstrap>(551): <frozen importlib._bootstrap>(555): <frozen importlib._bootstrap>(556):  --- modulename: _bootstrap, funcname: cached
<frozen importlib._bootstrap>(393): <frozen importlib._bootstrap>(394): <frozen importlib._bootstrap>(395): <frozen importlib._bootstrap>(397):  --- modulename: _bootstrap_external, funcname: _get_cached
<frozen importlib._bootstrap_external>(511): <frozen importlib._bootstrap_external>(512): <frozen importlib._bootstrap_external>(513):  --- modulename: _bootstrap_external, funcname: cache_from_source
<frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(405): <frozen importlib._bootstrap_external>(406):  --- modulename: _bootstrap_external, funcname: _path_split
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134): <frozen importlib._bootstrap_external>(135): <frozen importlib._bootstrap_external>(137): <frozen importlib._bootstrap_external>(407): <frozen importlib._bootstrap_external>(408): <frozen importlib._bootstrap_external>(409): <frozen importlib._bootstrap_external>(411): <frozen importlib._bootstrap_external>(412): <frozen importlib._bootstrap_external>(413): <frozen importlib._bootstrap_external>(414): <frozen importlib._bootstrap_external>(417): <frozen importlib._bootstrap_external>(418): <frozen importlib._bootstrap_external>(422): <frozen importlib._bootstrap_external>(423): <frozen importlib._bootstrap_external>(448):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap>(398): <frozen importlib._bootstrap>(557): <frozen importlib._bootstrap>(558):  --- modulename: _bootstrap, funcname: cached
<frozen importlib._bootstrap>(393): <frozen importlib._bootstrap>(398): <frozen importlib._bootstrap>(561): <frozen importlib._bootstrap>(578): <frozen importlib._bootstrap>(679): <frozen importlib._bootstrap>(680): <frozen importlib._bootstrap>(681): <frozen importlib._bootstrap>(682): <frozen importlib._bootstrap>(683): <frozen importlib._bootstrap>(688):  --- modulename: _bootstrap_external, funcname: exec_module
<frozen importlib._bootstrap_external>(879):  --- modulename: _bootstrap_external, funcname: get_code
<frozen importlib._bootstrap_external>(957):  --- modulename: _bootstrap_external, funcname: _check_name_wrapper
<frozen importlib._bootstrap_external>(543): <frozen importlib._bootstrap_external>(545): <frozen importlib._bootstrap_external>(548):  --- modulename: _bootstrap_external, funcname: get_filename
<frozen importlib._bootstrap_external>(1068): <frozen importlib._bootstrap_external>(958): <frozen importlib._bootstrap_external>(959): <frozen importlib._bootstrap_external>(960): <frozen importlib._bootstrap_external>(961): <frozen importlib._bootstrap_external>(962): <frozen importlib._bootstrap_external>(963): <frozen importlib._bootstrap_external>(964):  --- modulename: _bootstrap_external, funcname: cache_from_source
<frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(405): <frozen importlib._bootstrap_external>(406):  --- modulename: _bootstrap_external, funcname: _path_split
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134): <frozen importlib._bootstrap_external>(135): <frozen importlib._bootstrap_external>(137): <frozen importlib._bootstrap_external>(407): <frozen importlib._bootstrap_external>(408): <frozen importlib._bootstrap_external>(409): <frozen importlib._bootstrap_external>(411): <frozen importlib._bootstrap_external>(412): <frozen importlib._bootstrap_external>(413): <frozen importlib._bootstrap_external>(414): <frozen importlib._bootstrap_external>(417): <frozen importlib._bootstrap_external>(418): <frozen importlib._bootstrap_external>(422): <frozen importlib._bootstrap_external>(423): <frozen importlib._bootstrap_external>(448):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(968): <frozen importlib._bootstrap_external>(969):  --- modulename: _bootstrap_external, funcname: path_stats
<frozen importlib._bootstrap_external>(1091):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1092): <frozen importlib._bootstrap_external>(973): <frozen importlib._bootstrap_external>(974): <frozen importlib._bootstrap_external>(975):  --- modulename: _bootstrap_external, funcname: get_data
<frozen importlib._bootstrap_external>(1072): <frozen importlib._bootstrap_external>(1073): <frozen importlib._bootstrap_external>(1074): <frozen importlib._bootstrap_external>(1073): <frozen importlib._bootstrap_external>(980): <frozen importlib._bootstrap_external>(981): <frozen importlib._bootstrap_external>(979): <frozen importlib._bootstrap_external>(983): <frozen importlib._bootstrap_external>(984):  --- modulename: _bootstrap_external, funcname: _classify_pyc
<frozen importlib._bootstrap_external>(601): <frozen importlib._bootstrap_external>(602): <frozen importlib._bootstrap_external>(606): <frozen importlib._bootstrap_external>(610):  --- modulename: _bootstrap_external, funcname: _unpack_uint32
<frozen importlib._bootstrap_external>(86): <frozen importlib._bootstrap_external>(87): <frozen importlib._bootstrap_external>(612): <frozen importlib._bootstrap_external>(615): <frozen importlib._bootstrap_external>(985): <frozen importlib._bootstrap_external>(986): <frozen importlib._bootstrap_external>(987): <frozen importlib._bootstrap_external>(1000): <frozen importlib._bootstrap_external>(1001): <frozen importlib._bootstrap_external>(1002): <frozen importlib._bootstrap_external>(1003): <frozen importlib._bootstrap_external>(1004): <frozen importlib._bootstrap_external>(1005): <frozen importlib._bootstrap_external>(1000):  --- modulename: _bootstrap_external, funcname: _validate_timestamp_pyc
<frozen importlib._bootstrap_external>(637):  --- modulename: _bootstrap_external, funcname: _unpack_uint32
<frozen importlib._bootstrap_external>(86): <frozen importlib._bootstrap_external>(87): <frozen importlib._bootstrap_external>(641): <frozen importlib._bootstrap_external>(642):  --- modulename: _bootstrap_external, funcname: _unpack_uint32
<frozen importlib._bootstrap_external>(86): <frozen importlib._bootstrap_external>(87): <frozen importlib._bootstrap_external>(1010): <frozen importlib._bootstrap_external>(1011): <frozen importlib._bootstrap_external>(1010):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1012): <frozen importlib._bootstrap_external>(1013): <frozen importlib._bootstrap_external>(1014): <frozen importlib._bootstrap_external>(1012):  --- modulename: _bootstrap_external, funcname: _compile_bytecode
<frozen importlib._bootstrap_external>(672): <frozen importlib._bootstrap_external>(673): <frozen importlib._bootstrap_external>(674):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(675): <frozen importlib._bootstrap_external>(676): <frozen importlib._bootstrap_external>(677): <frozen importlib._bootstrap_external>(880): <frozen importlib._bootstrap_external>(883):  --- modulename: _bootstrap, funcname: _call_with_frames_removed
<frozen importlib._bootstrap>(241):  --- modulename: gzip, funcname: <module>
gzip.py(1): """Functions that read and write gzipped files.
gzip.py(8): import struct, sys, time, os
gzip.py(9): import zlib
gzip.py(10): import builtins
gzip.py(11): import io
gzip.py(12): import _compression
gzip.py(14): __all__ = ["BadGzipFile", "GzipFile", "open", "compress", "decompress"]
gzip.py(16): FTEXT, FHCRC, FEXTRA, FNAME, FCOMMENT = 1, 2, 4, 8, 16
gzip.py(18): READ, WRITE = 1, 2
gzip.py(20): _COMPRESS_LEVEL_FAST = 1
gzip.py(21): _COMPRESS_LEVEL_TRADEOFF = 6
gzip.py(22): _COMPRESS_LEVEL_BEST = 9
gzip.py(25): def open(filename, mode="rb", compresslevel=_COMPRESS_LEVEL_BEST,
gzip.py(26):          encoding=None, errors=None, newline=None):
gzip.py(25): def open(filename, mode="rb", compresslevel=_COMPRESS_LEVEL_BEST,
gzip.py(70): def write32u(output, value):
gzip.py(75): class _PaddedFile:
 --- modulename: gzip, funcname: _PaddedFile
gzip.py(75): class _PaddedFile:
gzip.py(76):     """Minimal read-only file object that prepends a string to the contents
gzip.py(80):     def __init__(self, f, prepend=b''):
gzip.py(86):     def read(self, size):
gzip.py(99):     def prepend(self, prepend=b''):
gzip.py(108):     def seek(self, off):
gzip.py(113):     def seekable(self):
gzip.py(117): class BadGzipFile(OSError):
 --- modulename: gzip, funcname: BadGzipFile
gzip.py(117): class BadGzipFile(OSError):
gzip.py(118):     """Exception raised in some cases for invalid gzip files."""
gzip.py(121): class GzipFile(_compression.BaseStream):
 --- modulename: gzip, funcname: GzipFile
gzip.py(121): class GzipFile(_compression.BaseStream):
gzip.py(122):     """The GzipFile class simulates most of the methods of a file object with
gzip.py(132):     myfileobj = None
gzip.py(134):     def __init__(self, filename=None, mode=None,
gzip.py(135):                  compresslevel=_COMPRESS_LEVEL_BEST, fileobj=None, mtime=None):
gzip.py(134):     def __init__(self, filename=None, mode=None,
gzip.py(215):     @property
gzip.py(216):     def filename(self):
gzip.py(223):     @property
gzip.py(224):     def mtime(self):
gzip.py(228):     def __repr__(self):
gzip.py(232):     def _init_write(self, filename):
gzip.py(240):     def _write_gzip_header(self, compresslevel):
gzip.py(272):     def write(self,data):
gzip.py(296):     def read(self, size=-1):
gzip.py(303):     def read1(self, size=-1):
gzip.py(316):     def peek(self, n):
gzip.py(323):     @property
gzip.py(324):     def closed(self):
gzip.py(327):     def close(self):
gzip.py(346):     def flush(self,zlib_mode=zlib.Z_SYNC_FLUSH):
gzip.py(353):     def fileno(self):
gzip.py(361):     def rewind(self):
gzip.py(368):     def readable(self):
gzip.py(371):     def writable(self):
gzip.py(374):     def seekable(self):
gzip.py(377):     def seek(self, offset, whence=io.SEEK_SET):
gzip.py(397):     def readline(self, size=-1):
 --- modulename: abc, funcname: __new__
abc.py(106):             cls = super().__new__(mcls, name, bases, namespace, **kwargs)
abc.py(107):             _abc_init(cls)
abc.py(108):             return cls
gzip.py(402): class _GzipReader(_compression.DecompressReader):
 --- modulename: gzip, funcname: _GzipReader
gzip.py(402): class _GzipReader(_compression.DecompressReader):
gzip.py(403):     def __init__(self, fp):
gzip.py(410):     def _init_read(self):
gzip.py(414):     def _read_exact(self, n):
gzip.py(430):     def _read_gzip_header(self):
gzip.py(463):     def read(self, size=-1):
gzip.py(514):     def _add_read_data(self, data):
gzip.py(518):     def _read_eof(self):
gzip.py(539):     def _rewind(self):
 --- modulename: abc, funcname: __new__
abc.py(106):             cls = super().__new__(mcls, name, bases, namespace, **kwargs)
abc.py(107):             _abc_init(cls)
abc.py(108):             return cls
gzip.py(543): def compress(data, compresslevel=_COMPRESS_LEVEL_BEST, *, mtime=None):
gzip.py(552): def decompress(data):
gzip.py(560): def main():
gzip.py(608): if __name__ == '__main__':
<frozen importlib._bootstrap>(699): <frozen importlib._bootstrap>(700): <frozen importlib._bootstrap>(701):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap>(703): <frozen importlib._bootstrap>(705): <frozen importlib._bootstrap>(1007): <frozen importlib._bootstrap>(1016): <frozen importlib._bootstrap>(1024):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(174):  --- modulename: _bootstrap, funcname: release
<frozen importlib._bootstrap>(126): <frozen importlib._bootstrap>(127): <frozen importlib._bootstrap>(128): <frozen importlib._bootstrap>(130): <frozen importlib._bootstrap>(131): <frozen importlib._bootstrap>(132): <frozen importlib._bootstrap>(133): <frozen importlib._bootstrap>(134): <frozen importlib._bootstrap>(127):  --- modulename: _bootstrap, funcname: cb
<frozen importlib._bootstrap>(199): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(204): <frozen importlib._bootstrap>(205): <frozen importlib._bootstrap>(207):  --- modulename: io, funcname: __getattr__
io.py(61):     if name == "OpenWrapper":
io.py(73):     raise AttributeError(name)
 --- modulename: codecs, funcname: getwriter
codecs.py(1023):     return lookup(encoding).streamwriter
 --- modulename: __init__, funcname: search_function
__init__.py(74):     entry = _cache.get(encoding, _unknown)
__init__.py(75):     if entry is not _unknown:
__init__.py(85):     norm_encoding = normalize_encoding(encoding)
 --- modulename: __init__, funcname: normalize_encoding
__init__.py(55):     if isinstance(encoding, bytes):
__init__.py(58):     chars = []
__init__.py(59):     punct = False
__init__.py(60):     for c in encoding:
__init__.py(61):         if c.isalnum() or c == '.':
__init__.py(62):             if punct and chars:
__init__.py(64):             if c.isascii():
__init__.py(65):                 chars.append(c)
__init__.py(66):             punct = False
__init__.py(60):     for c in encoding:
__init__.py(61):         if c.isalnum() or c == '.':
__init__.py(62):             if punct and chars:
__init__.py(64):             if c.isascii():
__init__.py(65):                 chars.append(c)
__init__.py(66):             punct = False
__init__.py(60):     for c in encoding:
__init__.py(61):         if c.isalnum() or c == '.':
__init__.py(62):             if punct and chars:
__init__.py(64):             if c.isascii():
__init__.py(65):                 chars.append(c)
__init__.py(66):             punct = False
__init__.py(60):     for c in encoding:
__init__.py(61):         if c.isalnum() or c == '.':
__init__.py(62):             if punct and chars:
__init__.py(64):             if c.isascii():
__init__.py(65):                 chars.append(c)
__init__.py(66):             punct = False
__init__.py(60):     for c in encoding:
__init__.py(69):     return ''.join(chars)
__init__.py(86):     aliased_encoding = _aliases.get(norm_encoding) or \
__init__.py(88):     if aliased_encoding is not None:
__init__.py(89):         modnames = [aliased_encoding,
__init__.py(90):                     norm_encoding]
__init__.py(89):         modnames = [aliased_encoding,
__init__.py(93):     for modname in modnames:
__init__.py(94):         if not modname or '.' in modname:
__init__.py(96):         try:
__init__.py(99):             mod = __import__('encodings.' + modname, fromlist=_import_tail,
__init__.py(100):                              level=0)
__init__.py(99):             mod = __import__('encodings.' + modname, fromlist=_import_tail,
__init__.py(106):             break
__init__.py(110):     try:
__init__.py(111):         getregentry = mod.getregentry
__init__.py(116):     if mod is None:
__init__.py(122):     entry = getregentry()
 --- modulename: utf_8, funcname: getregentry
utf_8.py(34):     return codecs.CodecInfo(
utf_8.py(35):         name='utf-8',
utf_8.py(36):         encode=encode,
utf_8.py(37):         decode=decode,
utf_8.py(38):         incrementalencoder=IncrementalEncoder,
utf_8.py(39):         incrementaldecoder=IncrementalDecoder,
utf_8.py(40):         streamreader=StreamReader,
utf_8.py(41):         streamwriter=StreamWriter,
utf_8.py(34):     return codecs.CodecInfo(
 --- modulename: codecs, funcname: __new__
codecs.py(97):         self = tuple.__new__(cls, (encode, decode, streamreader, streamwriter))
codecs.py(98):         self.name = name
codecs.py(99):         self.encode = encode
codecs.py(100):         self.decode = decode
codecs.py(101):         self.incrementalencoder = incrementalencoder
codecs.py(102):         self.incrementaldecoder = incrementaldecoder
codecs.py(103):         self.streamwriter = streamwriter
codecs.py(104):         self.streamreader = streamreader
codecs.py(105):         if _is_text_encoding is not None:
codecs.py(107):         return self
__init__.py(123):     if not isinstance(entry, codecs.CodecInfo):
__init__.py(139):     _cache[encoding] = entry
__init__.py(143):     try:
__init__.py(144):         codecaliases = mod.getaliases()
__init__.py(145):     except AttributeError:
__init__.py(146):         pass
__init__.py(153):     return entry
 --- modulename: contextlib, funcname: contextmanager
contextlib.py(279):     @wraps(func)
 --- modulename: functools, funcname: wraps
functools.py(76):     return partial(update_wrapper, wrapped=wrapped,
functools.py(77):                    assigned=assigned, updated=updated)
functools.py(76):     return partial(update_wrapper, wrapped=wrapped,
contextlib.py(280):     def helper(*args, **kwds):
 --- modulename: functools, funcname: update_wrapper
functools.py(50):     for attr in assigned:
functools.py(51):         try:
functools.py(52):             value = getattr(wrapped, attr)
functools.py(56):             setattr(wrapper, attr, value)
functools.py(50):     for attr in assigned:
functools.py(51):         try:
functools.py(52):             value = getattr(wrapped, attr)
functools.py(56):             setattr(wrapper, attr, value)
functools.py(50):     for attr in assigned:
functools.py(51):         try:
functools.py(52):             value = getattr(wrapped, attr)
functools.py(56):             setattr(wrapper, attr, value)
functools.py(50):     for attr in assigned:
functools.py(51):         try:
functools.py(52):             value = getattr(wrapped, attr)
functools.py(56):             setattr(wrapper, attr, value)
functools.py(50):     for attr in assigned:
functools.py(51):         try:
functools.py(52):             value = getattr(wrapped, attr)
functools.py(56):             setattr(wrapper, attr, value)
functools.py(50):     for attr in assigned:
functools.py(57):     for attr in updated:
functools.py(58):         getattr(wrapper, attr).update(getattr(wrapped, attr, {}))
functools.py(57):     for attr in updated:
functools.py(61):     wrapper.__wrapped__ = wrapped
functools.py(63):     return wrapper
contextlib.py(282):     return helper
 --- modulename: re, funcname: compile
re.py(251):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(290):     if isinstance(flags, RegexFlag):
re.py(291):         flags = flags.value
 --- modulename: types, funcname: __get__
types.py(177):         if instance is None:
types.py(181):         elif self.fget is None:
types.py(183):         return self.fget(instance)
 --- modulename: enum, funcname: value
enum.py(804):         return self._value_
re.py(292):     try:
re.py(293):         return _cache[type(pattern), pattern, flags]
re.py(294):     except KeyError:
re.py(295):         pass
re.py(296):     if isinstance(pattern, Pattern):
re.py(301):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(620):     return isinstance(obj, (str, bytes))
re.py(303):     p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(786):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(620):     return isinstance(obj, (str, bytes))
sre_compile.py(787):         pattern = p
sre_compile.py(788):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(947):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(226):         self.istext = isinstance(string, str)
sre_parse.py(227):         self.string = string
sre_parse.py(228):         if not self.istext:
sre_parse.py(230):         self.decoded_string = string
sre_parse.py(231):         self.index = 0
sre_parse.py(232):         self.next = None
sre_parse.py(233):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(949):     if state is None:
sre_parse.py(950):         state = State()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(77):         self.flags = 0
sre_parse.py(78):         self.groupdict = {}
sre_parse.py(79):         self.groupwidths = [None]  # group 0
sre_parse.py(80):         self.lookbehindgroups = None
sre_parse.py(81):         self.grouprefpos = {}
sre_parse.py(951):     state.flags = flags
sre_parse.py(952):     state.str = str
sre_parse.py(954):     try:
sre_parse.py(955):         p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(439):     items = []
sre_parse.py(440):     itemsappend = items.append
sre_parse.py(441):     sourcematch = source.match
sre_parse.py(442):     start = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(683):         elif this == ".":
sre_parse.py(686):         elif this == "(":
sre_parse.py(849):         elif this == "^":
sre_parse.py(850):             subpatternappend((AT, AT_BEGINNING))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(526):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(358):     code = CATEGORIES.get(escape)
sre_parse.py(359):     if code:
sre_parse.py(360):         return code
sre_parse.py(527):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(629):             elif this == "+":
sre_parse.py(630):                 min, max = 1, MAXREPEAT
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(526):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(358):     code = CATEGORIES.get(escape)
sre_parse.py(359):     if code:
sre_parse.py(360):         return code
sre_parse.py(527):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(629):             elif this == "+":
sre_parse.py(630):                 min, max = 1, MAXREPEAT
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(238):         except IndexError:
sre_parse.py(239):             self.next = None
sre_parse.py(240):             return
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(683):         elif this == ".":
sre_parse.py(686):         elif this == "(":
sre_parse.py(849):         elif this == "^":
sre_parse.py(852):         elif this == "$":
sre_parse.py(853):             subpatternappend((AT, AT_END))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(509):             break # end of pattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(447):             break
sre_parse.py(449):     if len(items) == 1:
sre_parse.py(450):         return items[0]
sre_parse.py(965):     p.state.flags = fix_flags(str, p.state.flags)
 --- modulename: sre_parse, funcname: fix_flags
sre_parse.py(930):     if isinstance(src, str):
sre_parse.py(931):         if flags & SRE_FLAG_LOCALE:
sre_parse.py(933):         if not flags & SRE_FLAG_ASCII:
sre_parse.py(934):             flags |= SRE_FLAG_UNICODE
sre_parse.py(942):     return flags
sre_parse.py(967):     if source.next is not None:
sre_parse.py(971):     for g in p.state.grouprefpos:
sre_parse.py(976):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(979):     return p
sre_compile.py(792):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(624):     flags = p.state.flags | flags
sre_compile.py(625):     code = []
sre_compile.py(628):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(564):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(205):             elif op is GROUPREF:
sre_parse.py(209):             elif op is GROUPREF_EXISTS:
sre_parse.py(219):             elif op is SUCCESS:
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(205):             elif op is GROUPREF:
sre_parse.py(209):             elif op is GROUPREF_EXISTS:
sre_parse.py(219):             elif op is SUCCESS:
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_compile.py(565):     if hi > MAXCODE:
sre_compile.py(567):     if lo == 0:
sre_compile.py(571):     prefix = []
sre_compile.py(572):     prefix_skip = 0
sre_compile.py(573):     charset = [] # not used
sre_compile.py(574):     if not (flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE):
sre_compile.py(576):         prefix, prefix_skip, got_all = _get_literal_prefix(pattern, flags)
 --- modulename: sre_compile, funcname: _get_literal_prefix
sre_compile.py(487):     prefix = []
sre_compile.py(488):     prefixappend = prefix.append
sre_compile.py(489):     prefix_skip = None
sre_compile.py(490):     iscased = _get_iscased(flags)
 --- modulename: sre_compile, funcname: _get_iscased
sre_compile.py(478):     if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(479):         return None
sre_compile.py(491):     for op, av in pattern.data:
sre_compile.py(492):         if op is LITERAL:
sre_compile.py(496):         elif op is SUBPATTERN:
sre_compile.py(511):             break
sre_compile.py(514):     return prefix, prefix_skip, False
sre_compile.py(578):         if not prefix:
sre_compile.py(579):             charset = _get_charset_prefix(pattern, flags)
 --- modulename: sre_compile, funcname: _get_charset_prefix
sre_compile.py(517):     while True:
sre_compile.py(518):         if not pattern.data:
sre_compile.py(520):         op, av = pattern.data[0]
sre_compile.py(521):         if op is not SUBPATTERN:
sre_compile.py(522):             break
sre_compile.py(528):     iscased = _get_iscased(flags)
 --- modulename: sre_compile, funcname: _get_iscased
sre_compile.py(478):     if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(479):         return None
sre_compile.py(529):     if op is LITERAL:
sre_compile.py(533):     elif op is BRANCH:
sre_compile.py(545):     elif op is IN:
sre_compile.py(558):     return None
sre_compile.py(585):     emit = code.append
sre_compile.py(586):     emit(INFO)
sre_compile.py(587):     skip = len(code); emit(0)
sre_compile.py(589):     mask = 0
sre_compile.py(590):     if prefix:
sre_compile.py(594):     elif charset:
sre_compile.py(596):     emit(mask)
sre_compile.py(598):     if lo < MAXCODE:
sre_compile.py(599):         emit(lo)
sre_compile.py(603):     emit(min(hi, MAXCODE))
sre_compile.py(605):     if prefix:
sre_compile.py(613):     elif charset:
sre_compile.py(617):     code[skip] = len(code) - skip
sre_compile.py(631):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(178):         elif op is SUBPATTERN:
sre_compile.py(188):         elif op in SUCCESS_CODES:
sre_compile.py(190):         elif op in ASSERT_CODES:
sre_compile.py(203):         elif op is CALL:
sre_compile.py(209):         elif op is AT:
sre_compile.py(210):             emit(op)
sre_compile.py(211):             if flags & SRE_FLAG_MULTILINE:
sre_compile.py(213):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(215):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(216):                 av = AT_UNICODE.get(av, av)
sre_compile.py(217):             emit(av)
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(136):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(294):     out = []
sre_compile.py(295):     tail = []
sre_compile.py(296):     charmap = bytearray(256)
sre_compile.py(297):     hascased = False
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(312):                 elif op is RANGE:
sre_compile.py(329):                 elif op is NEGATE:
sre_compile.py(332):                     tail.append((op, av))
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(358):     runs = []
sre_compile.py(359):     q = 0
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(363):             break
sre_compile.py(372):     if runs is not None:
sre_compile.py(374):         for p, q in runs:
sre_compile.py(379):         out += tail
sre_compile.py(381):         if hascased or len(out) < len(charset):
sre_compile.py(384):         return charset, hascased
sre_compile.py(137):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:
sre_compile.py(139):             elif not hascased:
sre_compile.py(140):                 emit(IN)
sre_compile.py(145):             skip = _len(code); emit(0)
sre_compile.py(146):             _compile_charset(charset, flags, code)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(267):     emit = code.append
sre_compile.py(268):     for op, av in charset:
sre_compile.py(269):         emit(op)
sre_compile.py(270):         if op is NEGATE:
sre_compile.py(272):         elif op is LITERAL:
sre_compile.py(274):         elif op is RANGE or op is RANGE_UNI_IGNORE:
sre_compile.py(277):         elif op is CHARSET:
sre_compile.py(279):         elif op is BIGCHARSET:
sre_compile.py(281):         elif op is CATEGORY:
sre_compile.py(282):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(284):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(285):                 emit(CH_UNICODE[av])
sre_compile.py(268):     for op, av in charset:
sre_compile.py(290):     emit(FAILURE)
sre_compile.py(147):             code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(136):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(294):     out = []
sre_compile.py(295):     tail = []
sre_compile.py(296):     charmap = bytearray(256)
sre_compile.py(297):     hascased = False
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(312):                 elif op is RANGE:
sre_compile.py(329):                 elif op is NEGATE:
sre_compile.py(332):                     tail.append((op, av))
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(358):     runs = []
sre_compile.py(359):     q = 0
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(363):             break
sre_compile.py(372):     if runs is not None:
sre_compile.py(374):         for p, q in runs:
sre_compile.py(379):         out += tail
sre_compile.py(381):         if hascased or len(out) < len(charset):
sre_compile.py(384):         return charset, hascased
sre_compile.py(137):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:
sre_compile.py(139):             elif not hascased:
sre_compile.py(140):                 emit(IN)
sre_compile.py(145):             skip = _len(code); emit(0)
sre_compile.py(146):             _compile_charset(charset, flags, code)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(267):     emit = code.append
sre_compile.py(268):     for op, av in charset:
sre_compile.py(269):         emit(op)
sre_compile.py(270):         if op is NEGATE:
sre_compile.py(272):         elif op is LITERAL:
sre_compile.py(274):         elif op is RANGE or op is RANGE_UNI_IGNORE:
sre_compile.py(277):         elif op is CHARSET:
sre_compile.py(279):         elif op is BIGCHARSET:
sre_compile.py(281):         elif op is CATEGORY:
sre_compile.py(282):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(284):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(285):                 emit(CH_UNICODE[av])
sre_compile.py(268):     for op, av in charset:
sre_compile.py(290):     emit(FAILURE)
sre_compile.py(147):             code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(178):         elif op is SUBPATTERN:
sre_compile.py(188):         elif op in SUCCESS_CODES:
sre_compile.py(190):         elif op in ASSERT_CODES:
sre_compile.py(203):         elif op is CALL:
sre_compile.py(209):         elif op is AT:
sre_compile.py(210):             emit(op)
sre_compile.py(211):             if flags & SRE_FLAG_MULTILINE:
sre_compile.py(213):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(215):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(216):                 av = AT_UNICODE.get(av, av)
sre_compile.py(217):             emit(av)
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(633):     code.append(SUCCESS)
sre_compile.py(635):     return code
sre_compile.py(794):     if flags & SRE_FLAG_DEBUG:
sre_compile.py(799):     groupindex = p.state.groupdict
sre_compile.py(800):     indexgroup = [None] * p.state.groups
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_compile.py(801):     for k, i in groupindex.items():
sre_compile.py(804):     return _sre.compile(
sre_compile.py(805):         pattern, flags | p.state.flags, code,
sre_compile.py(806):         p.state.groups-1,
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_compile.py(807):         groupindex, tuple(indexgroup)
sre_compile.py(804):     return _sre.compile(
re.py(304):     if not (flags & DEBUG):
 --- modulename: enum, funcname: __and__
enum.py(987):         if not isinstance(other, (self.__class__, int)):
enum.py(989):         return self.__class__(self._value_ & self.__class__(other)._value_)
 --- modulename: enum, funcname: __call__
enum.py(384):         if names is None:  # simple value lookup
enum.py(385):             return cls.__new__(cls, value)
 --- modulename: enum, funcname: __new__
enum.py(682):         if type(value) is cls:
enum.py(687):         try:
enum.py(688):             return cls._value2member_map_[value]
 --- modulename: enum, funcname: __call__
enum.py(384):         if names is None:  # simple value lookup
enum.py(385):             return cls.__new__(cls, value)
 --- modulename: enum, funcname: __new__
enum.py(682):         if type(value) is cls:
enum.py(687):         try:
enum.py(688):             return cls._value2member_map_[value]
re.py(305):         if len(_cache) >= _MAXCACHE:
re.py(311):         _cache[type(pattern), pattern, flags] = p
re.py(312):     return p
 --- modulename: re, funcname: compile
re.py(251):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(290):     if isinstance(flags, RegexFlag):
re.py(292):     try:
re.py(293):         return _cache[type(pattern), pattern, flags]
re.py(294):     except KeyError:
re.py(295):         pass
re.py(296):     if isinstance(pattern, Pattern):
re.py(301):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(620):     return isinstance(obj, (str, bytes))
re.py(303):     p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(786):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(620):     return isinstance(obj, (str, bytes))
sre_compile.py(787):         pattern = p
sre_compile.py(788):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(947):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(226):         self.istext = isinstance(string, str)
sre_parse.py(227):         self.string = string
sre_parse.py(228):         if not self.istext:
sre_parse.py(229):             string = str(string, 'latin1')
sre_parse.py(230):         self.decoded_string = string
sre_parse.py(231):         self.index = 0
sre_parse.py(232):         self.next = None
sre_parse.py(233):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(949):     if state is None:
sre_parse.py(950):         state = State()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(77):         self.flags = 0
sre_parse.py(78):         self.groupdict = {}
sre_parse.py(79):         self.groupwidths = [None]  # group 0
sre_parse.py(80):         self.lookbehindgroups = None
sre_parse.py(81):         self.grouprefpos = {}
sre_parse.py(951):     state.flags = flags
sre_parse.py(952):     state.str = str
sre_parse.py(954):     try:
sre_parse.py(955):         p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(439):     items = []
sre_parse.py(440):     itemsappend = items.append
sre_parse.py(441):     sourcematch = source.match
sre_parse.py(442):     start = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(683):         elif this == ".":
sre_parse.py(686):         elif this == "(":
sre_parse.py(687):             start = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(688):             group = True
sre_parse.py(689):             name = None
sre_parse.py(690):             add_flags = 0
sre_parse.py(691):             del_flags = 0
sre_parse.py(692):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(834):             if group is not None:
sre_parse.py(835):                 try:
sre_parse.py(836):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(86):         gid = self.groups
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_parse.py(87):         self.groupwidths.append(None)
sre_parse.py(88):         if self.groups > MAXGROUPS:
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_parse.py(90):         if name is not None:
sre_parse.py(96):         return gid
sre_parse.py(839):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and
sre_parse.py(841):             p = _parse_sub(source, state, sub_verbose, nested + 1)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(439):     items = []
sre_parse.py(440):     itemsappend = items.append
sre_parse.py(441):     sourcematch = source.match
sre_parse.py(442):     start = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(533):             here = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(535):             set = []
sre_parse.py(536):             setappend = set.append
sre_parse.py(539):             if source.next == '[':
sre_parse.py(545):             negate = sourcematch("^")
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(553):                     break
sre_parse.py(606):             set = _uniq(set)
 --- modulename: sre_parse, funcname: _uniq
sre_parse.py(434):     return list(dict.fromkeys(items))
sre_parse.py(608):             if _len(set) == 1 and set[0][0] is LITERAL:
sre_parse.py(610):                 if negate:
sre_parse.py(611):                     subpatternappend((NOT_LITERAL, set[0][1]))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(627):                 min, max = 0, MAXREPEAT
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(511):             break # end of subpattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(447):             break
sre_parse.py(449):     if len(items) == 1:
sre_parse.py(450):         return items[0]
sre_parse.py(842):             if not source.match(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(845):             if group is not None:
sre_parse.py(846):                 state.closegroup(group, p)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(98):         self.groupwidths[gid] = p.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(847):             subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(511):             break # end of subpattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(862):             group, add_flags, del_flags, p = av
sre_parse.py(863):             if group is None and not add_flags and not del_flags:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(683):         elif this == ".":
sre_parse.py(686):         elif this == "(":
sre_parse.py(687):             start = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(688):             group = True
sre_parse.py(689):             name = None
sre_parse.py(690):             add_flags = 0
sre_parse.py(691):             del_flags = 0
sre_parse.py(692):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(834):             if group is not None:
sre_parse.py(835):                 try:
sre_parse.py(836):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(86):         gid = self.groups
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_parse.py(87):         self.groupwidths.append(None)
sre_parse.py(88):         if self.groups > MAXGROUPS:
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_parse.py(90):         if name is not None:
sre_parse.py(96):         return gid
sre_parse.py(839):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and
sre_parse.py(841):             p = _parse_sub(source, state, sub_verbose, nested + 1)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(439):     items = []
sre_parse.py(440):     itemsappend = items.append
sre_parse.py(441):     sourcematch = source.match
sre_parse.py(442):     start = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(533):             here = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(535):             set = []
sre_parse.py(536):             setappend = set.append
sre_parse.py(539):             if source.next == '[':
sre_parse.py(545):             negate = sourcematch("^")
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(553):                     break
sre_parse.py(606):             set = _uniq(set)
 --- modulename: sre_parse, funcname: _uniq
sre_parse.py(434):     return list(dict.fromkeys(items))
sre_parse.py(608):             if _len(set) == 1 and set[0][0] is LITERAL:
sre_parse.py(610):                 if negate:
sre_parse.py(611):                     subpatternappend((NOT_LITERAL, set[0][1]))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(627):                 min, max = 0, MAXREPEAT
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(511):             break # end of subpattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(447):             break
sre_parse.py(449):     if len(items) == 1:
sre_parse.py(450):         return items[0]
sre_parse.py(842):             if not source.match(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(238):         except IndexError:
sre_parse.py(239):             self.next = None
sre_parse.py(240):             return
sre_parse.py(253):             return True
sre_parse.py(845):             if group is not None:
sre_parse.py(846):                 state.closegroup(group, p)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(98):         self.groupwidths[gid] = p.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(847):             subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(509):             break # end of pattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(862):             group, add_flags, del_flags, p = av
sre_parse.py(863):             if group is None and not add_flags and not del_flags:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(447):             break
sre_parse.py(449):     if len(items) == 1:
sre_parse.py(452):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(455):     while True:
sre_parse.py(456):         prefix = None
sre_parse.py(457):         for item in items:
sre_parse.py(458):             if not item:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(460):             if prefix is None:
sre_parse.py(461):                 prefix = item[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(457):         for item in items:
sre_parse.py(458):             if not item:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(460):             if prefix is None:
sre_parse.py(462):             elif item[0] != prefix:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(463):                 break
sre_parse.py(471):         break
sre_parse.py(474):     set = []
sre_parse.py(475):     for item in items:
sre_parse.py(476):         if len(item) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(478):         op, av = item[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(479):         if op is LITERAL:
sre_parse.py(481):         elif op is IN and av[0][0] is not NEGATE:
sre_parse.py(484):             break
sre_parse.py(491):     subpattern.append((BRANCH, (None, items)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(492):     return subpattern
sre_parse.py(965):     p.state.flags = fix_flags(str, p.state.flags)
 --- modulename: sre_parse, funcname: fix_flags
sre_parse.py(930):     if isinstance(src, str):
sre_parse.py(938):         if flags & SRE_FLAG_UNICODE:
sre_parse.py(940):         if flags & SRE_FLAG_LOCALE and flags & SRE_FLAG_ASCII:
sre_parse.py(942):     return flags
sre_parse.py(967):     if source.next is not None:
sre_parse.py(971):     for g in p.state.grouprefpos:
sre_parse.py(976):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(979):     return p
sre_compile.py(792):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(624):     flags = p.state.flags | flags
sre_compile.py(625):     code = []
sre_compile.py(628):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(564):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(182):                 i = MAXREPEAT - 1
sre_parse.py(183):                 j = 0
sre_parse.py(184):                 for av in av[1]:
sre_parse.py(185):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(195):                 i, j = av[-1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(178):             return self.width
sre_parse.py(196):                 lo = lo + i
sre_parse.py(197):                 hi = hi + j
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(186):                     i = min(i, l)
sre_parse.py(187):                     j = max(j, h)
sre_parse.py(184):                 for av in av[1]:
sre_parse.py(185):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(195):                 i, j = av[-1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(178):             return self.width
sre_parse.py(196):                 lo = lo + i
sre_parse.py(197):                 hi = hi + j
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(186):                     i = min(i, l)
sre_parse.py(187):                     j = max(j, h)
sre_parse.py(184):                 for av in av[1]:
sre_parse.py(188):                 lo = lo + i
sre_parse.py(189):                 hi = hi + j
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_compile.py(565):     if hi > MAXCODE:
sre_compile.py(567):     if lo == 0:
sre_compile.py(571):     prefix = []
sre_compile.py(572):     prefix_skip = 0
sre_compile.py(573):     charset = [] # not used
sre_compile.py(574):     if not (flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE):
sre_compile.py(576):         prefix, prefix_skip, got_all = _get_literal_prefix(pattern, flags)
 --- modulename: sre_compile, funcname: _get_literal_prefix
sre_compile.py(487):     prefix = []
sre_compile.py(488):     prefixappend = prefix.append
sre_compile.py(489):     prefix_skip = None
sre_compile.py(490):     iscased = _get_iscased(flags)
 --- modulename: sre_compile, funcname: _get_iscased
sre_compile.py(478):     if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(479):         return None
sre_compile.py(491):     for op, av in pattern.data:
sre_compile.py(492):         if op is LITERAL:
sre_compile.py(496):         elif op is SUBPATTERN:
sre_compile.py(511):             break
sre_compile.py(514):     return prefix, prefix_skip, False
sre_compile.py(578):         if not prefix:
sre_compile.py(579):             charset = _get_charset_prefix(pattern, flags)
 --- modulename: sre_compile, funcname: _get_charset_prefix
sre_compile.py(517):     while True:
sre_compile.py(518):         if not pattern.data:
sre_compile.py(520):         op, av = pattern.data[0]
sre_compile.py(521):         if op is not SUBPATTERN:
sre_compile.py(522):             break
sre_compile.py(528):     iscased = _get_iscased(flags)
 --- modulename: sre_compile, funcname: _get_iscased
sre_compile.py(478):     if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(479):         return None
sre_compile.py(529):     if op is LITERAL:
sre_compile.py(533):     elif op is BRANCH:
sre_compile.py(534):         charset = []
sre_compile.py(535):         charsetappend = charset.append
sre_compile.py(536):         for p in av[1]:
sre_compile.py(537):             if not p:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(539):             op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(540):             if op is LITERAL and not (iscased and iscased(av)):
sre_compile.py(543):                 return None
sre_compile.py(585):     emit = code.append
sre_compile.py(586):     emit(INFO)
sre_compile.py(587):     skip = len(code); emit(0)
sre_compile.py(589):     mask = 0
sre_compile.py(590):     if prefix:
sre_compile.py(594):     elif charset:
sre_compile.py(596):     emit(mask)
sre_compile.py(598):     if lo < MAXCODE:
sre_compile.py(599):         emit(lo)
sre_compile.py(603):     emit(min(hi, MAXCODE))
sre_compile.py(605):     if prefix:
sre_compile.py(613):     elif charset:
sre_compile.py(617):     code[skip] = len(code) - skip
sre_compile.py(631):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(178):         elif op is SUBPATTERN:
sre_compile.py(188):         elif op in SUCCESS_CODES:
sre_compile.py(190):         elif op in ASSERT_CODES:
sre_compile.py(203):         elif op is CALL:
sre_compile.py(209):         elif op is AT:
sre_compile.py(218):         elif op is BRANCH:
sre_compile.py(219):             emit(op)
sre_compile.py(220):             tail = []
sre_compile.py(221):             tailappend = tail.append
sre_compile.py(222):             for av in av[1]:
sre_compile.py(223):                 skip = _len(code); emit(0)
sre_compile.py(225):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(178):         elif op is SUBPATTERN:
sre_compile.py(179):             group, add_flags, del_flags, p = av
sre_compile.py(180):             if group:
sre_compile.py(181):                 emit(MARK)
sre_compile.py(182):                 emit((group-1)*2)
sre_compile.py(184):             _compile(code, p, _combine_flags(flags, add_flags, del_flags))
 --- modulename: sre_compile, funcname: _combine_flags
sre_compile.py(83):     if add_flags & TYPE_FLAGS:
sre_compile.py(85):     return (flags | add_flags) & ~del_flags
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(185):             if group:
sre_compile.py(186):                 emit(MARK)
sre_compile.py(187):                 emit((group-1)*2+1)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(226):                 emit(JUMP)
sre_compile.py(227):                 tailappend(_len(code)); emit(0)
sre_compile.py(228):                 code[skip] = _len(code) - skip
sre_compile.py(222):             for av in av[1]:
sre_compile.py(223):                 skip = _len(code); emit(0)
sre_compile.py(225):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(178):         elif op is SUBPATTERN:
sre_compile.py(179):             group, add_flags, del_flags, p = av
sre_compile.py(180):             if group:
sre_compile.py(181):                 emit(MARK)
sre_compile.py(182):                 emit((group-1)*2)
sre_compile.py(184):             _compile(code, p, _combine_flags(flags, add_flags, del_flags))
 --- modulename: sre_compile, funcname: _combine_flags
sre_compile.py(83):     if add_flags & TYPE_FLAGS:
sre_compile.py(85):     return (flags | add_flags) & ~del_flags
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(185):             if group:
sre_compile.py(186):                 emit(MARK)
sre_compile.py(187):                 emit((group-1)*2+1)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(226):                 emit(JUMP)
sre_compile.py(227):                 tailappend(_len(code)); emit(0)
sre_compile.py(228):                 code[skip] = _len(code) - skip
sre_compile.py(222):             for av in av[1]:
sre_compile.py(229):             emit(FAILURE) # end of branch
sre_compile.py(230):             for tail in tail:
sre_compile.py(231):                 code[tail] = _len(code) - tail
sre_compile.py(230):             for tail in tail:
sre_compile.py(231):                 code[tail] = _len(code) - tail
sre_compile.py(230):             for tail in tail:
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(633):     code.append(SUCCESS)
sre_compile.py(635):     return code
sre_compile.py(794):     if flags & SRE_FLAG_DEBUG:
sre_compile.py(799):     groupindex = p.state.groupdict
sre_compile.py(800):     indexgroup = [None] * p.state.groups
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_compile.py(801):     for k, i in groupindex.items():
sre_compile.py(804):     return _sre.compile(
sre_compile.py(805):         pattern, flags | p.state.flags, code,
sre_compile.py(806):         p.state.groups-1,
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_compile.py(807):         groupindex, tuple(indexgroup)
sre_compile.py(804):     return _sre.compile(
re.py(304):     if not (flags & DEBUG):
 --- modulename: enum, funcname: __and__
enum.py(987):         if not isinstance(other, (self.__class__, int)):
enum.py(989):         return self.__class__(self._value_ & self.__class__(other)._value_)
 --- modulename: enum, funcname: __call__
enum.py(384):         if names is None:  # simple value lookup
enum.py(385):             return cls.__new__(cls, value)
 --- modulename: enum, funcname: __new__
enum.py(682):         if type(value) is cls:
enum.py(687):         try:
enum.py(688):             return cls._value2member_map_[value]
 --- modulename: enum, funcname: __call__
enum.py(384):         if names is None:  # simple value lookup
enum.py(385):             return cls.__new__(cls, value)
 --- modulename: enum, funcname: __new__
enum.py(682):         if type(value) is cls:
enum.py(687):         try:
enum.py(688):             return cls._value2member_map_[value]
re.py(305):         if len(_cache) >= _MAXCACHE:
re.py(311):         _cache[type(pattern), pattern, flags] = p
re.py(312):     return p
 --- modulename: re, funcname: compile
re.py(251):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(290):     if isinstance(flags, RegexFlag):
re.py(292):     try:
re.py(293):         return _cache[type(pattern), pattern, flags]
re.py(294):     except KeyError:
re.py(295):         pass
re.py(296):     if isinstance(pattern, Pattern):
re.py(301):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(620):     return isinstance(obj, (str, bytes))
re.py(303):     p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(786):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(620):     return isinstance(obj, (str, bytes))
sre_compile.py(787):         pattern = p
sre_compile.py(788):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(947):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(226):         self.istext = isinstance(string, str)
sre_parse.py(227):         self.string = string
sre_parse.py(228):         if not self.istext:
sre_parse.py(229):             string = str(string, 'latin1')
sre_parse.py(230):         self.decoded_string = string
sre_parse.py(231):         self.index = 0
sre_parse.py(232):         self.next = None
sre_parse.py(233):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(949):     if state is None:
sre_parse.py(950):         state = State()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(77):         self.flags = 0
sre_parse.py(78):         self.groupdict = {}
sre_parse.py(79):         self.groupwidths = [None]  # group 0
sre_parse.py(80):         self.lookbehindgroups = None
sre_parse.py(81):         self.grouprefpos = {}
sre_parse.py(951):     state.flags = flags
sre_parse.py(952):     state.str = str
sre_parse.py(954):     try:
sre_parse.py(955):         p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(439):     items = []
sre_parse.py(440):     itemsappend = items.append
sre_parse.py(441):     sourcematch = source.match
sre_parse.py(442):     start = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(683):         elif this == ".":
sre_parse.py(686):         elif this == "(":
sre_parse.py(687):             start = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(688):             group = True
sre_parse.py(689):             name = None
sre_parse.py(690):             add_flags = 0
sre_parse.py(691):             del_flags = 0
sre_parse.py(692):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(834):             if group is not None:
sre_parse.py(835):                 try:
sre_parse.py(836):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(86):         gid = self.groups
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_parse.py(87):         self.groupwidths.append(None)
sre_parse.py(88):         if self.groups > MAXGROUPS:
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_parse.py(90):         if name is not None:
sre_parse.py(96):         return gid
sre_parse.py(839):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and
sre_parse.py(841):             p = _parse_sub(source, state, sub_verbose, nested + 1)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(439):     items = []
sre_parse.py(440):     itemsappend = items.append
sre_parse.py(441):     sourcematch = source.match
sre_parse.py(442):     start = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(629):             elif this == "+":
sre_parse.py(631):             elif this == "{":
sre_parse.py(632):                 if source.next == "}":
sre_parse.py(636):                 min, max = 0, MAXREPEAT
sre_parse.py(637):                 lo = hi = ""
sre_parse.py(638):                 while source.next in DIGITS:
sre_parse.py(640):                 if sourcematch(","):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(644):                     hi = lo
sre_parse.py(645):                 if not sourcematch("}"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(646):                     subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(647):                     source.seek(here)
 --- modulename: sre_parse, funcname: seek
sre_parse.py(290):         self.index = index
sre_parse.py(291):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(648):                     continue
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(533):             here = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(535):             set = []
sre_parse.py(536):             setappend = set.append
sre_parse.py(539):             if source.next == '[':
sre_parse.py(545):             negate = sourcematch("^")
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(553):                     break
sre_parse.py(606):             set = _uniq(set)
 --- modulename: sre_parse, funcname: _uniq
sre_parse.py(434):     return list(dict.fromkeys(items))
sre_parse.py(608):             if _len(set) == 1 and set[0][0] is LITERAL:
sre_parse.py(610):                 if negate:
sre_parse.py(611):                     subpatternappend((NOT_LITERAL, set[0][1]))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(629):             elif this == "+":
sre_parse.py(630):                 min, max = 1, MAXREPEAT
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(511):             break # end of subpattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(447):             break
sre_parse.py(449):     if len(items) == 1:
sre_parse.py(450):         return items[0]
sre_parse.py(842):             if not source.match(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(238):         except IndexError:
sre_parse.py(239):             self.next = None
sre_parse.py(240):             return
sre_parse.py(253):             return True
sre_parse.py(845):             if group is not None:
sre_parse.py(846):                 state.closegroup(group, p)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(98):         self.groupwidths[gid] = p.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(847):             subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(509):             break # end of pattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(862):             group, add_flags, del_flags, p = av
sre_parse.py(863):             if group is None and not add_flags and not del_flags:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(447):             break
sre_parse.py(449):     if len(items) == 1:
sre_parse.py(450):         return items[0]
sre_parse.py(965):     p.state.flags = fix_flags(str, p.state.flags)
 --- modulename: sre_parse, funcname: fix_flags
sre_parse.py(930):     if isinstance(src, str):
sre_parse.py(938):         if flags & SRE_FLAG_UNICODE:
sre_parse.py(940):         if flags & SRE_FLAG_LOCALE and flags & SRE_FLAG_ASCII:
sre_parse.py(942):     return flags
sre_parse.py(967):     if source.next is not None:
sre_parse.py(971):     for g in p.state.grouprefpos:
sre_parse.py(976):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(979):     return p
sre_compile.py(792):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(624):     flags = p.state.flags | flags
sre_compile.py(625):     code = []
sre_compile.py(628):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(564):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(195):                 i, j = av[-1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(178):             return self.width
sre_parse.py(196):                 lo = lo + i
sre_parse.py(197):                 hi = hi + j
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_compile.py(565):     if hi > MAXCODE:
sre_compile.py(567):     if lo == 0:
sre_compile.py(571):     prefix = []
sre_compile.py(572):     prefix_skip = 0
sre_compile.py(573):     charset = [] # not used
sre_compile.py(574):     if not (flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE):
sre_compile.py(576):         prefix, prefix_skip, got_all = _get_literal_prefix(pattern, flags)
 --- modulename: sre_compile, funcname: _get_literal_prefix
sre_compile.py(487):     prefix = []
sre_compile.py(488):     prefixappend = prefix.append
sre_compile.py(489):     prefix_skip = None
sre_compile.py(490):     iscased = _get_iscased(flags)
 --- modulename: sre_compile, funcname: _get_iscased
sre_compile.py(478):     if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(479):         return None
sre_compile.py(491):     for op, av in pattern.data:
sre_compile.py(492):         if op is LITERAL:
sre_compile.py(496):         elif op is SUBPATTERN:
sre_compile.py(497):             group, add_flags, del_flags, p = av
sre_compile.py(498):             flags1 = _combine_flags(flags, add_flags, del_flags)
 --- modulename: sre_compile, funcname: _combine_flags
sre_compile.py(83):     if add_flags & TYPE_FLAGS:
sre_compile.py(85):     return (flags | add_flags) & ~del_flags
sre_compile.py(499):             if flags1 & SRE_FLAG_IGNORECASE and flags1 & SRE_FLAG_LOCALE:
sre_compile.py(501):             prefix1, prefix_skip1, got_all = _get_literal_prefix(p, flags1)
 --- modulename: sre_compile, funcname: _get_literal_prefix
sre_compile.py(487):     prefix = []
sre_compile.py(488):     prefixappend = prefix.append
sre_compile.py(489):     prefix_skip = None
sre_compile.py(490):     iscased = _get_iscased(flags)
 --- modulename: sre_compile, funcname: _get_iscased
sre_compile.py(478):     if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(479):         return None
sre_compile.py(491):     for op, av in pattern.data:
sre_compile.py(492):         if op is LITERAL:
sre_compile.py(493):             if iscased and iscased(av):
sre_compile.py(495):             prefixappend(av)
sre_compile.py(491):     for op, av in pattern.data:
sre_compile.py(492):         if op is LITERAL:
sre_compile.py(496):         elif op is SUBPATTERN:
sre_compile.py(511):             break
sre_compile.py(514):     return prefix, prefix_skip, False
sre_compile.py(502):             if prefix_skip is None:
sre_compile.py(503):                 if group is not None:
sre_compile.py(504):                     prefix_skip = len(prefix)
sre_compile.py(507):             prefix.extend(prefix1)
sre_compile.py(508):             if not got_all:
sre_compile.py(509):                 break
sre_compile.py(514):     return prefix, prefix_skip, False
sre_compile.py(578):         if not prefix:
sre_compile.py(585):     emit = code.append
sre_compile.py(586):     emit(INFO)
sre_compile.py(587):     skip = len(code); emit(0)
sre_compile.py(589):     mask = 0
sre_compile.py(590):     if prefix:
sre_compile.py(591):         mask = SRE_INFO_PREFIX
sre_compile.py(592):         if prefix_skip is None and got_all:
sre_compile.py(596):     emit(mask)
sre_compile.py(598):     if lo < MAXCODE:
sre_compile.py(599):         emit(lo)
sre_compile.py(603):     emit(min(hi, MAXCODE))
sre_compile.py(605):     if prefix:
sre_compile.py(606):         emit(len(prefix)) # length
sre_compile.py(607):         if prefix_skip is None:
sre_compile.py(609):         emit(prefix_skip) # skip
sre_compile.py(610):         code.extend(prefix)
sre_compile.py(612):         code.extend(_generate_overlap_table(prefix))
 --- modulename: sre_compile, funcname: _generate_overlap_table
sre_compile.py(465):     table = [0] * len(prefix)
sre_compile.py(466):     for i in range(1, len(prefix)):
sre_compile.py(475):     return table
sre_compile.py(617):     code[skip] = len(code) - skip
sre_compile.py(631):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(178):         elif op is SUBPATTERN:
sre_compile.py(179):             group, add_flags, del_flags, p = av
sre_compile.py(180):             if group:
sre_compile.py(181):                 emit(MARK)
sre_compile.py(182):                 emit((group-1)*2)
sre_compile.py(184):             _compile(code, p, _combine_flags(flags, add_flags, del_flags))
 --- modulename: sre_compile, funcname: _combine_flags
sre_compile.py(83):     if add_flags & TYPE_FLAGS:
sre_compile.py(85):     return (flags | add_flags) & ~del_flags
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(185):             if group:
sre_compile.py(186):                 emit(MARK)
sre_compile.py(187):                 emit((group-1)*2+1)
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(633):     code.append(SUCCESS)
sre_compile.py(635):     return code
sre_compile.py(794):     if flags & SRE_FLAG_DEBUG:
sre_compile.py(799):     groupindex = p.state.groupdict
sre_compile.py(800):     indexgroup = [None] * p.state.groups
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_compile.py(801):     for k, i in groupindex.items():
sre_compile.py(804):     return _sre.compile(
sre_compile.py(805):         pattern, flags | p.state.flags, code,
sre_compile.py(806):         p.state.groups-1,
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_compile.py(807):         groupindex, tuple(indexgroup)
sre_compile.py(804):     return _sre.compile(
re.py(304):     if not (flags & DEBUG):
 --- modulename: enum, funcname: __and__
enum.py(987):         if not isinstance(other, (self.__class__, int)):
enum.py(989):         return self.__class__(self._value_ & self.__class__(other)._value_)
 --- modulename: enum, funcname: __call__
enum.py(384):         if names is None:  # simple value lookup
enum.py(385):             return cls.__new__(cls, value)
 --- modulename: enum, funcname: __new__
enum.py(682):         if type(value) is cls:
enum.py(687):         try:
enum.py(688):             return cls._value2member_map_[value]
 --- modulename: enum, funcname: __call__
enum.py(384):         if names is None:  # simple value lookup
enum.py(385):             return cls.__new__(cls, value)
 --- modulename: enum, funcname: __new__
enum.py(682):         if type(value) is cls:
enum.py(687):         try:
enum.py(688):             return cls._value2member_map_[value]
re.py(305):         if len(_cache) >= _MAXCACHE:
re.py(311):         _cache[type(pattern), pattern, flags] = p
re.py(312):     return p
 --- modulename: re, funcname: compile
re.py(251):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(290):     if isinstance(flags, RegexFlag):
re.py(292):     try:
re.py(293):         return _cache[type(pattern), pattern, flags]
re.py(294):     except KeyError:
re.py(295):         pass
re.py(296):     if isinstance(pattern, Pattern):
re.py(301):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(620):     return isinstance(obj, (str, bytes))
re.py(303):     p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(786):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(620):     return isinstance(obj, (str, bytes))
sre_compile.py(787):         pattern = p
sre_compile.py(788):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(947):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(226):         self.istext = isinstance(string, str)
sre_parse.py(227):         self.string = string
sre_parse.py(228):         if not self.istext:
sre_parse.py(230):         self.decoded_string = string
sre_parse.py(231):         self.index = 0
sre_parse.py(232):         self.next = None
sre_parse.py(233):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(949):     if state is None:
sre_parse.py(950):         state = State()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(77):         self.flags = 0
sre_parse.py(78):         self.groupdict = {}
sre_parse.py(79):         self.groupwidths = [None]  # group 0
sre_parse.py(80):         self.lookbehindgroups = None
sre_parse.py(81):         self.grouprefpos = {}
sre_parse.py(951):     state.flags = flags
sre_parse.py(952):     state.str = str
sre_parse.py(954):     try:
sre_parse.py(955):         p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(439):     items = []
sre_parse.py(440):     itemsappend = items.append
sre_parse.py(441):     sourcematch = source.match
sre_parse.py(442):     start = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(526):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(358):     code = CATEGORIES.get(escape)
sre_parse.py(359):     if code:
sre_parse.py(360):         return code
sre_parse.py(527):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(629):             elif this == "+":
sre_parse.py(630):                 min, max = 1, MAXREPEAT
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(526):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(358):     code = CATEGORIES.get(escape)
sre_parse.py(359):     if code:
sre_parse.py(360):         return code
sre_parse.py(527):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(627):                 min, max = 0, MAXREPEAT
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(526):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(358):     code = CATEGORIES.get(escape)
sre_parse.py(359):     if code:
sre_parse.py(360):         return code
sre_parse.py(527):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(627):                 min, max = 0, MAXREPEAT
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(683):         elif this == ".":
sre_parse.py(686):         elif this == "(":
sre_parse.py(687):             start = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(688):             group = True
sre_parse.py(689):             name = None
sre_parse.py(690):             add_flags = 0
sre_parse.py(691):             del_flags = 0
sre_parse.py(692):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(694):                 char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(695):                 if char is None:
sre_parse.py(697):                 if char == "P":
sre_parse.py(728):                 elif char == ":":
sre_parse.py(730):                     group = None
sre_parse.py(834):             if group is not None:
sre_parse.py(839):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and
sre_parse.py(841):             p = _parse_sub(source, state, sub_verbose, nested + 1)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(439):     items = []
sre_parse.py(440):     itemsappend = items.append
sre_parse.py(441):     sourcematch = source.match
sre_parse.py(442):     start = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(526):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(358):     code = CATEGORIES.get(escape)
sre_parse.py(359):     if code:
sre_parse.py(361):     code = ESCAPES.get(escape)
sre_parse.py(362):     if code:
sre_parse.py(364):     try:
sre_parse.py(365):         c = escape[1:2]
sre_parse.py(366):         if c == "x":
sre_parse.py(372):         elif c == "u" and source.istext:
sre_parse.py(378):         elif c == "U" and source.istext:
sre_parse.py(386):         elif c == "N" and source.istext:
sre_parse.py(398):         elif c == "0":
sre_parse.py(402):         elif c in DIGITS:
sre_parse.py(425):         if len(escape) == 2:
sre_parse.py(426):             if c in ASCIILETTERS:
sre_parse.py(428):             return LITERAL, ord(escape[1])
sre_parse.py(527):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(683):         elif this == ".":
sre_parse.py(686):         elif this == "(":
sre_parse.py(687):             start = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(688):             group = True
sre_parse.py(689):             name = None
sre_parse.py(690):             add_flags = 0
sre_parse.py(691):             del_flags = 0
sre_parse.py(692):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(834):             if group is not None:
sre_parse.py(835):                 try:
sre_parse.py(836):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(86):         gid = self.groups
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_parse.py(87):         self.groupwidths.append(None)
sre_parse.py(88):         if self.groups > MAXGROUPS:
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_parse.py(90):         if name is not None:
sre_parse.py(96):         return gid
sre_parse.py(839):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and
sre_parse.py(841):             p = _parse_sub(source, state, sub_verbose, nested + 1)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(439):     items = []
sre_parse.py(440):     itemsappend = items.append
sre_parse.py(441):     sourcematch = source.match
sre_parse.py(442):     start = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(533):             here = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(535):             set = []
sre_parse.py(536):             setappend = set.append
sre_parse.py(539):             if source.next == '[':
sre_parse.py(545):             negate = sourcematch("^")
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(555):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(298):     code = ESCAPES.get(escape)
sre_parse.py(299):     if code:
sre_parse.py(301):     code = CATEGORIES.get(escape)
sre_parse.py(302):     if code and code[0] is IN:
sre_parse.py(304):     try:
sre_parse.py(305):         c = escape[1:2]
sre_parse.py(306):         if c == "x":
sre_parse.py(312):         elif c == "u" and source.istext:
sre_parse.py(318):         elif c == "U" and source.istext:
sre_parse.py(326):         elif c == "N" and source.istext:
sre_parse.py(338):         elif c in OCTDIGITS:
sre_parse.py(346):         elif c in DIGITS:
sre_parse.py(348):         if len(escape) == 2:
sre_parse.py(349):             if c in ASCIILETTERS:
sre_parse.py(351):             return LITERAL, ord(escape[1])
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(553):                     break
sre_parse.py(606):             set = _uniq(set)
 --- modulename: sre_parse, funcname: _uniq
sre_parse.py(434):     return list(dict.fromkeys(items))
sre_parse.py(608):             if _len(set) == 1 and set[0][0] is LITERAL:
sre_parse.py(610):                 if negate:
sre_parse.py(611):                     subpatternappend((NOT_LITERAL, set[0][1]))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(627):                 min, max = 0, MAXREPEAT
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(511):             break # end of subpattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(447):             break
sre_parse.py(449):     if len(items) == 1:
sre_parse.py(450):         return items[0]
sre_parse.py(842):             if not source.match(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(242):             index += 1
sre_parse.py(243):             try:
sre_parse.py(244):                 char += self.decoded_string[index]
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(845):             if group is not None:
sre_parse.py(846):                 state.closegroup(group, p)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(98):         self.groupwidths[gid] = p.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(847):             subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(526):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(358):     code = CATEGORIES.get(escape)
sre_parse.py(359):     if code:
sre_parse.py(361):     code = ESCAPES.get(escape)
sre_parse.py(362):     if code:
sre_parse.py(364):     try:
sre_parse.py(365):         c = escape[1:2]
sre_parse.py(366):         if c == "x":
sre_parse.py(372):         elif c == "u" and source.istext:
sre_parse.py(378):         elif c == "U" and source.istext:
sre_parse.py(386):         elif c == "N" and source.istext:
sre_parse.py(398):         elif c == "0":
sre_parse.py(402):         elif c in DIGITS:
sre_parse.py(425):         if len(escape) == 2:
sre_parse.py(426):             if c in ASCIILETTERS:
sre_parse.py(428):             return LITERAL, ord(escape[1])
sre_parse.py(527):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(511):             break # end of subpattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(862):             group, add_flags, del_flags, p = av
sre_parse.py(863):             if group is None and not add_flags and not del_flags:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(683):         elif this == ".":
sre_parse.py(686):         elif this == "(":
sre_parse.py(687):             start = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(688):             group = True
sre_parse.py(689):             name = None
sre_parse.py(690):             add_flags = 0
sre_parse.py(691):             del_flags = 0
sre_parse.py(692):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(834):             if group is not None:
sre_parse.py(835):                 try:
sre_parse.py(836):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(86):         gid = self.groups
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_parse.py(87):         self.groupwidths.append(None)
sre_parse.py(88):         if self.groups > MAXGROUPS:
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_parse.py(90):         if name is not None:
sre_parse.py(96):         return gid
sre_parse.py(839):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and
sre_parse.py(841):             p = _parse_sub(source, state, sub_verbose, nested + 1)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(439):     items = []
sre_parse.py(440):     itemsappend = items.append
sre_parse.py(441):     sourcematch = source.match
sre_parse.py(442):     start = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(533):             here = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(535):             set = []
sre_parse.py(536):             setappend = set.append
sre_parse.py(539):             if source.next == '[':
sre_parse.py(545):             negate = sourcematch("^")
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(602):                     if code1[0] is IN:
sre_parse.py(604):                     setappend(code1)
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(553):                     break
sre_parse.py(606):             set = _uniq(set)
 --- modulename: sre_parse, funcname: _uniq
sre_parse.py(434):     return list(dict.fromkeys(items))
sre_parse.py(608):             if _len(set) == 1 and set[0][0] is LITERAL:
sre_parse.py(610):                 if negate:
sre_parse.py(611):                     subpatternappend((NOT_LITERAL, set[0][1]))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(627):                 min, max = 0, MAXREPEAT
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(511):             break # end of subpattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(447):             break
sre_parse.py(449):     if len(items) == 1:
sre_parse.py(450):         return items[0]
sre_parse.py(842):             if not source.match(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(845):             if group is not None:
sre_parse.py(846):                 state.closegroup(group, p)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(98):         self.groupwidths[gid] = p.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(847):             subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(511):             break # end of subpattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(862):             group, add_flags, del_flags, p = av
sre_parse.py(863):             if group is None and not add_flags and not del_flags:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(447):             break
sre_parse.py(449):     if len(items) == 1:
sre_parse.py(452):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(455):     while True:
sre_parse.py(456):         prefix = None
sre_parse.py(457):         for item in items:
sre_parse.py(458):             if not item:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(460):             if prefix is None:
sre_parse.py(461):                 prefix = item[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(457):         for item in items:
sre_parse.py(458):             if not item:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(460):             if prefix is None:
sre_parse.py(462):             elif item[0] != prefix:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(463):                 break
sre_parse.py(471):         break
sre_parse.py(474):     set = []
sre_parse.py(475):     for item in items:
sre_parse.py(476):         if len(item) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(477):             break
sre_parse.py(491):     subpattern.append((BRANCH, (None, items)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(492):     return subpattern
sre_parse.py(842):             if not source.match(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(238):         except IndexError:
sre_parse.py(239):             self.next = None
sre_parse.py(240):             return
sre_parse.py(253):             return True
sre_parse.py(845):             if group is not None:
sre_parse.py(847):             subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(509):             break # end of pattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(862):             group, add_flags, del_flags, p = av
sre_parse.py(863):             if group is None and not add_flags and not del_flags:
sre_parse.py(864):                 subpattern[i: i+1] = p
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(447):             break
sre_parse.py(449):     if len(items) == 1:
sre_parse.py(450):         return items[0]
sre_parse.py(965):     p.state.flags = fix_flags(str, p.state.flags)
 --- modulename: sre_parse, funcname: fix_flags
sre_parse.py(930):     if isinstance(src, str):
sre_parse.py(931):         if flags & SRE_FLAG_LOCALE:
sre_parse.py(933):         if not flags & SRE_FLAG_ASCII:
sre_parse.py(934):             flags |= SRE_FLAG_UNICODE
sre_parse.py(942):     return flags
sre_parse.py(967):     if source.next is not None:
sre_parse.py(971):     for g in p.state.grouprefpos:
sre_parse.py(976):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(979):     return p
sre_compile.py(792):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(624):     flags = p.state.flags | flags
sre_compile.py(625):     code = []
sre_compile.py(628):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(564):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(182):                 i = MAXREPEAT - 1
sre_parse.py(183):                 j = 0
sre_parse.py(184):                 for av in av[1]:
sre_parse.py(185):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(195):                 i, j = av[-1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(178):             return self.width
sre_parse.py(196):                 lo = lo + i
sre_parse.py(197):                 hi = hi + j
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(186):                     i = min(i, l)
sre_parse.py(187):                     j = max(j, h)
sre_parse.py(184):                 for av in av[1]:
sre_parse.py(185):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(195):                 i, j = av[-1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(178):             return self.width
sre_parse.py(196):                 lo = lo + i
sre_parse.py(197):                 hi = hi + j
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(186):                     i = min(i, l)
sre_parse.py(187):                     j = max(j, h)
sre_parse.py(184):                 for av in av[1]:
sre_parse.py(188):                 lo = lo + i
sre_parse.py(189):                 hi = hi + j
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_compile.py(565):     if hi > MAXCODE:
sre_compile.py(567):     if lo == 0:
sre_compile.py(571):     prefix = []
sre_compile.py(572):     prefix_skip = 0
sre_compile.py(573):     charset = [] # not used
sre_compile.py(574):     if not (flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE):
sre_compile.py(576):         prefix, prefix_skip, got_all = _get_literal_prefix(pattern, flags)
 --- modulename: sre_compile, funcname: _get_literal_prefix
sre_compile.py(487):     prefix = []
sre_compile.py(488):     prefixappend = prefix.append
sre_compile.py(489):     prefix_skip = None
sre_compile.py(490):     iscased = _get_iscased(flags)
 --- modulename: sre_compile, funcname: _get_iscased
sre_compile.py(478):     if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(479):         return None
sre_compile.py(491):     for op, av in pattern.data:
sre_compile.py(492):         if op is LITERAL:
sre_compile.py(496):         elif op is SUBPATTERN:
sre_compile.py(511):             break
sre_compile.py(514):     return prefix, prefix_skip, False
sre_compile.py(578):         if not prefix:
sre_compile.py(579):             charset = _get_charset_prefix(pattern, flags)
 --- modulename: sre_compile, funcname: _get_charset_prefix
sre_compile.py(517):     while True:
sre_compile.py(518):         if not pattern.data:
sre_compile.py(520):         op, av = pattern.data[0]
sre_compile.py(521):         if op is not SUBPATTERN:
sre_compile.py(522):             break
sre_compile.py(528):     iscased = _get_iscased(flags)
 --- modulename: sre_compile, funcname: _get_iscased
sre_compile.py(478):     if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(479):         return None
sre_compile.py(529):     if op is LITERAL:
sre_compile.py(533):     elif op is BRANCH:
sre_compile.py(545):     elif op is IN:
sre_compile.py(558):     return None
sre_compile.py(585):     emit = code.append
sre_compile.py(586):     emit(INFO)
sre_compile.py(587):     skip = len(code); emit(0)
sre_compile.py(589):     mask = 0
sre_compile.py(590):     if prefix:
sre_compile.py(594):     elif charset:
sre_compile.py(596):     emit(mask)
sre_compile.py(598):     if lo < MAXCODE:
sre_compile.py(599):         emit(lo)
sre_compile.py(603):     emit(min(hi, MAXCODE))
sre_compile.py(605):     if prefix:
sre_compile.py(613):     elif charset:
sre_compile.py(617):     code[skip] = len(code) - skip
sre_compile.py(631):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(136):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(294):     out = []
sre_compile.py(295):     tail = []
sre_compile.py(296):     charmap = bytearray(256)
sre_compile.py(297):     hascased = False
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(312):                 elif op is RANGE:
sre_compile.py(329):                 elif op is NEGATE:
sre_compile.py(332):                     tail.append((op, av))
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(358):     runs = []
sre_compile.py(359):     q = 0
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(363):             break
sre_compile.py(372):     if runs is not None:
sre_compile.py(374):         for p, q in runs:
sre_compile.py(379):         out += tail
sre_compile.py(381):         if hascased or len(out) < len(charset):
sre_compile.py(384):         return charset, hascased
sre_compile.py(137):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:
sre_compile.py(139):             elif not hascased:
sre_compile.py(140):                 emit(IN)
sre_compile.py(145):             skip = _len(code); emit(0)
sre_compile.py(146):             _compile_charset(charset, flags, code)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(267):     emit = code.append
sre_compile.py(268):     for op, av in charset:
sre_compile.py(269):         emit(op)
sre_compile.py(270):         if op is NEGATE:
sre_compile.py(272):         elif op is LITERAL:
sre_compile.py(274):         elif op is RANGE or op is RANGE_UNI_IGNORE:
sre_compile.py(277):         elif op is CHARSET:
sre_compile.py(279):         elif op is BIGCHARSET:
sre_compile.py(281):         elif op is CATEGORY:
sre_compile.py(282):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(284):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(285):                 emit(CH_UNICODE[av])
sre_compile.py(268):     for op, av in charset:
sre_compile.py(290):     emit(FAILURE)
sre_compile.py(147):             code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(136):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(294):     out = []
sre_compile.py(295):     tail = []
sre_compile.py(296):     charmap = bytearray(256)
sre_compile.py(297):     hascased = False
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(312):                 elif op is RANGE:
sre_compile.py(329):                 elif op is NEGATE:
sre_compile.py(332):                     tail.append((op, av))
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(358):     runs = []
sre_compile.py(359):     q = 0
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(363):             break
sre_compile.py(372):     if runs is not None:
sre_compile.py(374):         for p, q in runs:
sre_compile.py(379):         out += tail
sre_compile.py(381):         if hascased or len(out) < len(charset):
sre_compile.py(384):         return charset, hascased
sre_compile.py(137):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:
sre_compile.py(139):             elif not hascased:
sre_compile.py(140):                 emit(IN)
sre_compile.py(145):             skip = _len(code); emit(0)
sre_compile.py(146):             _compile_charset(charset, flags, code)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(267):     emit = code.append
sre_compile.py(268):     for op, av in charset:
sre_compile.py(269):         emit(op)
sre_compile.py(270):         if op is NEGATE:
sre_compile.py(272):         elif op is LITERAL:
sre_compile.py(274):         elif op is RANGE or op is RANGE_UNI_IGNORE:
sre_compile.py(277):         elif op is CHARSET:
sre_compile.py(279):         elif op is BIGCHARSET:
sre_compile.py(281):         elif op is CATEGORY:
sre_compile.py(282):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(284):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(285):                 emit(CH_UNICODE[av])
sre_compile.py(268):     for op, av in charset:
sre_compile.py(290):     emit(FAILURE)
sre_compile.py(147):             code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(136):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(294):     out = []
sre_compile.py(295):     tail = []
sre_compile.py(296):     charmap = bytearray(256)
sre_compile.py(297):     hascased = False
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(312):                 elif op is RANGE:
sre_compile.py(329):                 elif op is NEGATE:
sre_compile.py(332):                     tail.append((op, av))
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(358):     runs = []
sre_compile.py(359):     q = 0
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(363):             break
sre_compile.py(372):     if runs is not None:
sre_compile.py(374):         for p, q in runs:
sre_compile.py(379):         out += tail
sre_compile.py(381):         if hascased or len(out) < len(charset):
sre_compile.py(384):         return charset, hascased
sre_compile.py(137):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:
sre_compile.py(139):             elif not hascased:
sre_compile.py(140):                 emit(IN)
sre_compile.py(145):             skip = _len(code); emit(0)
sre_compile.py(146):             _compile_charset(charset, flags, code)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(267):     emit = code.append
sre_compile.py(268):     for op, av in charset:
sre_compile.py(269):         emit(op)
sre_compile.py(270):         if op is NEGATE:
sre_compile.py(272):         elif op is LITERAL:
sre_compile.py(274):         elif op is RANGE or op is RANGE_UNI_IGNORE:
sre_compile.py(277):         elif op is CHARSET:
sre_compile.py(279):         elif op is BIGCHARSET:
sre_compile.py(281):         elif op is CATEGORY:
sre_compile.py(282):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(284):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(285):                 emit(CH_UNICODE[av])
sre_compile.py(268):     for op, av in charset:
sre_compile.py(290):     emit(FAILURE)
sre_compile.py(147):             code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(178):         elif op is SUBPATTERN:
sre_compile.py(188):         elif op in SUCCESS_CODES:
sre_compile.py(190):         elif op in ASSERT_CODES:
sre_compile.py(203):         elif op is CALL:
sre_compile.py(209):         elif op is AT:
sre_compile.py(218):         elif op is BRANCH:
sre_compile.py(219):             emit(op)
sre_compile.py(220):             tail = []
sre_compile.py(221):             tailappend = tail.append
sre_compile.py(222):             for av in av[1]:
sre_compile.py(223):                 skip = _len(code); emit(0)
sre_compile.py(225):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(178):         elif op is SUBPATTERN:
sre_compile.py(179):             group, add_flags, del_flags, p = av
sre_compile.py(180):             if group:
sre_compile.py(181):                 emit(MARK)
sre_compile.py(182):                 emit((group-1)*2)
sre_compile.py(184):             _compile(code, p, _combine_flags(flags, add_flags, del_flags))
 --- modulename: sre_compile, funcname: _combine_flags
sre_compile.py(83):     if add_flags & TYPE_FLAGS:
sre_compile.py(85):     return (flags | add_flags) & ~del_flags
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(185):             if group:
sre_compile.py(186):                 emit(MARK)
sre_compile.py(187):                 emit((group-1)*2+1)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(226):                 emit(JUMP)
sre_compile.py(227):                 tailappend(_len(code)); emit(0)
sre_compile.py(228):                 code[skip] = _len(code) - skip
sre_compile.py(222):             for av in av[1]:
sre_compile.py(223):                 skip = _len(code); emit(0)
sre_compile.py(225):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(178):         elif op is SUBPATTERN:
sre_compile.py(179):             group, add_flags, del_flags, p = av
sre_compile.py(180):             if group:
sre_compile.py(181):                 emit(MARK)
sre_compile.py(182):                 emit((group-1)*2)
sre_compile.py(184):             _compile(code, p, _combine_flags(flags, add_flags, del_flags))
 --- modulename: sre_compile, funcname: _combine_flags
sre_compile.py(83):     if add_flags & TYPE_FLAGS:
sre_compile.py(85):     return (flags | add_flags) & ~del_flags
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(185):             if group:
sre_compile.py(186):                 emit(MARK)
sre_compile.py(187):                 emit((group-1)*2+1)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(226):                 emit(JUMP)
sre_compile.py(227):                 tailappend(_len(code)); emit(0)
sre_compile.py(228):                 code[skip] = _len(code) - skip
sre_compile.py(222):             for av in av[1]:
sre_compile.py(229):             emit(FAILURE) # end of branch
sre_compile.py(230):             for tail in tail:
sre_compile.py(231):                 code[tail] = _len(code) - tail
sre_compile.py(230):             for tail in tail:
sre_compile.py(231):                 code[tail] = _len(code) - tail
sre_compile.py(230):             for tail in tail:
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(633):     code.append(SUCCESS)
sre_compile.py(635):     return code
sre_compile.py(794):     if flags & SRE_FLAG_DEBUG:
sre_compile.py(799):     groupindex = p.state.groupdict
sre_compile.py(800):     indexgroup = [None] * p.state.groups
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_compile.py(801):     for k, i in groupindex.items():
sre_compile.py(804):     return _sre.compile(
sre_compile.py(805):         pattern, flags | p.state.flags, code,
sre_compile.py(806):         p.state.groups-1,
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_compile.py(807):         groupindex, tuple(indexgroup)
sre_compile.py(804):     return _sre.compile(
re.py(304):     if not (flags & DEBUG):
 --- modulename: enum, funcname: __and__
enum.py(987):         if not isinstance(other, (self.__class__, int)):
enum.py(989):         return self.__class__(self._value_ & self.__class__(other)._value_)
 --- modulename: enum, funcname: __call__
enum.py(384):         if names is None:  # simple value lookup
enum.py(385):             return cls.__new__(cls, value)
 --- modulename: enum, funcname: __new__
enum.py(682):         if type(value) is cls:
enum.py(687):         try:
enum.py(688):             return cls._value2member_map_[value]
 --- modulename: enum, funcname: __call__
enum.py(384):         if names is None:  # simple value lookup
enum.py(385):             return cls.__new__(cls, value)
 --- modulename: enum, funcname: __new__
enum.py(682):         if type(value) is cls:
enum.py(687):         try:
enum.py(688):             return cls._value2member_map_[value]
re.py(305):         if len(_cache) >= _MAXCACHE:
re.py(311):         _cache[type(pattern), pattern, flags] = p
re.py(312):     return p
 --- modulename: _bootstrap, funcname: _find_and_load
<frozen importlib._bootstrap>(1024):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(166): <frozen importlib._bootstrap>(167):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(170):  --- modulename: _bootstrap, funcname: _get_module_lock
<frozen importlib._bootstrap>(185): <frozen importlib._bootstrap>(186): <frozen importlib._bootstrap>(187): <frozen importlib._bootstrap>(188): <frozen importlib._bootstrap>(189): <frozen importlib._bootstrap>(190): <frozen importlib._bootstrap>(192): <frozen importlib._bootstrap>(193): <frozen importlib._bootstrap>(196):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(72): <frozen importlib._bootstrap>(73): <frozen importlib._bootstrap>(74): <frozen importlib._bootstrap>(75): <frozen importlib._bootstrap>(76): <frozen importlib._bootstrap>(77): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(209): <frozen importlib._bootstrap>(211): <frozen importlib._bootstrap>(213): <frozen importlib._bootstrap>(171):  --- modulename: _bootstrap, funcname: acquire
<frozen importlib._bootstrap>(106): <frozen importlib._bootstrap>(107): <frozen importlib._bootstrap>(108): <frozen importlib._bootstrap>(109): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(111): <frozen importlib._bootstrap>(112): <frozen importlib._bootstrap>(113): <frozen importlib._bootstrap>(114): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(123): <frozen importlib._bootstrap>(1025): <frozen importlib._bootstrap>(1026): <frozen importlib._bootstrap>(1027):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked
<frozen importlib._bootstrap>(988): <frozen importlib._bootstrap>(989): <frozen importlib._bootstrap>(990): <frozen importlib._bootstrap>(1002):  --- modulename: _bootstrap, funcname: _find_spec
<frozen importlib._bootstrap>(923): <frozen importlib._bootstrap>(924): <frozen importlib._bootstrap>(929): <frozen importlib._bootstrap>(935): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap, funcname: find_spec
<frozen importlib._bootstrap>(748): <frozen importlib._bootstrap>(750): <frozen importlib._bootstrap>(753): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap, funcname: find_spec
<frozen importlib._bootstrap>(828): <frozen importlib._bootstrap>(831): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1437): <frozen importlib._bootstrap_external>(1438): <frozen importlib._bootstrap_external>(1439):  --- modulename: _bootstrap_external, funcname: _get_spec
<frozen importlib._bootstrap_external>(1404): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1365): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1580): <frozen importlib._bootstrap_external>(1585): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1415): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1580): <frozen importlib._bootstrap_external>(1585): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1415): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1580): <frozen importlib._bootstrap_external>(1585): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1415): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1580): <frozen importlib._bootstrap_external>(1585): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1415): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1580): <frozen importlib._bootstrap_external>(1585): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1415): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1580): <frozen importlib._bootstrap_external>(1585): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1415): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1580): <frozen importlib._bootstrap_external>(1585): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1415): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1580): <frozen importlib._bootstrap_external>(1585): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1415): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1427):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(359): <frozen importlib._bootstrap>(360): <frozen importlib._bootstrap>(361): <frozen importlib._bootstrap>(362): <frozen importlib._bootstrap>(363): <frozen importlib._bootstrap>(366): <frozen importlib._bootstrap>(367): <frozen importlib._bootstrap_external>(1428): <frozen importlib._bootstrap_external>(1429): <frozen importlib._bootstrap_external>(1440): <frozen importlib._bootstrap_external>(1442): <frozen importlib._bootstrap_external>(1443): <frozen importlib._bootstrap_external>(1444): <frozen importlib._bootstrap_external>(1451): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(965): <frozen importlib._bootstrap>(1003): <frozen importlib._bootstrap>(1004): <frozen importlib._bootstrap>(1024):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(174):  --- modulename: _bootstrap, funcname: release
<frozen importlib._bootstrap>(126): <frozen importlib._bootstrap>(127): <frozen importlib._bootstrap>(128): <frozen importlib._bootstrap>(130): <frozen importlib._bootstrap>(131): <frozen importlib._bootstrap>(132): <frozen importlib._bootstrap>(133): <frozen importlib._bootstrap>(134): <frozen importlib._bootstrap>(127):  --- modulename: _bootstrap, funcname: cb
<frozen importlib._bootstrap>(199): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(204): <frozen importlib._bootstrap>(205): <frozen importlib._bootstrap>(207): <frozen importlib._bootstrap_external>(1185): <frozen importlib._bootstrap_external>(1186): <frozen importlib._bootstrap_external>(1185):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap>(699): <frozen importlib._bootstrap>(700): <frozen importlib._bootstrap>(701):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap>(703): <frozen importlib._bootstrap>(705): <frozen importlib._bootstrap>(1007): <frozen importlib._bootstrap>(1009): <frozen importlib._bootstrap>(1010): <frozen importlib._bootstrap>(1011): <frozen importlib._bootstrap>(1012): <frozen importlib._bootstrap>(1016): <frozen importlib._bootstrap>(1024):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(174):  --- modulename: _bootstrap, funcname: release
<frozen importlib._bootstrap>(126): <frozen importlib._bootstrap>(127): <frozen importlib._bootstrap>(128): <frozen importlib._bootstrap>(130): <frozen importlib._bootstrap>(131): <frozen importlib._bootstrap>(132): <frozen importlib._bootstrap>(133): <frozen importlib._bootstrap>(134): <frozen importlib._bootstrap>(127):  --- modulename: _bootstrap, funcname: cb
<frozen importlib._bootstrap>(199): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(204): <frozen importlib._bootstrap>(205): <frozen importlib._bootstrap>(207): <frozen importlib._bootstrap>(1063): <frozen importlib._bootstrap>(1087): input_handler.py(3): from enum import Enum
input_handler.py(4): from error_codes import ErrorCodes
 --- modulename: _bootstrap, funcname: _find_and_load
<frozen importlib._bootstrap>(1024):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(166): <frozen importlib._bootstrap>(167):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(170):  --- modulename: _bootstrap, funcname: _get_module_lock
<frozen importlib._bootstrap>(185): <frozen importlib._bootstrap>(186): <frozen importlib._bootstrap>(187): <frozen importlib._bootstrap>(188): <frozen importlib._bootstrap>(189): <frozen importlib._bootstrap>(190): <frozen importlib._bootstrap>(192): <frozen importlib._bootstrap>(193): <frozen importlib._bootstrap>(196):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(72): <frozen importlib._bootstrap>(73): <frozen importlib._bootstrap>(74): <frozen importlib._bootstrap>(75): <frozen importlib._bootstrap>(76): <frozen importlib._bootstrap>(77): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(209): <frozen importlib._bootstrap>(211): <frozen importlib._bootstrap>(213): <frozen importlib._bootstrap>(171):  --- modulename: _bootstrap, funcname: acquire
<frozen importlib._bootstrap>(106): <frozen importlib._bootstrap>(107): <frozen importlib._bootstrap>(108): <frozen importlib._bootstrap>(109): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(111): <frozen importlib._bootstrap>(112): <frozen importlib._bootstrap>(113): <frozen importlib._bootstrap>(114): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(123): <frozen importlib._bootstrap>(1025): <frozen importlib._bootstrap>(1026): <frozen importlib._bootstrap>(1027):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked
<frozen importlib._bootstrap>(988): <frozen importlib._bootstrap>(989): <frozen importlib._bootstrap>(990): <frozen importlib._bootstrap>(1002):  --- modulename: _bootstrap, funcname: _find_spec
<frozen importlib._bootstrap>(923): <frozen importlib._bootstrap>(924): <frozen importlib._bootstrap>(929): <frozen importlib._bootstrap>(935): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap, funcname: find_spec
<frozen importlib._bootstrap>(748): <frozen importlib._bootstrap>(750): <frozen importlib._bootstrap>(753): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap, funcname: find_spec
<frozen importlib._bootstrap>(828): <frozen importlib._bootstrap>(831): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1437): <frozen importlib._bootstrap_external>(1438): <frozen importlib._bootstrap_external>(1439):  --- modulename: _bootstrap_external, funcname: _get_spec
<frozen importlib._bootstrap_external>(1404): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1365): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1577):  --- modulename: _bootstrap_external, funcname: _path_isfile
<frozen importlib._bootstrap_external>(161):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type
<frozen importlib._bootstrap_external>(152): <frozen importlib._bootstrap_external>(153):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(156): <frozen importlib._bootstrap_external>(1578): <frozen importlib._bootstrap_external>(1579): <frozen importlib._bootstrap_external>(1578):  --- modulename: _bootstrap_external, funcname: _get_spec
<frozen importlib._bootstrap_external>(1532):  --- modulename: _bootstrap_external, funcname: __init__
<frozen importlib._bootstrap_external>(1043): <frozen importlib._bootstrap_external>(1044): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1533):  --- modulename: _bootstrap_external, funcname: spec_from_file_location
<frozen importlib._bootstrap_external>(733): <frozen importlib._bootstrap_external>(745): <frozen importlib._bootstrap_external>(746):  --- modulename: _bootstrap_external, funcname: _path_isabs
<frozen importlib._bootstrap_external>(182): <frozen importlib._bootstrap_external>(758):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(359): <frozen importlib._bootstrap>(360): <frozen importlib._bootstrap>(361): <frozen importlib._bootstrap>(362): <frozen importlib._bootstrap>(363): <frozen importlib._bootstrap>(366): <frozen importlib._bootstrap>(367): <frozen importlib._bootstrap_external>(759): <frozen importlib._bootstrap_external>(762): <frozen importlib._bootstrap_external>(772): <frozen importlib._bootstrap_external>(783): <frozen importlib._bootstrap_external>(784): <frozen importlib._bootstrap_external>(789): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1416): <frozen importlib._bootstrap_external>(1417): <frozen importlib._bootstrap_external>(1440): <frozen importlib._bootstrap_external>(1442): <frozen importlib._bootstrap_external>(1453): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(948): <frozen importlib._bootstrap>(963): <frozen importlib._bootstrap>(1003): <frozen importlib._bootstrap>(1006):  --- modulename: _bootstrap, funcname: _load_unlocked
<frozen importlib._bootstrap>(666): <frozen importlib._bootstrap>(668): <frozen importlib._bootstrap>(674):  --- modulename: _bootstrap, funcname: module_from_spec
<frozen importlib._bootstrap>(567): <frozen importlib._bootstrap>(568): <frozen importlib._bootstrap>(571):  --- modulename: _bootstrap_external, funcname: create_module
<frozen importlib._bootstrap_external>(874): <frozen importlib._bootstrap>(575): <frozen importlib._bootstrap>(576):  --- modulename: _bootstrap, funcname: _new_module
<frozen importlib._bootstrap>(49): <frozen importlib._bootstrap>(577):  --- modulename: _bootstrap, funcname: _init_module_attrs
<frozen importlib._bootstrap>(496): <frozen importlib._bootstrap>(502): <frozen importlib._bootstrap>(503): <frozen importlib._bootstrap>(504): <frozen importlib._bootstrap>(525): <frozen importlib._bootstrap>(526): <frozen importlib._bootstrap>(530): <frozen importlib._bootstrap>(531): <frozen importlib._bootstrap>(532):  --- modulename: _bootstrap, funcname: parent
<frozen importlib._bootstrap>(407): <frozen importlib._bootstrap>(408): <frozen importlib._bootstrap>(536): <frozen importlib._bootstrap>(537): <frozen importlib._bootstrap>(541): <frozen importlib._bootstrap>(542): <frozen importlib._bootstrap>(548):  --- modulename: _bootstrap, funcname: has_location
<frozen importlib._bootstrap>(414): <frozen importlib._bootstrap>(549): <frozen importlib._bootstrap>(550): <frozen importlib._bootstrap>(551): <frozen importlib._bootstrap>(555): <frozen importlib._bootstrap>(556):  --- modulename: _bootstrap, funcname: cached
<frozen importlib._bootstrap>(393): <frozen importlib._bootstrap>(394): <frozen importlib._bootstrap>(395): <frozen importlib._bootstrap>(397):  --- modulename: _bootstrap_external, funcname: _get_cached
<frozen importlib._bootstrap_external>(511): <frozen importlib._bootstrap_external>(512): <frozen importlib._bootstrap_external>(513):  --- modulename: _bootstrap_external, funcname: cache_from_source
<frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(405): <frozen importlib._bootstrap_external>(406):  --- modulename: _bootstrap_external, funcname: _path_split
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134): <frozen importlib._bootstrap_external>(135): <frozen importlib._bootstrap_external>(137): <frozen importlib._bootstrap_external>(407): <frozen importlib._bootstrap_external>(408): <frozen importlib._bootstrap_external>(409): <frozen importlib._bootstrap_external>(411): <frozen importlib._bootstrap_external>(412): <frozen importlib._bootstrap_external>(413): <frozen importlib._bootstrap_external>(414): <frozen importlib._bootstrap_external>(417): <frozen importlib._bootstrap_external>(418): <frozen importlib._bootstrap_external>(422): <frozen importlib._bootstrap_external>(423): <frozen importlib._bootstrap_external>(448):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap>(398): <frozen importlib._bootstrap>(557): <frozen importlib._bootstrap>(558):  --- modulename: _bootstrap, funcname: cached
<frozen importlib._bootstrap>(393): <frozen importlib._bootstrap>(398): <frozen importlib._bootstrap>(561): <frozen importlib._bootstrap>(578): <frozen importlib._bootstrap>(679): <frozen importlib._bootstrap>(680): <frozen importlib._bootstrap>(681): <frozen importlib._bootstrap>(682): <frozen importlib._bootstrap>(683): <frozen importlib._bootstrap>(688):  --- modulename: _bootstrap_external, funcname: exec_module
<frozen importlib._bootstrap_external>(879):  --- modulename: _bootstrap_external, funcname: get_code
<frozen importlib._bootstrap_external>(957):  --- modulename: _bootstrap_external, funcname: _check_name_wrapper
<frozen importlib._bootstrap_external>(543): <frozen importlib._bootstrap_external>(545): <frozen importlib._bootstrap_external>(548):  --- modulename: _bootstrap_external, funcname: get_filename
<frozen importlib._bootstrap_external>(1068): <frozen importlib._bootstrap_external>(958): <frozen importlib._bootstrap_external>(959): <frozen importlib._bootstrap_external>(960): <frozen importlib._bootstrap_external>(961): <frozen importlib._bootstrap_external>(962): <frozen importlib._bootstrap_external>(963): <frozen importlib._bootstrap_external>(964):  --- modulename: _bootstrap_external, funcname: cache_from_source
<frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(405): <frozen importlib._bootstrap_external>(406):  --- modulename: _bootstrap_external, funcname: _path_split
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134): <frozen importlib._bootstrap_external>(135): <frozen importlib._bootstrap_external>(137): <frozen importlib._bootstrap_external>(407): <frozen importlib._bootstrap_external>(408): <frozen importlib._bootstrap_external>(409): <frozen importlib._bootstrap_external>(411): <frozen importlib._bootstrap_external>(412): <frozen importlib._bootstrap_external>(413): <frozen importlib._bootstrap_external>(414): <frozen importlib._bootstrap_external>(417): <frozen importlib._bootstrap_external>(418): <frozen importlib._bootstrap_external>(422): <frozen importlib._bootstrap_external>(423): <frozen importlib._bootstrap_external>(448):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(968): <frozen importlib._bootstrap_external>(969):  --- modulename: _bootstrap_external, funcname: path_stats
<frozen importlib._bootstrap_external>(1091):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1092): <frozen importlib._bootstrap_external>(973): <frozen importlib._bootstrap_external>(974): <frozen importlib._bootstrap_external>(975):  --- modulename: _bootstrap_external, funcname: get_data
<frozen importlib._bootstrap_external>(1072): <frozen importlib._bootstrap_external>(1073): <frozen importlib._bootstrap_external>(1074): <frozen importlib._bootstrap_external>(1073): <frozen importlib._bootstrap_external>(980): <frozen importlib._bootstrap_external>(981): <frozen importlib._bootstrap_external>(979): <frozen importlib._bootstrap_external>(983): <frozen importlib._bootstrap_external>(984):  --- modulename: _bootstrap_external, funcname: _classify_pyc
<frozen importlib._bootstrap_external>(601): <frozen importlib._bootstrap_external>(602): <frozen importlib._bootstrap_external>(606): <frozen importlib._bootstrap_external>(610):  --- modulename: _bootstrap_external, funcname: _unpack_uint32
<frozen importlib._bootstrap_external>(86): <frozen importlib._bootstrap_external>(87): <frozen importlib._bootstrap_external>(612): <frozen importlib._bootstrap_external>(615): <frozen importlib._bootstrap_external>(985): <frozen importlib._bootstrap_external>(986): <frozen importlib._bootstrap_external>(987): <frozen importlib._bootstrap_external>(1000): <frozen importlib._bootstrap_external>(1001): <frozen importlib._bootstrap_external>(1002): <frozen importlib._bootstrap_external>(1003): <frozen importlib._bootstrap_external>(1004): <frozen importlib._bootstrap_external>(1005): <frozen importlib._bootstrap_external>(1000):  --- modulename: _bootstrap_external, funcname: _validate_timestamp_pyc
<frozen importlib._bootstrap_external>(637):  --- modulename: _bootstrap_external, funcname: _unpack_uint32
<frozen importlib._bootstrap_external>(86): <frozen importlib._bootstrap_external>(87): <frozen importlib._bootstrap_external>(641): <frozen importlib._bootstrap_external>(642):  --- modulename: _bootstrap_external, funcname: _unpack_uint32
<frozen importlib._bootstrap_external>(86): <frozen importlib._bootstrap_external>(87): <frozen importlib._bootstrap_external>(1010): <frozen importlib._bootstrap_external>(1011): <frozen importlib._bootstrap_external>(1010):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1012): <frozen importlib._bootstrap_external>(1013): <frozen importlib._bootstrap_external>(1014): <frozen importlib._bootstrap_external>(1012):  --- modulename: _bootstrap_external, funcname: _compile_bytecode
<frozen importlib._bootstrap_external>(672): <frozen importlib._bootstrap_external>(673): <frozen importlib._bootstrap_external>(674):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(675): <frozen importlib._bootstrap_external>(676): <frozen importlib._bootstrap_external>(677): <frozen importlib._bootstrap_external>(880): <frozen importlib._bootstrap_external>(883):  --- modulename: _bootstrap, funcname: _call_with_frames_removed
<frozen importlib._bootstrap>(241):  --- modulename: error_codes, funcname: <module>
error_codes.py(1): class ErrorCodes:
 --- modulename: error_codes, funcname: ErrorCodes
error_codes.py(1): class ErrorCodes:
error_codes.py(2):     InputNotWellFormed = 31
error_codes.py(3):     InputStructureBad = 32
error_codes.py(5):     InputSemanticsBad = 52
error_codes.py(6):     VariableRedefinition = 52
error_codes.py(8):     OperandTypeBad = 53
error_codes.py(9):     VariableNotDefined = 54
error_codes.py(10):     FrameNotDefined = 55
error_codes.py(12):     MissingValue = 56
error_codes.py(13):     DataStackEmpty = 56
error_codes.py(15):     OperandValueBad = 57
error_codes.py(16):     StringError = 58
<frozen importlib._bootstrap>(699): <frozen importlib._bootstrap>(700): <frozen importlib._bootstrap>(701):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap>(703): <frozen importlib._bootstrap>(705): <frozen importlib._bootstrap>(1007): <frozen importlib._bootstrap>(1016): <frozen importlib._bootstrap>(1024):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(174):  --- modulename: _bootstrap, funcname: release
<frozen importlib._bootstrap>(126): <frozen importlib._bootstrap>(127): <frozen importlib._bootstrap>(128): <frozen importlib._bootstrap>(130): <frozen importlib._bootstrap>(131): <frozen importlib._bootstrap>(132): <frozen importlib._bootstrap>(133): <frozen importlib._bootstrap>(134): <frozen importlib._bootstrap>(127):  --- modulename: _bootstrap, funcname: cb
<frozen importlib._bootstrap>(199): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(204): <frozen importlib._bootstrap>(205): <frozen importlib._bootstrap>(207): input_handler.py(5): from debug import DEBUG_PRINT
 --- modulename: _bootstrap, funcname: _find_and_load
<frozen importlib._bootstrap>(1024):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(166): <frozen importlib._bootstrap>(167):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(170):  --- modulename: _bootstrap, funcname: _get_module_lock
<frozen importlib._bootstrap>(185): <frozen importlib._bootstrap>(186): <frozen importlib._bootstrap>(187): <frozen importlib._bootstrap>(188): <frozen importlib._bootstrap>(189): <frozen importlib._bootstrap>(190): <frozen importlib._bootstrap>(192): <frozen importlib._bootstrap>(193): <frozen importlib._bootstrap>(196):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(72): <frozen importlib._bootstrap>(73): <frozen importlib._bootstrap>(74): <frozen importlib._bootstrap>(75): <frozen importlib._bootstrap>(76): <frozen importlib._bootstrap>(77): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(209): <frozen importlib._bootstrap>(211): <frozen importlib._bootstrap>(213): <frozen importlib._bootstrap>(171):  --- modulename: _bootstrap, funcname: acquire
<frozen importlib._bootstrap>(106): <frozen importlib._bootstrap>(107): <frozen importlib._bootstrap>(108): <frozen importlib._bootstrap>(109): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(111): <frozen importlib._bootstrap>(112): <frozen importlib._bootstrap>(113): <frozen importlib._bootstrap>(114): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(123): <frozen importlib._bootstrap>(1025): <frozen importlib._bootstrap>(1026): <frozen importlib._bootstrap>(1027):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked
<frozen importlib._bootstrap>(988): <frozen importlib._bootstrap>(989): <frozen importlib._bootstrap>(990): <frozen importlib._bootstrap>(1002):  --- modulename: _bootstrap, funcname: _find_spec
<frozen importlib._bootstrap>(923): <frozen importlib._bootstrap>(924): <frozen importlib._bootstrap>(929): <frozen importlib._bootstrap>(935): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap, funcname: find_spec
<frozen importlib._bootstrap>(748): <frozen importlib._bootstrap>(750): <frozen importlib._bootstrap>(753): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap, funcname: find_spec
<frozen importlib._bootstrap>(828): <frozen importlib._bootstrap>(831): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1437): <frozen importlib._bootstrap_external>(1438): <frozen importlib._bootstrap_external>(1439):  --- modulename: _bootstrap_external, funcname: _get_spec
<frozen importlib._bootstrap_external>(1404): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1365): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1577):  --- modulename: _bootstrap_external, funcname: _path_isfile
<frozen importlib._bootstrap_external>(161):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type
<frozen importlib._bootstrap_external>(152): <frozen importlib._bootstrap_external>(153):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(156): <frozen importlib._bootstrap_external>(1578): <frozen importlib._bootstrap_external>(1579): <frozen importlib._bootstrap_external>(1578):  --- modulename: _bootstrap_external, funcname: _get_spec
<frozen importlib._bootstrap_external>(1532):  --- modulename: _bootstrap_external, funcname: __init__
<frozen importlib._bootstrap_external>(1043): <frozen importlib._bootstrap_external>(1044): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1533):  --- modulename: _bootstrap_external, funcname: spec_from_file_location
<frozen importlib._bootstrap_external>(733): <frozen importlib._bootstrap_external>(745): <frozen importlib._bootstrap_external>(746):  --- modulename: _bootstrap_external, funcname: _path_isabs
<frozen importlib._bootstrap_external>(182): <frozen importlib._bootstrap_external>(758):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(359): <frozen importlib._bootstrap>(360): <frozen importlib._bootstrap>(361): <frozen importlib._bootstrap>(362): <frozen importlib._bootstrap>(363): <frozen importlib._bootstrap>(366): <frozen importlib._bootstrap>(367): <frozen importlib._bootstrap_external>(759): <frozen importlib._bootstrap_external>(762): <frozen importlib._bootstrap_external>(772): <frozen importlib._bootstrap_external>(783): <frozen importlib._bootstrap_external>(784): <frozen importlib._bootstrap_external>(789): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1416): <frozen importlib._bootstrap_external>(1417): <frozen importlib._bootstrap_external>(1440): <frozen importlib._bootstrap_external>(1442): <frozen importlib._bootstrap_external>(1453): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(948): <frozen importlib._bootstrap>(963): <frozen importlib._bootstrap>(1003): <frozen importlib._bootstrap>(1006):  --- modulename: _bootstrap, funcname: _load_unlocked
<frozen importlib._bootstrap>(666): <frozen importlib._bootstrap>(668): <frozen importlib._bootstrap>(674):  --- modulename: _bootstrap, funcname: module_from_spec
<frozen importlib._bootstrap>(567): <frozen importlib._bootstrap>(568): <frozen importlib._bootstrap>(571):  --- modulename: _bootstrap_external, funcname: create_module
<frozen importlib._bootstrap_external>(874): <frozen importlib._bootstrap>(575): <frozen importlib._bootstrap>(576):  --- modulename: _bootstrap, funcname: _new_module
<frozen importlib._bootstrap>(49): <frozen importlib._bootstrap>(577):  --- modulename: _bootstrap, funcname: _init_module_attrs
<frozen importlib._bootstrap>(496): <frozen importlib._bootstrap>(502): <frozen importlib._bootstrap>(503): <frozen importlib._bootstrap>(504): <frozen importlib._bootstrap>(525): <frozen importlib._bootstrap>(526): <frozen importlib._bootstrap>(530): <frozen importlib._bootstrap>(531): <frozen importlib._bootstrap>(532):  --- modulename: _bootstrap, funcname: parent
<frozen importlib._bootstrap>(407): <frozen importlib._bootstrap>(408): <frozen importlib._bootstrap>(536): <frozen importlib._bootstrap>(537): <frozen importlib._bootstrap>(541): <frozen importlib._bootstrap>(542): <frozen importlib._bootstrap>(548):  --- modulename: _bootstrap, funcname: has_location
<frozen importlib._bootstrap>(414): <frozen importlib._bootstrap>(549): <frozen importlib._bootstrap>(550): <frozen importlib._bootstrap>(551): <frozen importlib._bootstrap>(555): <frozen importlib._bootstrap>(556):  --- modulename: _bootstrap, funcname: cached
<frozen importlib._bootstrap>(393): <frozen importlib._bootstrap>(394): <frozen importlib._bootstrap>(395): <frozen importlib._bootstrap>(397):  --- modulename: _bootstrap_external, funcname: _get_cached
<frozen importlib._bootstrap_external>(511): <frozen importlib._bootstrap_external>(512): <frozen importlib._bootstrap_external>(513):  --- modulename: _bootstrap_external, funcname: cache_from_source
<frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(405): <frozen importlib._bootstrap_external>(406):  --- modulename: _bootstrap_external, funcname: _path_split
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134): <frozen importlib._bootstrap_external>(135): <frozen importlib._bootstrap_external>(137): <frozen importlib._bootstrap_external>(407): <frozen importlib._bootstrap_external>(408): <frozen importlib._bootstrap_external>(409): <frozen importlib._bootstrap_external>(411): <frozen importlib._bootstrap_external>(412): <frozen importlib._bootstrap_external>(413): <frozen importlib._bootstrap_external>(414): <frozen importlib._bootstrap_external>(417): <frozen importlib._bootstrap_external>(418): <frozen importlib._bootstrap_external>(422): <frozen importlib._bootstrap_external>(423): <frozen importlib._bootstrap_external>(448):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap>(398): <frozen importlib._bootstrap>(557): <frozen importlib._bootstrap>(558):  --- modulename: _bootstrap, funcname: cached
<frozen importlib._bootstrap>(393): <frozen importlib._bootstrap>(398): <frozen importlib._bootstrap>(561): <frozen importlib._bootstrap>(578): <frozen importlib._bootstrap>(679): <frozen importlib._bootstrap>(680): <frozen importlib._bootstrap>(681): <frozen importlib._bootstrap>(682): <frozen importlib._bootstrap>(683): <frozen importlib._bootstrap>(688):  --- modulename: _bootstrap_external, funcname: exec_module
<frozen importlib._bootstrap_external>(879):  --- modulename: _bootstrap_external, funcname: get_code
<frozen importlib._bootstrap_external>(957):  --- modulename: _bootstrap_external, funcname: _check_name_wrapper
<frozen importlib._bootstrap_external>(543): <frozen importlib._bootstrap_external>(545): <frozen importlib._bootstrap_external>(548):  --- modulename: _bootstrap_external, funcname: get_filename
<frozen importlib._bootstrap_external>(1068): <frozen importlib._bootstrap_external>(958): <frozen importlib._bootstrap_external>(959): <frozen importlib._bootstrap_external>(960): <frozen importlib._bootstrap_external>(961): <frozen importlib._bootstrap_external>(962): <frozen importlib._bootstrap_external>(963): <frozen importlib._bootstrap_external>(964):  --- modulename: _bootstrap_external, funcname: cache_from_source
<frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(405): <frozen importlib._bootstrap_external>(406):  --- modulename: _bootstrap_external, funcname: _path_split
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134): <frozen importlib._bootstrap_external>(135): <frozen importlib._bootstrap_external>(137): <frozen importlib._bootstrap_external>(407): <frozen importlib._bootstrap_external>(408): <frozen importlib._bootstrap_external>(409): <frozen importlib._bootstrap_external>(411): <frozen importlib._bootstrap_external>(412): <frozen importlib._bootstrap_external>(413): <frozen importlib._bootstrap_external>(414): <frozen importlib._bootstrap_external>(417): <frozen importlib._bootstrap_external>(418): <frozen importlib._bootstrap_external>(422): <frozen importlib._bootstrap_external>(423): <frozen importlib._bootstrap_external>(448):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(968): <frozen importlib._bootstrap_external>(969):  --- modulename: _bootstrap_external, funcname: path_stats
<frozen importlib._bootstrap_external>(1091):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1092): <frozen importlib._bootstrap_external>(973): <frozen importlib._bootstrap_external>(974): <frozen importlib._bootstrap_external>(975):  --- modulename: _bootstrap_external, funcname: get_data
<frozen importlib._bootstrap_external>(1072): <frozen importlib._bootstrap_external>(1073): <frozen importlib._bootstrap_external>(1074): <frozen importlib._bootstrap_external>(1073): <frozen importlib._bootstrap_external>(980): <frozen importlib._bootstrap_external>(981): <frozen importlib._bootstrap_external>(979): <frozen importlib._bootstrap_external>(983): <frozen importlib._bootstrap_external>(984):  --- modulename: _bootstrap_external, funcname: _classify_pyc
<frozen importlib._bootstrap_external>(601): <frozen importlib._bootstrap_external>(602): <frozen importlib._bootstrap_external>(606): <frozen importlib._bootstrap_external>(610):  --- modulename: _bootstrap_external, funcname: _unpack_uint32
<frozen importlib._bootstrap_external>(86): <frozen importlib._bootstrap_external>(87): <frozen importlib._bootstrap_external>(612): <frozen importlib._bootstrap_external>(615): <frozen importlib._bootstrap_external>(985): <frozen importlib._bootstrap_external>(986): <frozen importlib._bootstrap_external>(987): <frozen importlib._bootstrap_external>(1000): <frozen importlib._bootstrap_external>(1001): <frozen importlib._bootstrap_external>(1002): <frozen importlib._bootstrap_external>(1003): <frozen importlib._bootstrap_external>(1004): <frozen importlib._bootstrap_external>(1005): <frozen importlib._bootstrap_external>(1000):  --- modulename: _bootstrap_external, funcname: _validate_timestamp_pyc
<frozen importlib._bootstrap_external>(637):  --- modulename: _bootstrap_external, funcname: _unpack_uint32
<frozen importlib._bootstrap_external>(86): <frozen importlib._bootstrap_external>(87): <frozen importlib._bootstrap_external>(641): <frozen importlib._bootstrap_external>(642):  --- modulename: _bootstrap_external, funcname: _unpack_uint32
<frozen importlib._bootstrap_external>(86): <frozen importlib._bootstrap_external>(87): <frozen importlib._bootstrap_external>(1010): <frozen importlib._bootstrap_external>(1011): <frozen importlib._bootstrap_external>(1010):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1012): <frozen importlib._bootstrap_external>(1013): <frozen importlib._bootstrap_external>(1014): <frozen importlib._bootstrap_external>(1012):  --- modulename: _bootstrap_external, funcname: _compile_bytecode
<frozen importlib._bootstrap_external>(672): <frozen importlib._bootstrap_external>(673): <frozen importlib._bootstrap_external>(674):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(675): <frozen importlib._bootstrap_external>(676): <frozen importlib._bootstrap_external>(677): <frozen importlib._bootstrap_external>(880): <frozen importlib._bootstrap_external>(883):  --- modulename: _bootstrap, funcname: _call_with_frames_removed
<frozen importlib._bootstrap>(241):  --- modulename: debug, funcname: <module>
debug.py(1): from config import DEBUG
 --- modulename: _bootstrap, funcname: _find_and_load
<frozen importlib._bootstrap>(1024):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(166): <frozen importlib._bootstrap>(167):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(170):  --- modulename: _bootstrap, funcname: _get_module_lock
<frozen importlib._bootstrap>(185): <frozen importlib._bootstrap>(186): <frozen importlib._bootstrap>(187): <frozen importlib._bootstrap>(188): <frozen importlib._bootstrap>(189): <frozen importlib._bootstrap>(190): <frozen importlib._bootstrap>(192): <frozen importlib._bootstrap>(193): <frozen importlib._bootstrap>(196):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(72): <frozen importlib._bootstrap>(73): <frozen importlib._bootstrap>(74): <frozen importlib._bootstrap>(75): <frozen importlib._bootstrap>(76): <frozen importlib._bootstrap>(77): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(209): <frozen importlib._bootstrap>(211): <frozen importlib._bootstrap>(213): <frozen importlib._bootstrap>(171):  --- modulename: _bootstrap, funcname: acquire
<frozen importlib._bootstrap>(106): <frozen importlib._bootstrap>(107): <frozen importlib._bootstrap>(108): <frozen importlib._bootstrap>(109): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(111): <frozen importlib._bootstrap>(112): <frozen importlib._bootstrap>(113): <frozen importlib._bootstrap>(114): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(123): <frozen importlib._bootstrap>(1025): <frozen importlib._bootstrap>(1026): <frozen importlib._bootstrap>(1027):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked
<frozen importlib._bootstrap>(988): <frozen importlib._bootstrap>(989): <frozen importlib._bootstrap>(990): <frozen importlib._bootstrap>(1002):  --- modulename: _bootstrap, funcname: _find_spec
<frozen importlib._bootstrap>(923): <frozen importlib._bootstrap>(924): <frozen importlib._bootstrap>(929): <frozen importlib._bootstrap>(935): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap, funcname: find_spec
<frozen importlib._bootstrap>(748): <frozen importlib._bootstrap>(750): <frozen importlib._bootstrap>(753): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap, funcname: find_spec
<frozen importlib._bootstrap>(828): <frozen importlib._bootstrap>(831): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1437): <frozen importlib._bootstrap_external>(1438): <frozen importlib._bootstrap_external>(1439):  --- modulename: _bootstrap_external, funcname: _get_spec
<frozen importlib._bootstrap_external>(1404): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1365): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1577):  --- modulename: _bootstrap_external, funcname: _path_isfile
<frozen importlib._bootstrap_external>(161):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type
<frozen importlib._bootstrap_external>(152): <frozen importlib._bootstrap_external>(153):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(156): <frozen importlib._bootstrap_external>(1578): <frozen importlib._bootstrap_external>(1579): <frozen importlib._bootstrap_external>(1578):  --- modulename: _bootstrap_external, funcname: _get_spec
<frozen importlib._bootstrap_external>(1532):  --- modulename: _bootstrap_external, funcname: __init__
<frozen importlib._bootstrap_external>(1043): <frozen importlib._bootstrap_external>(1044): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1533):  --- modulename: _bootstrap_external, funcname: spec_from_file_location
<frozen importlib._bootstrap_external>(733): <frozen importlib._bootstrap_external>(745): <frozen importlib._bootstrap_external>(746):  --- modulename: _bootstrap_external, funcname: _path_isabs
<frozen importlib._bootstrap_external>(182): <frozen importlib._bootstrap_external>(758):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(359): <frozen importlib._bootstrap>(360): <frozen importlib._bootstrap>(361): <frozen importlib._bootstrap>(362): <frozen importlib._bootstrap>(363): <frozen importlib._bootstrap>(366): <frozen importlib._bootstrap>(367): <frozen importlib._bootstrap_external>(759): <frozen importlib._bootstrap_external>(762): <frozen importlib._bootstrap_external>(772): <frozen importlib._bootstrap_external>(783): <frozen importlib._bootstrap_external>(784): <frozen importlib._bootstrap_external>(789): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1416): <frozen importlib._bootstrap_external>(1417): <frozen importlib._bootstrap_external>(1440): <frozen importlib._bootstrap_external>(1442): <frozen importlib._bootstrap_external>(1453): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(948): <frozen importlib._bootstrap>(963): <frozen importlib._bootstrap>(1003): <frozen importlib._bootstrap>(1006):  --- modulename: _bootstrap, funcname: _load_unlocked
<frozen importlib._bootstrap>(666): <frozen importlib._bootstrap>(668): <frozen importlib._bootstrap>(674):  --- modulename: _bootstrap, funcname: module_from_spec
<frozen importlib._bootstrap>(567): <frozen importlib._bootstrap>(568): <frozen importlib._bootstrap>(571):  --- modulename: _bootstrap_external, funcname: create_module
<frozen importlib._bootstrap_external>(874): <frozen importlib._bootstrap>(575): <frozen importlib._bootstrap>(576):  --- modulename: _bootstrap, funcname: _new_module
<frozen importlib._bootstrap>(49): <frozen importlib._bootstrap>(577):  --- modulename: _bootstrap, funcname: _init_module_attrs
<frozen importlib._bootstrap>(496): <frozen importlib._bootstrap>(502): <frozen importlib._bootstrap>(503): <frozen importlib._bootstrap>(504): <frozen importlib._bootstrap>(525): <frozen importlib._bootstrap>(526): <frozen importlib._bootstrap>(530): <frozen importlib._bootstrap>(531): <frozen importlib._bootstrap>(532):  --- modulename: _bootstrap, funcname: parent
<frozen importlib._bootstrap>(407): <frozen importlib._bootstrap>(408): <frozen importlib._bootstrap>(536): <frozen importlib._bootstrap>(537): <frozen importlib._bootstrap>(541): <frozen importlib._bootstrap>(542): <frozen importlib._bootstrap>(548):  --- modulename: _bootstrap, funcname: has_location
<frozen importlib._bootstrap>(414): <frozen importlib._bootstrap>(549): <frozen importlib._bootstrap>(550): <frozen importlib._bootstrap>(551): <frozen importlib._bootstrap>(555): <frozen importlib._bootstrap>(556):  --- modulename: _bootstrap, funcname: cached
<frozen importlib._bootstrap>(393): <frozen importlib._bootstrap>(394): <frozen importlib._bootstrap>(395): <frozen importlib._bootstrap>(397):  --- modulename: _bootstrap_external, funcname: _get_cached
<frozen importlib._bootstrap_external>(511): <frozen importlib._bootstrap_external>(512): <frozen importlib._bootstrap_external>(513):  --- modulename: _bootstrap_external, funcname: cache_from_source
<frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(405): <frozen importlib._bootstrap_external>(406):  --- modulename: _bootstrap_external, funcname: _path_split
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134): <frozen importlib._bootstrap_external>(135): <frozen importlib._bootstrap_external>(137): <frozen importlib._bootstrap_external>(407): <frozen importlib._bootstrap_external>(408): <frozen importlib._bootstrap_external>(409): <frozen importlib._bootstrap_external>(411): <frozen importlib._bootstrap_external>(412): <frozen importlib._bootstrap_external>(413): <frozen importlib._bootstrap_external>(414): <frozen importlib._bootstrap_external>(417): <frozen importlib._bootstrap_external>(418): <frozen importlib._bootstrap_external>(422): <frozen importlib._bootstrap_external>(423): <frozen importlib._bootstrap_external>(448):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap>(398): <frozen importlib._bootstrap>(557): <frozen importlib._bootstrap>(558):  --- modulename: _bootstrap, funcname: cached
<frozen importlib._bootstrap>(393): <frozen importlib._bootstrap>(398): <frozen importlib._bootstrap>(561): <frozen importlib._bootstrap>(578): <frozen importlib._bootstrap>(679): <frozen importlib._bootstrap>(680): <frozen importlib._bootstrap>(681): <frozen importlib._bootstrap>(682): <frozen importlib._bootstrap>(683): <frozen importlib._bootstrap>(688):  --- modulename: _bootstrap_external, funcname: exec_module
<frozen importlib._bootstrap_external>(879):  --- modulename: _bootstrap_external, funcname: get_code
<frozen importlib._bootstrap_external>(957):  --- modulename: _bootstrap_external, funcname: _check_name_wrapper
<frozen importlib._bootstrap_external>(543): <frozen importlib._bootstrap_external>(545): <frozen importlib._bootstrap_external>(548):  --- modulename: _bootstrap_external, funcname: get_filename
<frozen importlib._bootstrap_external>(1068): <frozen importlib._bootstrap_external>(958): <frozen importlib._bootstrap_external>(959): <frozen importlib._bootstrap_external>(960): <frozen importlib._bootstrap_external>(961): <frozen importlib._bootstrap_external>(962): <frozen importlib._bootstrap_external>(963): <frozen importlib._bootstrap_external>(964):  --- modulename: _bootstrap_external, funcname: cache_from_source
<frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(405): <frozen importlib._bootstrap_external>(406):  --- modulename: _bootstrap_external, funcname: _path_split
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134): <frozen importlib._bootstrap_external>(135): <frozen importlib._bootstrap_external>(137): <frozen importlib._bootstrap_external>(407): <frozen importlib._bootstrap_external>(408): <frozen importlib._bootstrap_external>(409): <frozen importlib._bootstrap_external>(411): <frozen importlib._bootstrap_external>(412): <frozen importlib._bootstrap_external>(413): <frozen importlib._bootstrap_external>(414): <frozen importlib._bootstrap_external>(417): <frozen importlib._bootstrap_external>(418): <frozen importlib._bootstrap_external>(422): <frozen importlib._bootstrap_external>(423): <frozen importlib._bootstrap_external>(448):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(968): <frozen importlib._bootstrap_external>(969):  --- modulename: _bootstrap_external, funcname: path_stats
<frozen importlib._bootstrap_external>(1091):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1092): <frozen importlib._bootstrap_external>(973): <frozen importlib._bootstrap_external>(974): <frozen importlib._bootstrap_external>(975):  --- modulename: _bootstrap_external, funcname: get_data
<frozen importlib._bootstrap_external>(1072): <frozen importlib._bootstrap_external>(1073): <frozen importlib._bootstrap_external>(1074): <frozen importlib._bootstrap_external>(1073): <frozen importlib._bootstrap_external>(980): <frozen importlib._bootstrap_external>(981): <frozen importlib._bootstrap_external>(979): <frozen importlib._bootstrap_external>(983): <frozen importlib._bootstrap_external>(984):  --- modulename: _bootstrap_external, funcname: _classify_pyc
<frozen importlib._bootstrap_external>(601): <frozen importlib._bootstrap_external>(602): <frozen importlib._bootstrap_external>(606): <frozen importlib._bootstrap_external>(610):  --- modulename: _bootstrap_external, funcname: _unpack_uint32
<frozen importlib._bootstrap_external>(86): <frozen importlib._bootstrap_external>(87): <frozen importlib._bootstrap_external>(612): <frozen importlib._bootstrap_external>(615): <frozen importlib._bootstrap_external>(985): <frozen importlib._bootstrap_external>(986): <frozen importlib._bootstrap_external>(987): <frozen importlib._bootstrap_external>(1000): <frozen importlib._bootstrap_external>(1001): <frozen importlib._bootstrap_external>(1002): <frozen importlib._bootstrap_external>(1003): <frozen importlib._bootstrap_external>(1004): <frozen importlib._bootstrap_external>(1005): <frozen importlib._bootstrap_external>(1000):  --- modulename: _bootstrap_external, funcname: _validate_timestamp_pyc
<frozen importlib._bootstrap_external>(637):  --- modulename: _bootstrap_external, funcname: _unpack_uint32
<frozen importlib._bootstrap_external>(86): <frozen importlib._bootstrap_external>(87): <frozen importlib._bootstrap_external>(641): <frozen importlib._bootstrap_external>(642):  --- modulename: _bootstrap_external, funcname: _unpack_uint32
<frozen importlib._bootstrap_external>(86): <frozen importlib._bootstrap_external>(87): <frozen importlib._bootstrap_external>(1010): <frozen importlib._bootstrap_external>(1011): <frozen importlib._bootstrap_external>(1010):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1012): <frozen importlib._bootstrap_external>(1013): <frozen importlib._bootstrap_external>(1014): <frozen importlib._bootstrap_external>(1012):  --- modulename: _bootstrap_external, funcname: _compile_bytecode
<frozen importlib._bootstrap_external>(672): <frozen importlib._bootstrap_external>(673): <frozen importlib._bootstrap_external>(674):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(675): <frozen importlib._bootstrap_external>(676): <frozen importlib._bootstrap_external>(677): <frozen importlib._bootstrap_external>(880): <frozen importlib._bootstrap_external>(883):  --- modulename: _bootstrap, funcname: _call_with_frames_removed
<frozen importlib._bootstrap>(241):  --- modulename: config, funcname: <module>
config.py(1): DEBUG=False
<frozen importlib._bootstrap>(699): <frozen importlib._bootstrap>(700): <frozen importlib._bootstrap>(701):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap>(703): <frozen importlib._bootstrap>(705): <frozen importlib._bootstrap>(1007): <frozen importlib._bootstrap>(1016): <frozen importlib._bootstrap>(1024):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(174):  --- modulename: _bootstrap, funcname: release
<frozen importlib._bootstrap>(126): <frozen importlib._bootstrap>(127): <frozen importlib._bootstrap>(128): <frozen importlib._bootstrap>(130): <frozen importlib._bootstrap>(131): <frozen importlib._bootstrap>(132): <frozen importlib._bootstrap>(133): <frozen importlib._bootstrap>(134): <frozen importlib._bootstrap>(127):  --- modulename: _bootstrap, funcname: cb
<frozen importlib._bootstrap>(199): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(204): <frozen importlib._bootstrap>(205): <frozen importlib._bootstrap>(207): debug.py(3): def DEBUG_PRINT(debug_msg: str) -> None:
<frozen importlib._bootstrap>(699): <frozen importlib._bootstrap>(700): <frozen importlib._bootstrap>(701):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap>(703): <frozen importlib._bootstrap>(705): <frozen importlib._bootstrap>(1007): <frozen importlib._bootstrap>(1016): <frozen importlib._bootstrap>(1024):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(174):  --- modulename: _bootstrap, funcname: release
<frozen importlib._bootstrap>(126): <frozen importlib._bootstrap>(127): <frozen importlib._bootstrap>(128): <frozen importlib._bootstrap>(130): <frozen importlib._bootstrap>(131): <frozen importlib._bootstrap>(132): <frozen importlib._bootstrap>(133): <frozen importlib._bootstrap>(134): <frozen importlib._bootstrap>(127):  --- modulename: _bootstrap, funcname: cb
<frozen importlib._bootstrap>(199): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(204): <frozen importlib._bootstrap>(205): <frozen importlib._bootstrap>(207): input_handler.py(6): import re
input_handler.py(9): class ArgumentType(Enum):
 --- modulename: enum, funcname: __prepare__
enum.py(168):         metacls._check_for_existing_members(cls, bases)
 --- modulename: enum, funcname: _check_for_existing_members
enum.py(571):         for chain in bases:
enum.py(572):             for base in chain.__mro__:
enum.py(573):                 if issubclass(base, Enum) and base._member_names_:
enum.py(572):             for base in chain.__mro__:
enum.py(573):                 if issubclass(base, Enum) and base._member_names_:
enum.py(572):             for base in chain.__mro__:
enum.py(571):         for chain in bases:
enum.py(170):         enum_dict = _EnumDict()
 --- modulename: enum, funcname: __init__
enum.py(83):         super().__init__()
enum.py(84):         self._member_names = []
enum.py(85):         self._last_values = []
enum.py(86):         self._ignore = []
enum.py(87):         self._auto_called = False
enum.py(171):         enum_dict._cls_name = cls
enum.py(173):         member_type, first_enum = metacls._get_mixins_(cls, bases)
 --- modulename: enum, funcname: _get_mixins_
enum.py(587):         if not bases:
enum.py(590):         def _find_data_type(bases):
enum.py(617):         first_enum = bases[-1]
enum.py(618):         if not issubclass(first_enum, Enum):
enum.py(621):         member_type = _find_data_type(bases) or object
 --- modulename: enum, funcname: _find_data_type
enum.py(591):             data_types = set()
enum.py(592):             for chain in bases:
enum.py(593):                 candidate = None
enum.py(594):                 for base in chain.__mro__:
enum.py(595):                     if base is object:
enum.py(597):                     elif issubclass(base, Enum):
enum.py(598):                         if base._member_type_ is not object:
enum.py(594):                 for base in chain.__mro__:
enum.py(595):                     if base is object:
enum.py(596):                         continue
enum.py(594):                 for base in chain.__mro__:
enum.py(592):             for chain in bases:
enum.py(608):             if len(data_types) > 1:
enum.py(610):             elif data_types:
enum.py(613):                 return None
enum.py(622):         if first_enum._member_names_:
enum.py(624):         return member_type, first_enum
enum.py(174):         if first_enum is not None:
enum.py(175):             enum_dict['_generate_next_value_'] = getattr(
enum.py(176):                     first_enum, '_generate_next_value_', None,
enum.py(175):             enum_dict['_generate_next_value_'] = getattr(
 --- modulename: enum, funcname: __setitem__
enum.py(98):         if _is_private(self._cls_name, key):
 --- modulename: enum, funcname: _is_private
enum.py(46):     pattern = '_%s__' % (cls_name, )
enum.py(47):     pat_len = len(pattern)
enum.py(49):             len(name) > pat_len
enum.py(50):             and name.startswith(pattern)
enum.py(49):             len(name) > pat_len
enum.py(56):         return False
enum.py(106):         if _is_sunder(key):
 --- modulename: enum, funcname: _is_sunder
enum.py(38):             len(name) > 2 and
enum.py(39):             name[0] == name[-1] == '_' and
enum.py(38):             len(name) > 2 and
enum.py(40):             name[1:2] != '_' and
enum.py(38):             len(name) > 2 and
enum.py(41):             name[-2:-1] != '_'
enum.py(37):     return (
enum.py(107):             if key not in (
enum.py(112):             if key == '_generate_next_value_':
enum.py(114):                 if self._auto_called:
enum.py(116):                 setattr(self, '_generate_next_value', value)
enum.py(153):         super().__setitem__(key, value)
enum.py(178):         return enum_dict
 --- modulename: input_handler, funcname: ArgumentType
input_handler.py(9): class ArgumentType(Enum):
 --- modulename: enum, funcname: __setitem__
enum.py(98):         if _is_private(self._cls_name, key):
 --- modulename: enum, funcname: _is_private
enum.py(46):     pattern = '_%s__' % (cls_name, )
enum.py(47):     pat_len = len(pattern)
enum.py(49):             len(name) > pat_len
enum.py(56):         return False
enum.py(106):         if _is_sunder(key):
 --- modulename: enum, funcname: _is_sunder
enum.py(38):             len(name) > 2 and
enum.py(39):             name[0] == name[-1] == '_' and
enum.py(38):             len(name) > 2 and
enum.py(40):             name[1:2] != '_' and
enum.py(38):             len(name) > 2 and
enum.py(37):     return (
enum.py(129):         elif _is_dunder(key):
 --- modulename: enum, funcname: _is_dunder
enum.py(27):             len(name) > 4 and
enum.py(28):             name[:2] == name[-2:] == '__' and
enum.py(27):             len(name) > 4 and
enum.py(29):             name[2] != '_' and
enum.py(27):             len(name) > 4 and
enum.py(30):             name[-3] != '_'
enum.py(26):     return (
enum.py(130):             if key == '__order__':
enum.py(153):         super().__setitem__(key, value)
 --- modulename: enum, funcname: __setitem__
enum.py(98):         if _is_private(self._cls_name, key):
 --- modulename: enum, funcname: _is_private
enum.py(46):     pattern = '_%s__' % (cls_name, )
enum.py(47):     pat_len = len(pattern)
enum.py(49):             len(name) > pat_len
enum.py(56):         return False
enum.py(106):         if _is_sunder(key):
 --- modulename: enum, funcname: _is_sunder
enum.py(38):             len(name) > 2 and
enum.py(39):             name[0] == name[-1] == '_' and
enum.py(38):             len(name) > 2 and
enum.py(40):             name[1:2] != '_' and
enum.py(38):             len(name) > 2 and
enum.py(37):     return (
enum.py(129):         elif _is_dunder(key):
 --- modulename: enum, funcname: _is_dunder
enum.py(27):             len(name) > 4 and
enum.py(28):             name[:2] == name[-2:] == '__' and
enum.py(27):             len(name) > 4 and
enum.py(29):             name[2] != '_' and
enum.py(27):             len(name) > 4 and
enum.py(30):             name[-3] != '_'
enum.py(26):     return (
enum.py(130):             if key == '__order__':
enum.py(153):         super().__setitem__(key, value)
input_handler.py(10):     LABEL = 1
 --- modulename: enum, funcname: __setitem__
enum.py(98):         if _is_private(self._cls_name, key):
 --- modulename: enum, funcname: _is_private
enum.py(46):     pattern = '_%s__' % (cls_name, )
enum.py(47):     pat_len = len(pattern)
enum.py(49):             len(name) > pat_len
enum.py(56):         return False
enum.py(106):         if _is_sunder(key):
 --- modulename: enum, funcname: _is_sunder
enum.py(38):             len(name) > 2 and
enum.py(39):             name[0] == name[-1] == '_' and
enum.py(38):             len(name) > 2 and
enum.py(37):     return (
enum.py(129):         elif _is_dunder(key):
 --- modulename: enum, funcname: _is_dunder
enum.py(27):             len(name) > 4 and
enum.py(28):             name[:2] == name[-2:] == '__' and
enum.py(27):             len(name) > 4 and
enum.py(26):     return (
enum.py(132):         elif key in self._member_names:
enum.py(135):         elif key in self._ignore:
enum.py(137):         elif not _is_descriptor(value):
 --- modulename: enum, funcname: _is_descriptor
enum.py(17):             hasattr(obj, '__get__') or
enum.py(18):             hasattr(obj, '__set__') or
enum.py(17):             hasattr(obj, '__get__') or
enum.py(19):             hasattr(obj, '__delete__')
enum.py(16):     return (
enum.py(138):             if key in self:
enum.py(141):             if isinstance(value, auto):
enum.py(151):             self._member_names.append(key)
enum.py(152):             self._last_values.append(value)
enum.py(153):         super().__setitem__(key, value)
input_handler.py(11):     TYPE = 2
 --- modulename: enum, funcname: __setitem__
enum.py(98):         if _is_private(self._cls_name, key):
 --- modulename: enum, funcname: _is_private
enum.py(46):     pattern = '_%s__' % (cls_name, )
enum.py(47):     pat_len = len(pattern)
enum.py(49):             len(name) > pat_len
enum.py(56):         return False
enum.py(106):         if _is_sunder(key):
 --- modulename: enum, funcname: _is_sunder
enum.py(38):             len(name) > 2 and
enum.py(39):             name[0] == name[-1] == '_' and
enum.py(38):             len(name) > 2 and
enum.py(37):     return (
enum.py(129):         elif _is_dunder(key):
 --- modulename: enum, funcname: _is_dunder
enum.py(27):             len(name) > 4 and
enum.py(26):     return (
enum.py(132):         elif key in self._member_names:
enum.py(135):         elif key in self._ignore:
enum.py(137):         elif not _is_descriptor(value):
 --- modulename: enum, funcname: _is_descriptor
enum.py(17):             hasattr(obj, '__get__') or
enum.py(18):             hasattr(obj, '__set__') or
enum.py(17):             hasattr(obj, '__get__') or
enum.py(19):             hasattr(obj, '__delete__')
enum.py(16):     return (
enum.py(138):             if key in self:
enum.py(141):             if isinstance(value, auto):
enum.py(151):             self._member_names.append(key)
enum.py(152):             self._last_values.append(value)
enum.py(153):         super().__setitem__(key, value)
input_handler.py(12):     VAR = 3
 --- modulename: enum, funcname: __setitem__
enum.py(98):         if _is_private(self._cls_name, key):
 --- modulename: enum, funcname: _is_private
enum.py(46):     pattern = '_%s__' % (cls_name, )
enum.py(47):     pat_len = len(pattern)
enum.py(49):             len(name) > pat_len
enum.py(56):         return False
enum.py(106):         if _is_sunder(key):
 --- modulename: enum, funcname: _is_sunder
enum.py(38):             len(name) > 2 and
enum.py(39):             name[0] == name[-1] == '_' and
enum.py(38):             len(name) > 2 and
enum.py(37):     return (
enum.py(129):         elif _is_dunder(key):
 --- modulename: enum, funcname: _is_dunder
enum.py(27):             len(name) > 4 and
enum.py(26):     return (
enum.py(132):         elif key in self._member_names:
enum.py(135):         elif key in self._ignore:
enum.py(137):         elif not _is_descriptor(value):
 --- modulename: enum, funcname: _is_descriptor
enum.py(17):             hasattr(obj, '__get__') or
enum.py(18):             hasattr(obj, '__set__') or
enum.py(17):             hasattr(obj, '__get__') or
enum.py(19):             hasattr(obj, '__delete__')
enum.py(16):     return (
enum.py(138):             if key in self:
enum.py(141):             if isinstance(value, auto):
enum.py(151):             self._member_names.append(key)
enum.py(152):             self._last_values.append(value)
enum.py(153):         super().__setitem__(key, value)
input_handler.py(13):     SYMB = 4
 --- modulename: enum, funcname: __setitem__
enum.py(98):         if _is_private(self._cls_name, key):
 --- modulename: enum, funcname: _is_private
enum.py(46):     pattern = '_%s__' % (cls_name, )
enum.py(47):     pat_len = len(pattern)
enum.py(49):             len(name) > pat_len
enum.py(56):         return False
enum.py(106):         if _is_sunder(key):
 --- modulename: enum, funcname: _is_sunder
enum.py(38):             len(name) > 2 and
enum.py(39):             name[0] == name[-1] == '_' and
enum.py(38):             len(name) > 2 and
enum.py(37):     return (
enum.py(129):         elif _is_dunder(key):
 --- modulename: enum, funcname: _is_dunder
enum.py(27):             len(name) > 4 and
enum.py(26):     return (
enum.py(132):         elif key in self._member_names:
enum.py(135):         elif key in self._ignore:
enum.py(137):         elif not _is_descriptor(value):
 --- modulename: enum, funcname: _is_descriptor
enum.py(17):             hasattr(obj, '__get__') or
enum.py(18):             hasattr(obj, '__set__') or
enum.py(17):             hasattr(obj, '__get__') or
enum.py(19):             hasattr(obj, '__delete__')
enum.py(16):     return (
enum.py(138):             if key in self:
enum.py(141):             if isinstance(value, auto):
enum.py(151):             self._member_names.append(key)
enum.py(152):             self._last_values.append(value)
enum.py(153):         super().__setitem__(key, value)
input_handler.py(15):     @staticmethod
input_handler.py(16):     def convert_to_enum(arg_type: str) -> "ArgumentType":
 --- modulename: enum, funcname: __setitem__
enum.py(98):         if _is_private(self._cls_name, key):
 --- modulename: enum, funcname: _is_private
enum.py(46):     pattern = '_%s__' % (cls_name, )
enum.py(47):     pat_len = len(pattern)
enum.py(49):             len(name) > pat_len
enum.py(56):         return False
enum.py(106):         if _is_sunder(key):
 --- modulename: enum, funcname: _is_sunder
enum.py(38):             len(name) > 2 and
enum.py(39):             name[0] == name[-1] == '_' and
enum.py(38):             len(name) > 2 and
enum.py(37):     return (
enum.py(129):         elif _is_dunder(key):
 --- modulename: enum, funcname: _is_dunder
enum.py(27):             len(name) > 4 and
enum.py(28):             name[:2] == name[-2:] == '__' and
enum.py(27):             len(name) > 4 and
enum.py(26):     return (
enum.py(132):         elif key in self._member_names:
enum.py(135):         elif key in self._ignore:
enum.py(137):         elif not _is_descriptor(value):
 --- modulename: enum, funcname: _is_descriptor
enum.py(17):             hasattr(obj, '__get__') or
enum.py(16):     return (
enum.py(153):         super().__setitem__(key, value)
input_handler.py(27):     def __str__(self):
 --- modulename: enum, funcname: __setitem__
enum.py(98):         if _is_private(self._cls_name, key):
 --- modulename: enum, funcname: _is_private
enum.py(46):     pattern = '_%s__' % (cls_name, )
enum.py(47):     pat_len = len(pattern)
enum.py(49):             len(name) > pat_len
enum.py(56):         return False
enum.py(106):         if _is_sunder(key):
 --- modulename: enum, funcname: _is_sunder
enum.py(38):             len(name) > 2 and
enum.py(39):             name[0] == name[-1] == '_' and
enum.py(38):             len(name) > 2 and
enum.py(40):             name[1:2] != '_' and
enum.py(38):             len(name) > 2 and
enum.py(37):     return (
enum.py(129):         elif _is_dunder(key):
 --- modulename: enum, funcname: _is_dunder
enum.py(27):             len(name) > 4 and
enum.py(28):             name[:2] == name[-2:] == '__' and
enum.py(27):             len(name) > 4 and
enum.py(29):             name[2] != '_' and
enum.py(27):             len(name) > 4 and
enum.py(30):             name[-3] != '_'
enum.py(26):     return (
enum.py(130):             if key == '__order__':
enum.py(153):         super().__setitem__(key, value)
 --- modulename: enum, funcname: __new__
enum.py(187):         classdict.setdefault('_ignore_', []).append('_ignore_')
enum.py(188):         ignore = classdict['_ignore_']
enum.py(189):         for key in ignore:
enum.py(190):             classdict.pop(key, None)
enum.py(189):         for key in ignore:
enum.py(191):         member_type, first_enum = metacls._get_mixins_(cls, bases)
 --- modulename: enum, funcname: _get_mixins_
enum.py(587):         if not bases:
enum.py(590):         def _find_data_type(bases):
enum.py(617):         first_enum = bases[-1]
enum.py(618):         if not issubclass(first_enum, Enum):
enum.py(621):         member_type = _find_data_type(bases) or object
 --- modulename: enum, funcname: _find_data_type
enum.py(591):             data_types = set()
enum.py(592):             for chain in bases:
enum.py(593):                 candidate = None
enum.py(594):                 for base in chain.__mro__:
enum.py(595):                     if base is object:
enum.py(597):                     elif issubclass(base, Enum):
enum.py(598):                         if base._member_type_ is not object:
enum.py(594):                 for base in chain.__mro__:
enum.py(595):                     if base is object:
enum.py(596):                         continue
enum.py(594):                 for base in chain.__mro__:
enum.py(592):             for chain in bases:
enum.py(608):             if len(data_types) > 1:
enum.py(610):             elif data_types:
enum.py(613):                 return None
enum.py(622):         if first_enum._member_names_:
enum.py(624):         return member_type, first_enum
enum.py(192):         __new__, save_new, use_args = metacls._find_new_(
enum.py(193):                 classdict, member_type, first_enum,
enum.py(192):         __new__, save_new, use_args = metacls._find_new_(
 --- modulename: enum, funcname: _find_new_
enum.py(638):         __new__ = classdict.get('__new__', None)
enum.py(641):         save_new = __new__ is not None
enum.py(643):         if __new__ is None:
enum.py(646):             for method in ('__new_member__', '__new__'):
enum.py(647):                 for possible in (member_type, first_enum):
enum.py(648):                     target = getattr(possible, method, None)
enum.py(649):                     if target not in {
enum.py(650):                             None,
enum.py(651):                             None.__new__,
enum.py(652):                             object.__new__,
enum.py(653):                             Enum.__new__,
enum.py(649):                     if target not in {
enum.py(647):                 for possible in (member_type, first_enum):
enum.py(648):                     target = getattr(possible, method, None)
 --- modulename: enum, funcname: __getattr__
enum.py(432):         if _is_dunder(name):
 --- modulename: enum, funcname: _is_dunder
enum.py(27):             len(name) > 4 and
enum.py(28):             name[:2] == name[-2:] == '__' and
enum.py(27):             len(name) > 4 and
enum.py(29):             name[2] != '_' and
enum.py(27):             len(name) > 4 and
enum.py(30):             name[-3] != '_'
enum.py(26):     return (
enum.py(433):             raise AttributeError(name)
enum.py(649):                     if target not in {
enum.py(650):                             None,
enum.py(651):                             None.__new__,
enum.py(652):                             object.__new__,
enum.py(653):                             Enum.__new__,
enum.py(649):                     if target not in {
enum.py(647):                 for possible in (member_type, first_enum):
enum.py(657):                 if __new__ is not None:
enum.py(646):             for method in ('__new_member__', '__new__'):
enum.py(647):                 for possible in (member_type, first_enum):
enum.py(648):                     target = getattr(possible, method, None)
enum.py(649):                     if target not in {
enum.py(650):                             None,
enum.py(651):                             None.__new__,
enum.py(652):                             object.__new__,
enum.py(653):                             Enum.__new__,
enum.py(649):                     if target not in {
enum.py(647):                 for possible in (member_type, first_enum):
enum.py(648):                     target = getattr(possible, method, None)
enum.py(649):                     if target not in {
enum.py(650):                             None,
enum.py(651):                             None.__new__,
enum.py(652):                             object.__new__,
enum.py(653):                             Enum.__new__,
enum.py(649):                     if target not in {
enum.py(647):                 for possible in (member_type, first_enum):
enum.py(657):                 if __new__ is not None:
enum.py(646):             for method in ('__new_member__', '__new__'):
enum.py(660):                 __new__ = object.__new__
enum.py(665):         if __new__ is object.__new__:
enum.py(666):             use_args = False
enum.py(669):         return __new__, save_new, use_args
enum.py(198):         enum_members = {k: classdict[k] for k in classdict._member_names}
 --- modulename: enum, funcname: <dictcomp>
enum.py(198):         enum_members = {k: classdict[k] for k in classdict._member_names}
enum.py(198):         enum_members = {k: classdict[k] for k in classdict._member_names}
enum.py(198):         enum_members = {k: classdict[k] for k in classdict._member_names}
enum.py(198):         enum_members = {k: classdict[k] for k in classdict._member_names}
enum.py(198):         enum_members = {k: classdict[k] for k in classdict._member_names}
enum.py(199):         for name in classdict._member_names:
enum.py(200):             del classdict[name]
enum.py(199):         for name in classdict._member_names:
enum.py(200):             del classdict[name]
enum.py(199):         for name in classdict._member_names:
enum.py(200):             del classdict[name]
enum.py(199):         for name in classdict._member_names:
enum.py(200):             del classdict[name]
enum.py(199):         for name in classdict._member_names:
enum.py(203):         _order_ = classdict.pop('_order_', None)
enum.py(206):         invalid_names = set(enum_members) & {'mro', ''}
enum.py(207):         if invalid_names:
enum.py(212):         if '__doc__' not in classdict:
enum.py(213):             classdict['__doc__'] = 'An enumeration.'
 --- modulename: enum, funcname: __setitem__
enum.py(98):         if _is_private(self._cls_name, key):
 --- modulename: enum, funcname: _is_private
enum.py(46):     pattern = '_%s__' % (cls_name, )
enum.py(47):     pat_len = len(pattern)
enum.py(49):             len(name) > pat_len
enum.py(56):         return False
enum.py(106):         if _is_sunder(key):
 --- modulename: enum, funcname: _is_sunder
enum.py(38):             len(name) > 2 and
enum.py(39):             name[0] == name[-1] == '_' and
enum.py(38):             len(name) > 2 and
enum.py(40):             name[1:2] != '_' and
enum.py(38):             len(name) > 2 and
enum.py(37):     return (
enum.py(129):         elif _is_dunder(key):
 --- modulename: enum, funcname: _is_dunder
enum.py(27):             len(name) > 4 and
enum.py(28):             name[:2] == name[-2:] == '__' and
enum.py(27):             len(name) > 4 and
enum.py(29):             name[2] != '_' and
enum.py(27):             len(name) > 4 and
enum.py(30):             name[-3] != '_'
enum.py(26):     return (
enum.py(130):             if key == '__order__':
enum.py(153):         super().__setitem__(key, value)
enum.py(215):         enum_class = super().__new__(metacls, cls, bases, classdict, **kwds)
enum.py(216):         enum_class._member_names_ = []               # names in definition order
 --- modulename: enum, funcname: __setattr__
enum.py(478):         member_map = cls.__dict__.get('_member_map_', {})
enum.py(479):         if name in member_map:
enum.py(481):         super().__setattr__(name, value)
enum.py(217):         enum_class._member_map_ = {}                 # name->value map
 --- modulename: enum, funcname: __setattr__
enum.py(478):         member_map = cls.__dict__.get('_member_map_', {})
enum.py(479):         if name in member_map:
enum.py(481):         super().__setattr__(name, value)
enum.py(218):         enum_class._member_type_ = member_type
 --- modulename: enum, funcname: __setattr__
enum.py(478):         member_map = cls.__dict__.get('_member_map_', {})
enum.py(479):         if name in member_map:
enum.py(481):         super().__setattr__(name, value)
enum.py(222):         dynamic_attributes = {
enum.py(223):                 k for c in enum_class.mro()
enum.py(222):         dynamic_attributes = {
 --- modulename: enum, funcname: <setcomp>
enum.py(222):         dynamic_attributes = {
enum.py(223):                 k for c in enum_class.mro()
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(223):                 k for c in enum_class.mro()
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(223):                 k for c in enum_class.mro()
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(223):                 k for c in enum_class.mro()
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(223):                 k for c in enum_class.mro()
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(224):                 for k, v in c.__dict__.items()
enum.py(225):                 if isinstance(v, DynamicClassAttribute)
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(222):         dynamic_attributes = {
enum.py(229):         enum_class._value2member_map_ = {}
 --- modulename: enum, funcname: __setattr__
enum.py(478):         member_map = cls.__dict__.get('_member_map_', {})
enum.py(479):         if name in member_map:
enum.py(481):         super().__setattr__(name, value)
enum.py(241):         if '__reduce_ex__' not in classdict:
enum.py(242):             if member_type is not object:
enum.py(276):         for member_name in classdict._member_names:
enum.py(277):             value = enum_members[member_name]
enum.py(278):             if not isinstance(value, tuple):
enum.py(279):                 args = (value, )
enum.py(282):             if member_type is tuple:   # special case for tuple enums
enum.py(284):             if not use_args:
enum.py(285):                 enum_member = __new__(enum_class)
enum.py(286):                 if not hasattr(enum_member, '_value_'):
enum.py(287):                     enum_member._value_ = value
enum.py(295):             value = enum_member._value_
enum.py(296):             enum_member._name_ = member_name
enum.py(297):             enum_member.__objclass__ = enum_class
enum.py(298):             enum_member.__init__(*args)
enum.py(301):             for name, canonical_member in enum_class._member_map_.items():
enum.py(307):                 enum_class._member_names_.append(member_name)
enum.py(310):             if member_name not in dynamic_attributes:
enum.py(311):                 setattr(enum_class, member_name, enum_member)
 --- modulename: enum, funcname: __setattr__
enum.py(478):         member_map = cls.__dict__.get('_member_map_', {})
enum.py(479):         if name in member_map:
enum.py(481):         super().__setattr__(name, value)
enum.py(313):             enum_class._member_map_[member_name] = enum_member
enum.py(314):             try:
enum.py(318):                 enum_class._value2member_map_[value] = enum_member
enum.py(276):         for member_name in classdict._member_names:
enum.py(277):             value = enum_members[member_name]
enum.py(278):             if not isinstance(value, tuple):
enum.py(279):                 args = (value, )
enum.py(282):             if member_type is tuple:   # special case for tuple enums
enum.py(284):             if not use_args:
enum.py(285):                 enum_member = __new__(enum_class)
enum.py(286):                 if not hasattr(enum_member, '_value_'):
enum.py(287):                     enum_member._value_ = value
enum.py(295):             value = enum_member._value_
enum.py(296):             enum_member._name_ = member_name
enum.py(297):             enum_member.__objclass__ = enum_class
enum.py(298):             enum_member.__init__(*args)
enum.py(301):             for name, canonical_member in enum_class._member_map_.items():
enum.py(302):                 if canonical_member._value_ == enum_member._value_:
enum.py(301):             for name, canonical_member in enum_class._member_map_.items():
enum.py(307):                 enum_class._member_names_.append(member_name)
enum.py(310):             if member_name not in dynamic_attributes:
enum.py(311):                 setattr(enum_class, member_name, enum_member)
 --- modulename: enum, funcname: __setattr__
enum.py(478):         member_map = cls.__dict__.get('_member_map_', {})
enum.py(479):         if name in member_map:
enum.py(481):         super().__setattr__(name, value)
enum.py(313):             enum_class._member_map_[member_name] = enum_member
enum.py(314):             try:
enum.py(318):                 enum_class._value2member_map_[value] = enum_member
enum.py(276):         for member_name in classdict._member_names:
enum.py(277):             value = enum_members[member_name]
enum.py(278):             if not isinstance(value, tuple):
enum.py(279):                 args = (value, )
enum.py(282):             if member_type is tuple:   # special case for tuple enums
enum.py(284):             if not use_args:
enum.py(285):                 enum_member = __new__(enum_class)
enum.py(286):                 if not hasattr(enum_member, '_value_'):
enum.py(287):                     enum_member._value_ = value
enum.py(295):             value = enum_member._value_
enum.py(296):             enum_member._name_ = member_name
enum.py(297):             enum_member.__objclass__ = enum_class
enum.py(298):             enum_member.__init__(*args)
enum.py(301):             for name, canonical_member in enum_class._member_map_.items():
enum.py(302):                 if canonical_member._value_ == enum_member._value_:
enum.py(301):             for name, canonical_member in enum_class._member_map_.items():
enum.py(302):                 if canonical_member._value_ == enum_member._value_:
enum.py(301):             for name, canonical_member in enum_class._member_map_.items():
enum.py(307):                 enum_class._member_names_.append(member_name)
enum.py(310):             if member_name not in dynamic_attributes:
enum.py(311):                 setattr(enum_class, member_name, enum_member)
 --- modulename: enum, funcname: __setattr__
enum.py(478):         member_map = cls.__dict__.get('_member_map_', {})
enum.py(479):         if name in member_map:
enum.py(481):         super().__setattr__(name, value)
enum.py(313):             enum_class._member_map_[member_name] = enum_member
enum.py(314):             try:
enum.py(318):                 enum_class._value2member_map_[value] = enum_member
enum.py(276):         for member_name in classdict._member_names:
enum.py(277):             value = enum_members[member_name]
enum.py(278):             if not isinstance(value, tuple):
enum.py(279):                 args = (value, )
enum.py(282):             if member_type is tuple:   # special case for tuple enums
enum.py(284):             if not use_args:
enum.py(285):                 enum_member = __new__(enum_class)
enum.py(286):                 if not hasattr(enum_member, '_value_'):
enum.py(287):                     enum_member._value_ = value
enum.py(295):             value = enum_member._value_
enum.py(296):             enum_member._name_ = member_name
enum.py(297):             enum_member.__objclass__ = enum_class
enum.py(298):             enum_member.__init__(*args)
enum.py(301):             for name, canonical_member in enum_class._member_map_.items():
enum.py(302):                 if canonical_member._value_ == enum_member._value_:
enum.py(301):             for name, canonical_member in enum_class._member_map_.items():
enum.py(302):                 if canonical_member._value_ == enum_member._value_:
enum.py(301):             for name, canonical_member in enum_class._member_map_.items():
enum.py(302):                 if canonical_member._value_ == enum_member._value_:
enum.py(301):             for name, canonical_member in enum_class._member_map_.items():
enum.py(307):                 enum_class._member_names_.append(member_name)
enum.py(310):             if member_name not in dynamic_attributes:
enum.py(311):                 setattr(enum_class, member_name, enum_member)
 --- modulename: enum, funcname: __setattr__
enum.py(478):         member_map = cls.__dict__.get('_member_map_', {})
enum.py(479):         if name in member_map:
enum.py(481):         super().__setattr__(name, value)
enum.py(313):             enum_class._member_map_[member_name] = enum_member
enum.py(314):             try:
enum.py(318):                 enum_class._value2member_map_[value] = enum_member
enum.py(276):         for member_name in classdict._member_names:
enum.py(326):         for name in ('__repr__', '__str__', '__format__', '__reduce_ex__'):
enum.py(327):             if name in classdict:
enum.py(329):             class_method = getattr(enum_class, name)
enum.py(330):             obj_method = getattr(member_type, name, None)
enum.py(331):             enum_method = getattr(first_enum, name, None)
enum.py(332):             if obj_method is not None and obj_method is class_method:
enum.py(326):         for name in ('__repr__', '__str__', '__format__', '__reduce_ex__'):
enum.py(327):             if name in classdict:
enum.py(328):                 continue
enum.py(326):         for name in ('__repr__', '__str__', '__format__', '__reduce_ex__'):
enum.py(327):             if name in classdict:
enum.py(329):             class_method = getattr(enum_class, name)
enum.py(330):             obj_method = getattr(member_type, name, None)
enum.py(331):             enum_method = getattr(first_enum, name, None)
enum.py(332):             if obj_method is not None and obj_method is class_method:
enum.py(326):         for name in ('__repr__', '__str__', '__format__', '__reduce_ex__'):
enum.py(327):             if name in classdict:
enum.py(329):             class_method = getattr(enum_class, name)
enum.py(330):             obj_method = getattr(member_type, name, None)
enum.py(331):             enum_method = getattr(first_enum, name, None)
enum.py(332):             if obj_method is not None and obj_method is class_method:
enum.py(326):         for name in ('__repr__', '__str__', '__format__', '__reduce_ex__'):
enum.py(337):         if Enum is not None:
enum.py(340):             if save_new:
enum.py(342):             enum_class.__new__ = Enum.__new__
 --- modulename: enum, funcname: __setattr__
enum.py(478):         member_map = cls.__dict__.get('_member_map_', {})
enum.py(479):         if name in member_map:
enum.py(481):         super().__setattr__(name, value)
enum.py(345):         if _order_ is not None:
enum.py(351):         return enum_class
input_handler.py(30): class Argument:
 --- modulename: input_handler, funcname: Argument
input_handler.py(30): class Argument:
input_handler.py(31):     def __init__(self, arg_type: ArgumentType, value: str, datatype=None):
input_handler.py(37):     def __repr__(self):
input_handler.py(44): instructions_dic = {
input_handler.py(45):         "MOVE": [ArgumentType.VAR, ArgumentType.SYMB],
input_handler.py(44): instructions_dic = {
input_handler.py(46):         "CREATEFRAME": [],
input_handler.py(44): instructions_dic = {
input_handler.py(47):         "PUSHFRAME": [],
input_handler.py(44): instructions_dic = {
input_handler.py(48):         "POPFRAME": [],
input_handler.py(44): instructions_dic = {
input_handler.py(49):         "DEFVAR": [ArgumentType.VAR],
input_handler.py(44): instructions_dic = {
input_handler.py(50):         "CALL": [ArgumentType.LABEL],
input_handler.py(44): instructions_dic = {
input_handler.py(51):         "RETURN": [],
input_handler.py(44): instructions_dic = {
input_handler.py(52):         "PUSHS": [ArgumentType.SYMB],
input_handler.py(44): instructions_dic = {
input_handler.py(53):         "POPS": [ArgumentType.VAR],
input_handler.py(44): instructions_dic = {
input_handler.py(54):         "ADD": [ArgumentType.VAR, ArgumentType.SYMB,
input_handler.py(55):                 ArgumentType.SYMB],
input_handler.py(54):         "ADD": [ArgumentType.VAR, ArgumentType.SYMB,
input_handler.py(44): instructions_dic = {
input_handler.py(56):         "SUB": [ArgumentType.VAR, ArgumentType.SYMB,
input_handler.py(57):                 ArgumentType.SYMB],
input_handler.py(56):         "SUB": [ArgumentType.VAR, ArgumentType.SYMB,
input_handler.py(44): instructions_dic = {
input_handler.py(58):         "MUL": [ArgumentType.VAR, ArgumentType.SYMB,
input_handler.py(59):                 ArgumentType.SYMB],
input_handler.py(58):         "MUL": [ArgumentType.VAR, ArgumentType.SYMB,
input_handler.py(44): instructions_dic = {
input_handler.py(60):         "IDIV": [ArgumentType.VAR, ArgumentType.SYMB,
input_handler.py(61):                  ArgumentType.SYMB],
input_handler.py(60):         "IDIV": [ArgumentType.VAR, ArgumentType.SYMB,
input_handler.py(44): instructions_dic = {
input_handler.py(62):         "LT": [ArgumentType.VAR, ArgumentType.SYMB,
input_handler.py(63):                ArgumentType.SYMB],
input_handler.py(62):         "LT": [ArgumentType.VAR, ArgumentType.SYMB,
input_handler.py(44): instructions_dic = {
input_handler.py(64):         "GT": [ArgumentType.VAR, ArgumentType.SYMB,
input_handler.py(65):                ArgumentType.SYMB],
input_handler.py(64):         "GT": [ArgumentType.VAR, ArgumentType.SYMB,
input_handler.py(44): instructions_dic = {
input_handler.py(66):         "EQ": [ArgumentType.VAR, ArgumentType.SYMB,
input_handler.py(67):                ArgumentType.SYMB],
input_handler.py(66):         "EQ": [ArgumentType.VAR, ArgumentType.SYMB,
input_handler.py(44): instructions_dic = {
input_handler.py(68):         "AND": [ArgumentType.VAR, ArgumentType.SYMB,
input_handler.py(69):                 ArgumentType.SYMB],
input_handler.py(68):         "AND": [ArgumentType.VAR, ArgumentType.SYMB,
input_handler.py(44): instructions_dic = {
input_handler.py(70):         "OR": [ArgumentType.VAR, ArgumentType.SYMB,
input_handler.py(71):                ArgumentType.SYMB],
input_handler.py(70):         "OR": [ArgumentType.VAR, ArgumentType.SYMB,
input_handler.py(44): instructions_dic = {
input_handler.py(72):         "NOT": [ArgumentType.VAR, ArgumentType.SYMB],
input_handler.py(44): instructions_dic = {
input_handler.py(73):         "INT2CHAR": [ArgumentType.VAR, ArgumentType.SYMB],
input_handler.py(44): instructions_dic = {
input_handler.py(74):         "STRI2INT": [ArgumentType.VAR, ArgumentType.SYMB,
input_handler.py(75):                      ArgumentType.SYMB],
input_handler.py(74):         "STRI2INT": [ArgumentType.VAR, ArgumentType.SYMB,
input_handler.py(44): instructions_dic = {
input_handler.py(76):         "READ": [ArgumentType.VAR, ArgumentType.TYPE],
input_handler.py(44): instructions_dic = {
input_handler.py(77):         "WRITE": [ArgumentType.SYMB],
input_handler.py(44): instructions_dic = {
input_handler.py(78):         "CONCAT": [ArgumentType.VAR, ArgumentType.SYMB,
input_handler.py(79):                    ArgumentType.SYMB],
input_handler.py(78):         "CONCAT": [ArgumentType.VAR, ArgumentType.SYMB,
input_handler.py(44): instructions_dic = {
input_handler.py(80):         "STRLEN": [ArgumentType.VAR, ArgumentType.SYMB],
input_handler.py(44): instructions_dic = {
input_handler.py(81):         "GETCHAR": [ArgumentType.VAR, ArgumentType.SYMB,
input_handler.py(82):                     ArgumentType.SYMB],
input_handler.py(81):         "GETCHAR": [ArgumentType.VAR, ArgumentType.SYMB,
input_handler.py(44): instructions_dic = {
input_handler.py(83):         "SETCHAR": [ArgumentType.VAR, ArgumentType.SYMB,
input_handler.py(84):                     ArgumentType.SYMB],
input_handler.py(83):         "SETCHAR": [ArgumentType.VAR, ArgumentType.SYMB,
input_handler.py(44): instructions_dic = {
input_handler.py(85):         "TYPE": [ArgumentType.VAR, ArgumentType.SYMB],
input_handler.py(44): instructions_dic = {
input_handler.py(86):         "LABEL": [ArgumentType.LABEL],
input_handler.py(44): instructions_dic = {
input_handler.py(87):         "JUMP": [ArgumentType.LABEL],
input_handler.py(44): instructions_dic = {
input_handler.py(88):         "JUMPIFEQ": [ArgumentType.LABEL, ArgumentType.SYMB,
input_handler.py(89):                      ArgumentType.SYMB],
input_handler.py(88):         "JUMPIFEQ": [ArgumentType.LABEL, ArgumentType.SYMB,
input_handler.py(44): instructions_dic = {
input_handler.py(90):         "JUMPIFNEQ": [ArgumentType.LABEL, ArgumentType.SYMB,
input_handler.py(91):                       ArgumentType.SYMB],
input_handler.py(90):         "JUMPIFNEQ": [ArgumentType.LABEL, ArgumentType.SYMB,
input_handler.py(44): instructions_dic = {
input_handler.py(92):         "EXIT": [ArgumentType.SYMB],
input_handler.py(44): instructions_dic = {
input_handler.py(93):         "DPRINT": [ArgumentType.SYMB],
input_handler.py(44): instructions_dic = {
input_handler.py(94):         "BREAK": [],
input_handler.py(44): instructions_dic = {
input_handler.py(96):         "CLEARS": [],
input_handler.py(44): instructions_dic = {
input_handler.py(97):         "ADDS": [ArgumentType.VAR, ArgumentType.SYMB, ArgumentType.SYMB],
input_handler.py(44): instructions_dic = {
input_handler.py(98):         "SUBS": [ArgumentType.VAR, ArgumentType.SYMB, ArgumentType.SYMB],
input_handler.py(44): instructions_dic = {
input_handler.py(99):         "MULS": [ArgumentType.VAR, ArgumentType.SYMB, ArgumentType.SYMB],
input_handler.py(44): instructions_dic = {
input_handler.py(100):         "IDIVS": [ArgumentType.VAR, ArgumentType.SYMB, ArgumentType.SYMB],
input_handler.py(44): instructions_dic = {
input_handler.py(101):         "LTS": [ArgumentType.VAR, ArgumentType.SYMB, ArgumentType.SYMB],
input_handler.py(44): instructions_dic = {
input_handler.py(102):         "GTS": [ArgumentType.VAR, ArgumentType.SYMB, ArgumentType.SYMB],
input_handler.py(44): instructions_dic = {
input_handler.py(103):         "EQS": [ArgumentType.VAR, ArgumentType.SYMB, ArgumentType.SYMB],
input_handler.py(44): instructions_dic = {
input_handler.py(104):         "ANDS": [ArgumentType.VAR, ArgumentType.SYMB, ArgumentType.SYMB],
input_handler.py(44): instructions_dic = {
input_handler.py(105):         "ORS": [ArgumentType.VAR, ArgumentType.SYMB, ArgumentType.SYMB],
input_handler.py(44): instructions_dic = {
input_handler.py(106):         "NOTS": [ArgumentType.VAR, ArgumentType.SYMB],
input_handler.py(44): instructions_dic = {
input_handler.py(107):         "INT2CHARS": [],
input_handler.py(44): instructions_dic = {
input_handler.py(108):         "STRI2INTS": [],
input_handler.py(44): instructions_dic = {
input_handler.py(109):         "JUMPIFEQS": [],
input_handler.py(44): instructions_dic = {
input_handler.py(110):         "JUMPIFNEQS": [],
input_handler.py(44): instructions_dic = {
input_handler.py(114): class InstructionVerify:
 --- modulename: input_handler, funcname: InstructionVerify
input_handler.py(114): class InstructionVerify:
input_handler.py(115):     @staticmethod
input_handler.py(116):     def verify_instruction(instruction_xml, orders: set) -> bool:
input_handler.py(156): class InputHandler:
 --- modulename: input_handler, funcname: InputHandler
input_handler.py(156): class InputHandler:
input_handler.py(157):     def __init__(self):
input_handler.py(164):     def parse_arguments(self):
input_handler.py(205):     def load_file(self, file_name: str) -> str:
input_handler.py(219):     def parse_input(self):
input_handler.py(233):     def convert_source(self):
input_handler.py(242):     def verify_structure(self):
input_handler.py(267):     def get_instructions(self) -> list[str, list[Argument]]:
<frozen importlib._bootstrap>(699): <frozen importlib._bootstrap>(700): <frozen importlib._bootstrap>(701):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap>(703): <frozen importlib._bootstrap>(705): <frozen importlib._bootstrap>(1007): <frozen importlib._bootstrap>(1016): <frozen importlib._bootstrap>(1024):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(174):  --- modulename: _bootstrap, funcname: release
<frozen importlib._bootstrap>(126): <frozen importlib._bootstrap>(127): <frozen importlib._bootstrap>(128): <frozen importlib._bootstrap>(130): <frozen importlib._bootstrap>(131): <frozen importlib._bootstrap>(132): <frozen importlib._bootstrap>(133): <frozen importlib._bootstrap>(134): <frozen importlib._bootstrap>(127):  --- modulename: _bootstrap, funcname: cb
<frozen importlib._bootstrap>(199): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(204): <frozen importlib._bootstrap>(205): <frozen importlib._bootstrap>(207): interpret.py(2): from input_handler import Argument
interpret.py(3): from memory import Memory
 --- modulename: _bootstrap, funcname: _find_and_load
<frozen importlib._bootstrap>(1024):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(166): <frozen importlib._bootstrap>(167):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(170):  --- modulename: _bootstrap, funcname: _get_module_lock
<frozen importlib._bootstrap>(185): <frozen importlib._bootstrap>(186): <frozen importlib._bootstrap>(187): <frozen importlib._bootstrap>(188): <frozen importlib._bootstrap>(189): <frozen importlib._bootstrap>(190): <frozen importlib._bootstrap>(192): <frozen importlib._bootstrap>(193): <frozen importlib._bootstrap>(196):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(72): <frozen importlib._bootstrap>(73): <frozen importlib._bootstrap>(74): <frozen importlib._bootstrap>(75): <frozen importlib._bootstrap>(76): <frozen importlib._bootstrap>(77): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(209): <frozen importlib._bootstrap>(211): <frozen importlib._bootstrap>(213): <frozen importlib._bootstrap>(171):  --- modulename: _bootstrap, funcname: acquire
<frozen importlib._bootstrap>(106): <frozen importlib._bootstrap>(107): <frozen importlib._bootstrap>(108): <frozen importlib._bootstrap>(109): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(111): <frozen importlib._bootstrap>(112): <frozen importlib._bootstrap>(113): <frozen importlib._bootstrap>(114): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(123): <frozen importlib._bootstrap>(1025): <frozen importlib._bootstrap>(1026): <frozen importlib._bootstrap>(1027):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked
<frozen importlib._bootstrap>(988): <frozen importlib._bootstrap>(989): <frozen importlib._bootstrap>(990): <frozen importlib._bootstrap>(1002):  --- modulename: _bootstrap, funcname: _find_spec
<frozen importlib._bootstrap>(923): <frozen importlib._bootstrap>(924): <frozen importlib._bootstrap>(929): <frozen importlib._bootstrap>(935): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap, funcname: find_spec
<frozen importlib._bootstrap>(748): <frozen importlib._bootstrap>(750): <frozen importlib._bootstrap>(753): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap, funcname: find_spec
<frozen importlib._bootstrap>(828): <frozen importlib._bootstrap>(831): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1437): <frozen importlib._bootstrap_external>(1438): <frozen importlib._bootstrap_external>(1439):  --- modulename: _bootstrap_external, funcname: _get_spec
<frozen importlib._bootstrap_external>(1404): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1365): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1577):  --- modulename: _bootstrap_external, funcname: _path_isfile
<frozen importlib._bootstrap_external>(161):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type
<frozen importlib._bootstrap_external>(152): <frozen importlib._bootstrap_external>(153):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(156): <frozen importlib._bootstrap_external>(1578): <frozen importlib._bootstrap_external>(1579): <frozen importlib._bootstrap_external>(1578):  --- modulename: _bootstrap_external, funcname: _get_spec
<frozen importlib._bootstrap_external>(1532):  --- modulename: _bootstrap_external, funcname: __init__
<frozen importlib._bootstrap_external>(1043): <frozen importlib._bootstrap_external>(1044): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1533):  --- modulename: _bootstrap_external, funcname: spec_from_file_location
<frozen importlib._bootstrap_external>(733): <frozen importlib._bootstrap_external>(745): <frozen importlib._bootstrap_external>(746):  --- modulename: _bootstrap_external, funcname: _path_isabs
<frozen importlib._bootstrap_external>(182): <frozen importlib._bootstrap_external>(758):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(359): <frozen importlib._bootstrap>(360): <frozen importlib._bootstrap>(361): <frozen importlib._bootstrap>(362): <frozen importlib._bootstrap>(363): <frozen importlib._bootstrap>(366): <frozen importlib._bootstrap>(367): <frozen importlib._bootstrap_external>(759): <frozen importlib._bootstrap_external>(762): <frozen importlib._bootstrap_external>(772): <frozen importlib._bootstrap_external>(783): <frozen importlib._bootstrap_external>(784): <frozen importlib._bootstrap_external>(789): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1416): <frozen importlib._bootstrap_external>(1417): <frozen importlib._bootstrap_external>(1440): <frozen importlib._bootstrap_external>(1442): <frozen importlib._bootstrap_external>(1453): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(948): <frozen importlib._bootstrap>(963): <frozen importlib._bootstrap>(1003): <frozen importlib._bootstrap>(1006):  --- modulename: _bootstrap, funcname: _load_unlocked
<frozen importlib._bootstrap>(666): <frozen importlib._bootstrap>(668): <frozen importlib._bootstrap>(674):  --- modulename: _bootstrap, funcname: module_from_spec
<frozen importlib._bootstrap>(567): <frozen importlib._bootstrap>(568): <frozen importlib._bootstrap>(571):  --- modulename: _bootstrap_external, funcname: create_module
<frozen importlib._bootstrap_external>(874): <frozen importlib._bootstrap>(575): <frozen importlib._bootstrap>(576):  --- modulename: _bootstrap, funcname: _new_module
<frozen importlib._bootstrap>(49): <frozen importlib._bootstrap>(577):  --- modulename: _bootstrap, funcname: _init_module_attrs
<frozen importlib._bootstrap>(496): <frozen importlib._bootstrap>(502): <frozen importlib._bootstrap>(503): <frozen importlib._bootstrap>(504): <frozen importlib._bootstrap>(525): <frozen importlib._bootstrap>(526): <frozen importlib._bootstrap>(530): <frozen importlib._bootstrap>(531): <frozen importlib._bootstrap>(532):  --- modulename: _bootstrap, funcname: parent
<frozen importlib._bootstrap>(407): <frozen importlib._bootstrap>(408): <frozen importlib._bootstrap>(536): <frozen importlib._bootstrap>(537): <frozen importlib._bootstrap>(541): <frozen importlib._bootstrap>(542): <frozen importlib._bootstrap>(548):  --- modulename: _bootstrap, funcname: has_location
<frozen importlib._bootstrap>(414): <frozen importlib._bootstrap>(549): <frozen importlib._bootstrap>(550): <frozen importlib._bootstrap>(551): <frozen importlib._bootstrap>(555): <frozen importlib._bootstrap>(556):  --- modulename: _bootstrap, funcname: cached
<frozen importlib._bootstrap>(393): <frozen importlib._bootstrap>(394): <frozen importlib._bootstrap>(395): <frozen importlib._bootstrap>(397):  --- modulename: _bootstrap_external, funcname: _get_cached
<frozen importlib._bootstrap_external>(511): <frozen importlib._bootstrap_external>(512): <frozen importlib._bootstrap_external>(513):  --- modulename: _bootstrap_external, funcname: cache_from_source
<frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(405): <frozen importlib._bootstrap_external>(406):  --- modulename: _bootstrap_external, funcname: _path_split
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134): <frozen importlib._bootstrap_external>(135): <frozen importlib._bootstrap_external>(137): <frozen importlib._bootstrap_external>(407): <frozen importlib._bootstrap_external>(408): <frozen importlib._bootstrap_external>(409): <frozen importlib._bootstrap_external>(411): <frozen importlib._bootstrap_external>(412): <frozen importlib._bootstrap_external>(413): <frozen importlib._bootstrap_external>(414): <frozen importlib._bootstrap_external>(417): <frozen importlib._bootstrap_external>(418): <frozen importlib._bootstrap_external>(422): <frozen importlib._bootstrap_external>(423): <frozen importlib._bootstrap_external>(448):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap>(398): <frozen importlib._bootstrap>(557): <frozen importlib._bootstrap>(558):  --- modulename: _bootstrap, funcname: cached
<frozen importlib._bootstrap>(393): <frozen importlib._bootstrap>(398): <frozen importlib._bootstrap>(561): <frozen importlib._bootstrap>(578): <frozen importlib._bootstrap>(679): <frozen importlib._bootstrap>(680): <frozen importlib._bootstrap>(681): <frozen importlib._bootstrap>(682): <frozen importlib._bootstrap>(683): <frozen importlib._bootstrap>(688):  --- modulename: _bootstrap_external, funcname: exec_module
<frozen importlib._bootstrap_external>(879):  --- modulename: _bootstrap_external, funcname: get_code
<frozen importlib._bootstrap_external>(957):  --- modulename: _bootstrap_external, funcname: _check_name_wrapper
<frozen importlib._bootstrap_external>(543): <frozen importlib._bootstrap_external>(545): <frozen importlib._bootstrap_external>(548):  --- modulename: _bootstrap_external, funcname: get_filename
<frozen importlib._bootstrap_external>(1068): <frozen importlib._bootstrap_external>(958): <frozen importlib._bootstrap_external>(959): <frozen importlib._bootstrap_external>(960): <frozen importlib._bootstrap_external>(961): <frozen importlib._bootstrap_external>(962): <frozen importlib._bootstrap_external>(963): <frozen importlib._bootstrap_external>(964):  --- modulename: _bootstrap_external, funcname: cache_from_source
<frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(405): <frozen importlib._bootstrap_external>(406):  --- modulename: _bootstrap_external, funcname: _path_split
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134): <frozen importlib._bootstrap_external>(135): <frozen importlib._bootstrap_external>(137): <frozen importlib._bootstrap_external>(407): <frozen importlib._bootstrap_external>(408): <frozen importlib._bootstrap_external>(409): <frozen importlib._bootstrap_external>(411): <frozen importlib._bootstrap_external>(412): <frozen importlib._bootstrap_external>(413): <frozen importlib._bootstrap_external>(414): <frozen importlib._bootstrap_external>(417): <frozen importlib._bootstrap_external>(418): <frozen importlib._bootstrap_external>(422): <frozen importlib._bootstrap_external>(423): <frozen importlib._bootstrap_external>(448):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(968): <frozen importlib._bootstrap_external>(969):  --- modulename: _bootstrap_external, funcname: path_stats
<frozen importlib._bootstrap_external>(1091):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1092): <frozen importlib._bootstrap_external>(973): <frozen importlib._bootstrap_external>(974): <frozen importlib._bootstrap_external>(975):  --- modulename: _bootstrap_external, funcname: get_data
<frozen importlib._bootstrap_external>(1072): <frozen importlib._bootstrap_external>(1073): <frozen importlib._bootstrap_external>(1074): <frozen importlib._bootstrap_external>(1073): <frozen importlib._bootstrap_external>(980): <frozen importlib._bootstrap_external>(981): <frozen importlib._bootstrap_external>(979): <frozen importlib._bootstrap_external>(983): <frozen importlib._bootstrap_external>(984):  --- modulename: _bootstrap_external, funcname: _classify_pyc
<frozen importlib._bootstrap_external>(601): <frozen importlib._bootstrap_external>(602): <frozen importlib._bootstrap_external>(606): <frozen importlib._bootstrap_external>(610):  --- modulename: _bootstrap_external, funcname: _unpack_uint32
<frozen importlib._bootstrap_external>(86): <frozen importlib._bootstrap_external>(87): <frozen importlib._bootstrap_external>(612): <frozen importlib._bootstrap_external>(615): <frozen importlib._bootstrap_external>(985): <frozen importlib._bootstrap_external>(986): <frozen importlib._bootstrap_external>(987): <frozen importlib._bootstrap_external>(1000): <frozen importlib._bootstrap_external>(1001): <frozen importlib._bootstrap_external>(1002): <frozen importlib._bootstrap_external>(1003): <frozen importlib._bootstrap_external>(1004): <frozen importlib._bootstrap_external>(1005): <frozen importlib._bootstrap_external>(1000):  --- modulename: _bootstrap_external, funcname: _validate_timestamp_pyc
<frozen importlib._bootstrap_external>(637):  --- modulename: _bootstrap_external, funcname: _unpack_uint32
<frozen importlib._bootstrap_external>(86): <frozen importlib._bootstrap_external>(87): <frozen importlib._bootstrap_external>(641): <frozen importlib._bootstrap_external>(642):  --- modulename: _bootstrap_external, funcname: _unpack_uint32
<frozen importlib._bootstrap_external>(86): <frozen importlib._bootstrap_external>(87): <frozen importlib._bootstrap_external>(1010): <frozen importlib._bootstrap_external>(1011): <frozen importlib._bootstrap_external>(1010):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1012): <frozen importlib._bootstrap_external>(1013): <frozen importlib._bootstrap_external>(1014): <frozen importlib._bootstrap_external>(1012):  --- modulename: _bootstrap_external, funcname: _compile_bytecode
<frozen importlib._bootstrap_external>(672): <frozen importlib._bootstrap_external>(673): <frozen importlib._bootstrap_external>(674):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(675): <frozen importlib._bootstrap_external>(676): <frozen importlib._bootstrap_external>(677): <frozen importlib._bootstrap_external>(880): <frozen importlib._bootstrap_external>(883):  --- modulename: _bootstrap, funcname: _call_with_frames_removed
<frozen importlib._bootstrap>(241):  --- modulename: memory, funcname: <module>
memory.py(1): from input_handler import ArgumentType
memory.py(3): from error_codes import ErrorCodes
memory.py(4): from debug import DEBUG_PRINT
memory.py(5): from config import DEBUG
memory.py(6): from instructions import DataType
 --- modulename: _bootstrap, funcname: _find_and_load
<frozen importlib._bootstrap>(1024):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(166): <frozen importlib._bootstrap>(167):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(170):  --- modulename: _bootstrap, funcname: _get_module_lock
<frozen importlib._bootstrap>(185): <frozen importlib._bootstrap>(186): <frozen importlib._bootstrap>(187): <frozen importlib._bootstrap>(188): <frozen importlib._bootstrap>(189): <frozen importlib._bootstrap>(190): <frozen importlib._bootstrap>(192): <frozen importlib._bootstrap>(193): <frozen importlib._bootstrap>(196):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(72): <frozen importlib._bootstrap>(73): <frozen importlib._bootstrap>(74): <frozen importlib._bootstrap>(75): <frozen importlib._bootstrap>(76): <frozen importlib._bootstrap>(77): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(209): <frozen importlib._bootstrap>(211): <frozen importlib._bootstrap>(213): <frozen importlib._bootstrap>(171):  --- modulename: _bootstrap, funcname: acquire
<frozen importlib._bootstrap>(106): <frozen importlib._bootstrap>(107): <frozen importlib._bootstrap>(108): <frozen importlib._bootstrap>(109): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(111): <frozen importlib._bootstrap>(112): <frozen importlib._bootstrap>(113): <frozen importlib._bootstrap>(114): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(123): <frozen importlib._bootstrap>(1025): <frozen importlib._bootstrap>(1026): <frozen importlib._bootstrap>(1027):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked
<frozen importlib._bootstrap>(988): <frozen importlib._bootstrap>(989): <frozen importlib._bootstrap>(990): <frozen importlib._bootstrap>(1002):  --- modulename: _bootstrap, funcname: _find_spec
<frozen importlib._bootstrap>(923): <frozen importlib._bootstrap>(924): <frozen importlib._bootstrap>(929): <frozen importlib._bootstrap>(935): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap, funcname: find_spec
<frozen importlib._bootstrap>(748): <frozen importlib._bootstrap>(750): <frozen importlib._bootstrap>(753): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap, funcname: find_spec
<frozen importlib._bootstrap>(828): <frozen importlib._bootstrap>(831): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(936): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __enter__
<frozen importlib._bootstrap>(895): <frozen importlib._bootstrap>(938): <frozen importlib._bootstrap>(939): <frozen importlib._bootstrap>(945):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1437): <frozen importlib._bootstrap_external>(1438): <frozen importlib._bootstrap_external>(1439):  --- modulename: _bootstrap_external, funcname: _get_spec
<frozen importlib._bootstrap_external>(1404): <frozen importlib._bootstrap_external>(1405): <frozen importlib._bootstrap_external>(1406): <frozen importlib._bootstrap_external>(1408):  --- modulename: _bootstrap_external, funcname: _path_importer_cache
<frozen importlib._bootstrap_external>(1364): <frozen importlib._bootstrap_external>(1365): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1371): <frozen importlib._bootstrap_external>(1372): <frozen importlib._bootstrap_external>(1376): <frozen importlib._bootstrap_external>(1409): <frozen importlib._bootstrap_external>(1410): <frozen importlib._bootstrap_external>(1411):  --- modulename: _bootstrap_external, funcname: find_spec
<frozen importlib._bootstrap_external>(1541): <frozen importlib._bootstrap_external>(1542): <frozen importlib._bootstrap_external>(1543): <frozen importlib._bootstrap_external>(1544):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1547): <frozen importlib._bootstrap_external>(1551):  --- modulename: _bootstrap_external, funcname: _relax_case
<frozen importlib._bootstrap_external>(73): <frozen importlib._bootstrap_external>(1555): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1570): <frozen importlib._bootstrap_external>(1571): <frozen importlib._bootstrap_external>(1572):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(1575):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1577):  --- modulename: _bootstrap_external, funcname: _path_isfile
<frozen importlib._bootstrap_external>(161):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type
<frozen importlib._bootstrap_external>(152): <frozen importlib._bootstrap_external>(153):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(156): <frozen importlib._bootstrap_external>(1578): <frozen importlib._bootstrap_external>(1579): <frozen importlib._bootstrap_external>(1578):  --- modulename: _bootstrap_external, funcname: _get_spec
<frozen importlib._bootstrap_external>(1532):  --- modulename: _bootstrap_external, funcname: __init__
<frozen importlib._bootstrap_external>(1043): <frozen importlib._bootstrap_external>(1044): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1533):  --- modulename: _bootstrap_external, funcname: spec_from_file_location
<frozen importlib._bootstrap_external>(733): <frozen importlib._bootstrap_external>(745): <frozen importlib._bootstrap_external>(746):  --- modulename: _bootstrap_external, funcname: _path_isabs
<frozen importlib._bootstrap_external>(182): <frozen importlib._bootstrap_external>(758):  --- modulename: _bootstrap, funcname: __init__
<frozen importlib._bootstrap>(359): <frozen importlib._bootstrap>(360): <frozen importlib._bootstrap>(361): <frozen importlib._bootstrap>(362): <frozen importlib._bootstrap>(363): <frozen importlib._bootstrap>(366): <frozen importlib._bootstrap>(367): <frozen importlib._bootstrap_external>(759): <frozen importlib._bootstrap_external>(762): <frozen importlib._bootstrap_external>(772): <frozen importlib._bootstrap_external>(783): <frozen importlib._bootstrap_external>(784): <frozen importlib._bootstrap_external>(789): <frozen importlib._bootstrap_external>(1414): <frozen importlib._bootstrap_external>(1416): <frozen importlib._bootstrap_external>(1417): <frozen importlib._bootstrap_external>(1440): <frozen importlib._bootstrap_external>(1442): <frozen importlib._bootstrap_external>(1453): <frozen importlib._bootstrap>(937):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(899): <frozen importlib._bootstrap>(946): <frozen importlib._bootstrap>(948): <frozen importlib._bootstrap>(963): <frozen importlib._bootstrap>(1003): <frozen importlib._bootstrap>(1006):  --- modulename: _bootstrap, funcname: _load_unlocked
<frozen importlib._bootstrap>(666): <frozen importlib._bootstrap>(668): <frozen importlib._bootstrap>(674):  --- modulename: _bootstrap, funcname: module_from_spec
<frozen importlib._bootstrap>(567): <frozen importlib._bootstrap>(568): <frozen importlib._bootstrap>(571):  --- modulename: _bootstrap_external, funcname: create_module
<frozen importlib._bootstrap_external>(874): <frozen importlib._bootstrap>(575): <frozen importlib._bootstrap>(576):  --- modulename: _bootstrap, funcname: _new_module
<frozen importlib._bootstrap>(49): <frozen importlib._bootstrap>(577):  --- modulename: _bootstrap, funcname: _init_module_attrs
<frozen importlib._bootstrap>(496): <frozen importlib._bootstrap>(502): <frozen importlib._bootstrap>(503): <frozen importlib._bootstrap>(504): <frozen importlib._bootstrap>(525): <frozen importlib._bootstrap>(526): <frozen importlib._bootstrap>(530): <frozen importlib._bootstrap>(531): <frozen importlib._bootstrap>(532):  --- modulename: _bootstrap, funcname: parent
<frozen importlib._bootstrap>(407): <frozen importlib._bootstrap>(408): <frozen importlib._bootstrap>(536): <frozen importlib._bootstrap>(537): <frozen importlib._bootstrap>(541): <frozen importlib._bootstrap>(542): <frozen importlib._bootstrap>(548):  --- modulename: _bootstrap, funcname: has_location
<frozen importlib._bootstrap>(414): <frozen importlib._bootstrap>(549): <frozen importlib._bootstrap>(550): <frozen importlib._bootstrap>(551): <frozen importlib._bootstrap>(555): <frozen importlib._bootstrap>(556):  --- modulename: _bootstrap, funcname: cached
<frozen importlib._bootstrap>(393): <frozen importlib._bootstrap>(394): <frozen importlib._bootstrap>(395): <frozen importlib._bootstrap>(397):  --- modulename: _bootstrap_external, funcname: _get_cached
<frozen importlib._bootstrap_external>(511): <frozen importlib._bootstrap_external>(512): <frozen importlib._bootstrap_external>(513):  --- modulename: _bootstrap_external, funcname: cache_from_source
<frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(405): <frozen importlib._bootstrap_external>(406):  --- modulename: _bootstrap_external, funcname: _path_split
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134): <frozen importlib._bootstrap_external>(135): <frozen importlib._bootstrap_external>(137): <frozen importlib._bootstrap_external>(407): <frozen importlib._bootstrap_external>(408): <frozen importlib._bootstrap_external>(409): <frozen importlib._bootstrap_external>(411): <frozen importlib._bootstrap_external>(412): <frozen importlib._bootstrap_external>(413): <frozen importlib._bootstrap_external>(414): <frozen importlib._bootstrap_external>(417): <frozen importlib._bootstrap_external>(418): <frozen importlib._bootstrap_external>(422): <frozen importlib._bootstrap_external>(423): <frozen importlib._bootstrap_external>(448):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap>(398): <frozen importlib._bootstrap>(557): <frozen importlib._bootstrap>(558):  --- modulename: _bootstrap, funcname: cached
<frozen importlib._bootstrap>(393): <frozen importlib._bootstrap>(398): <frozen importlib._bootstrap>(561): <frozen importlib._bootstrap>(578): <frozen importlib._bootstrap>(679): <frozen importlib._bootstrap>(680): <frozen importlib._bootstrap>(681): <frozen importlib._bootstrap>(682): <frozen importlib._bootstrap>(683): <frozen importlib._bootstrap>(688):  --- modulename: _bootstrap_external, funcname: exec_module
<frozen importlib._bootstrap_external>(879):  --- modulename: _bootstrap_external, funcname: get_code
<frozen importlib._bootstrap_external>(957):  --- modulename: _bootstrap_external, funcname: _check_name_wrapper
<frozen importlib._bootstrap_external>(543): <frozen importlib._bootstrap_external>(545): <frozen importlib._bootstrap_external>(548):  --- modulename: _bootstrap_external, funcname: get_filename
<frozen importlib._bootstrap_external>(1068): <frozen importlib._bootstrap_external>(958): <frozen importlib._bootstrap_external>(959): <frozen importlib._bootstrap_external>(960): <frozen importlib._bootstrap_external>(961): <frozen importlib._bootstrap_external>(962): <frozen importlib._bootstrap_external>(963): <frozen importlib._bootstrap_external>(964):  --- modulename: _bootstrap_external, funcname: cache_from_source
<frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(405): <frozen importlib._bootstrap_external>(406):  --- modulename: _bootstrap_external, funcname: _path_split
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134):  --- modulename: _bootstrap_external, funcname: <genexpr>
<frozen importlib._bootstrap_external>(134): <frozen importlib._bootstrap_external>(135): <frozen importlib._bootstrap_external>(137): <frozen importlib._bootstrap_external>(407): <frozen importlib._bootstrap_external>(408): <frozen importlib._bootstrap_external>(409): <frozen importlib._bootstrap_external>(411): <frozen importlib._bootstrap_external>(412): <frozen importlib._bootstrap_external>(413): <frozen importlib._bootstrap_external>(414): <frozen importlib._bootstrap_external>(417): <frozen importlib._bootstrap_external>(418): <frozen importlib._bootstrap_external>(422): <frozen importlib._bootstrap_external>(423): <frozen importlib._bootstrap_external>(448):  --- modulename: _bootstrap_external, funcname: _path_join
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128):  --- modulename: _bootstrap_external, funcname: <listcomp>
<frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(128): <frozen importlib._bootstrap_external>(968): <frozen importlib._bootstrap_external>(969):  --- modulename: _bootstrap_external, funcname: path_stats
<frozen importlib._bootstrap_external>(1091):  --- modulename: _bootstrap_external, funcname: _path_stat
<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(1092): <frozen importlib._bootstrap_external>(973): <frozen importlib._bootstrap_external>(974): <frozen importlib._bootstrap_external>(975):  --- modulename: _bootstrap_external, funcname: get_data
<frozen importlib._bootstrap_external>(1072): <frozen importlib._bootstrap_external>(1073): <frozen importlib._bootstrap_external>(1074): <frozen importlib._bootstrap_external>(1073): <frozen importlib._bootstrap_external>(980): <frozen importlib._bootstrap_external>(981): <frozen importlib._bootstrap_external>(979): <frozen importlib._bootstrap_external>(983): <frozen importlib._bootstrap_external>(984):  --- modulename: _bootstrap_external, funcname: _classify_pyc
<frozen importlib._bootstrap_external>(601): <frozen importlib._bootstrap_external>(602): <frozen importlib._bootstrap_external>(606): <frozen importlib._bootstrap_external>(610):  --- modulename: _bootstrap_external, funcname: _unpack_uint32
<frozen importlib._bootstrap_external>(86): <frozen importlib._bootstrap_external>(87): <frozen importlib._bootstrap_external>(612): <frozen importlib._bootstrap_external>(615): <frozen importlib._bootstrap_external>(985): <frozen importlib._bootstrap_external>(986): <frozen importlib._bootstrap_external>(987): <frozen importlib._bootstrap_external>(1000): <frozen importlib._bootstrap_external>(1001): <frozen importlib._bootstrap_external>(1002): <frozen importlib._bootstrap_external>(1003): <frozen importlib._bootstrap_external>(1004): <frozen importlib._bootstrap_external>(1005): <frozen importlib._bootstrap_external>(1000):  --- modulename: _bootstrap_external, funcname: _validate_timestamp_pyc
<frozen importlib._bootstrap_external>(637):  --- modulename: _bootstrap_external, funcname: _unpack_uint32
<frozen importlib._bootstrap_external>(86): <frozen importlib._bootstrap_external>(87): <frozen importlib._bootstrap_external>(641): <frozen importlib._bootstrap_external>(642):  --- modulename: _bootstrap_external, funcname: _unpack_uint32
<frozen importlib._bootstrap_external>(86): <frozen importlib._bootstrap_external>(87): <frozen importlib._bootstrap_external>(1010): <frozen importlib._bootstrap_external>(1011): <frozen importlib._bootstrap_external>(1010):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(1012): <frozen importlib._bootstrap_external>(1013): <frozen importlib._bootstrap_external>(1014): <frozen importlib._bootstrap_external>(1012):  --- modulename: _bootstrap_external, funcname: _compile_bytecode
<frozen importlib._bootstrap_external>(672): <frozen importlib._bootstrap_external>(673): <frozen importlib._bootstrap_external>(674):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap_external>(675): <frozen importlib._bootstrap_external>(676): <frozen importlib._bootstrap_external>(677): <frozen importlib._bootstrap_external>(880): <frozen importlib._bootstrap_external>(883):  --- modulename: _bootstrap, funcname: _call_with_frames_removed
<frozen importlib._bootstrap>(241):  --- modulename: instructions, funcname: <module>
instructions.py(1): from input_handler import ArgumentType
instructions.py(2): from input_handler import Argument
instructions.py(3): from input_handler import instructions_dic
instructions.py(4): from debug import DEBUG_PRINT
instructions.py(5): from error_codes import ErrorCodes
instructions.py(8): import abc
instructions.py(10): class Variable:
 --- modulename: instructions, funcname: Variable
instructions.py(10): class Variable:
instructions.py(11):     def __init__(self, name_: str):
instructions.py(16): class DataType:
 --- modulename: instructions, funcname: DataType
instructions.py(16): class DataType:
instructions.py(17):     TYPE_INT = 1
instructions.py(18):     TYPE_STRING = 2
instructions.py(19):     TYPE_BOOL = 3
instructions.py(20):     TYPE_NIL = 4
instructions.py(21):     TYPE_FLOAT = 5
instructions.py(23):     @staticmethod
instructions.py(24):     def convert_to_enum(datatype: str) -> "DataType":
instructions.py(37): class Instruction(abc.ABC):
 --- modulename: instructions, funcname: Instruction
instructions.py(37): class Instruction(abc.ABC):
instructions.py(38):     def __init__(self, opcode: str, args: list[Argument]):
instructions.py(44):     def check_argument_types(self):
instructions.py(75):     @abc.abstractmethod
instructions.py(76):     def execute(self, memory) -> None:
 --- modulename: abc, funcname: abstractmethod
abc.py(24):     funcobj.__isabstractmethod__ = True
abc.py(25):     return funcobj
instructions.py(82):     def get_frame_from_arg_value(self, var: str) -> str:
instructions.py(85):     def get_name_from_arg_value(self, var: str) -> str:
instructions.py(88):     def convert_strings_data_type_to_enum(self, str_datatype) -> DataType:
instructions.py(95):     def __repr__(self):
 --- modulename: abc, funcname: __new__
abc.py(106):             cls = super().__new__(mcls, name, bases, namespace, **kwargs)
abc.py(107):             _abc_init(cls)
abc.py(108):             return cls
instructions.py(99): class DEFVAR(Instruction):
 --- modulename: instructions, funcname: DEFVAR
instructions.py(99): class DEFVAR(Instruction):
instructions.py(100):     def __init__(self, args: list[Argument]):
instructions.py(103):     def execute(self, memory):
 --- modulename: abc, funcname: __new__
abc.py(106):             cls = super().__new__(mcls, name, bases, namespace, **kwargs)
abc.py(107):             _abc_init(cls)
abc.py(108):             return cls
instructions.py(110): class CREATEFRAME(Instruction):
 --- modulename: instructions, funcname: CREATEFRAME
instructions.py(110): class CREATEFRAME(Instruction):
instructions.py(111):     def __init__(self, args: list[Argument]):
instructions.py(114):     def execute(self, memory):
 --- modulename: abc, funcname: __new__
abc.py(106):             cls = super().__new__(mcls, name, bases, namespace, **kwargs)
abc.py(107):             _abc_init(cls)
abc.py(108):             return cls
instructions.py(117): class PUSHFRAME(Instruction):
 --- modulename: instructions, funcname: PUSHFRAME
instructions.py(117): class PUSHFRAME(Instruction):
instructions.py(118):     def __init__(self, args: list[Argument]):
instructions.py(121):     def execute(self, memory):
 --- modulename: abc, funcname: __new__
abc.py(106):             cls = super().__new__(mcls, name, bases, namespace, **kwargs)
abc.py(107):             _abc_init(cls)
abc.py(108):             return cls
instructions.py(124): class POPFRAME(Instruction):
 --- modulename: instructions, funcname: POPFRAME
instructions.py(124): class POPFRAME(Instruction):
instructions.py(125):     def __init__(self, args: list[Argument]):
instructions.py(128):     def execute(self, memory):
 --- modulename: abc, funcname: __new__
abc.py(106):             cls = super().__new__(mcls, name, bases, namespace, **kwargs)
abc.py(107):             _abc_init(cls)
abc.py(108):             return cls
instructions.py(132): class PUSHS(Instruction):
 --- modulename: instructions, funcname: PUSHS
instructions.py(132): class PUSHS(Instruction):
instructions.py(133):     def __init__(self, args: list[Argument]):
instructions.py(136):     def execute(self, memory):
 --- modulename: abc, funcname: __new__
abc.py(106):             cls = super().__new__(mcls, name, bases, namespace, **kwargs)
abc.py(107):             _abc_init(cls)
abc.py(108):             return cls
instructions.py(154): class POPS(Instruction):
 --- modulename: instructions, funcname: POPS
instructions.py(154): class POPS(Instruction):
instructions.py(155):     def __init__(self, args: list[Argument]):
instructions.py(158):     def execute(self, memory):
 --- modulename: abc, funcname: __new__
abc.py(106):             cls = super().__new__(mcls, name, bases, namespace, **kwargs)
abc.py(107):             _abc_init(cls)
abc.py(108):             return cls
instructions.py(168): class MOVE(Instruction):
 --- modulename: instructions, funcname: MOVE
instructions.py(168): class MOVE(Instruction):
instructions.py(169):     def __init__(self, args: list[Argument]):
instructions.py(172):     def execute(self, memory):
 --- modulename: abc, funcname: __new__
abc.py(106):             cls = super().__new__(mcls, name, bases, namespace, **kwargs)
abc.py(107):             _abc_init(cls)
abc.py(108):             return cls
instructions.py(189): class READ(Instruction):
 --- modulename: instructions, funcname: READ
instructions.py(189): class READ(Instruction):
instructions.py(190):     def __init__(self, args: list[Argument]):
instructions.py(193):     def execute(self, memory):
 --- modulename: abc, funcname: __new__
abc.py(106):             cls = super().__new__(mcls, name, bases, namespace, **kwargs)
abc.py(107):             _abc_init(cls)
abc.py(108):             return cls
instructions.py(198): class WRITE(Instruction):
 --- modulename: instructions, funcname: WRITE
instructions.py(198): class WRITE(Instruction):
instructions.py(199):     def __init__(self, args: list[Argument]):
instructions.py(202):     def _write_var(self, var: Variable) -> None:
instructions.py(220):     def execute(self, memory):
 --- modulename: abc, funcname: __new__
abc.py(106):             cls = super().__new__(mcls, name, bases, namespace, **kwargs)
abc.py(107):             _abc_init(cls)
abc.py(108):             return cls
instructions.py(229): class ArithmeticInstruction(Instruction):
 --- modulename: instructions, funcname: ArithmeticInstruction
instructions.py(229): class ArithmeticInstruction(Instruction):
instructions.py(230):     def __init__(self, opcode: str, args: list[Argument]):
instructions.py(235):     def _push_var(self, memory, operand_arg: str) -> None:
instructions.py(242):     def execute(self, memory, function_name):
 --- modulename: abc, funcname: __new__
abc.py(106):             cls = super().__new__(mcls, name, bases, namespace, **kwargs)
abc.py(107):             _abc_init(cls)
abc.py(108):             return cls
instructions.py(267): class ADD(ArithmeticInstruction):
 --- modulename: instructions, funcname: ADD
instructions.py(267): class ADD(ArithmeticInstruction):
instructions.py(268):     def __init__(self, args: list[Argument]):
instructions.py(271):     def execute(self, memory):
 --- modulename: abc, funcname: __new__
abc.py(106):             cls = super().__new__(mcls, name, bases, namespace, **kwargs)
abc.py(107):             _abc_init(cls)
abc.py(108):             return cls
instructions.py(276): class SUB(ArithmeticInstruction):
 --- modulename: instructions, funcname: SUB
instructions.py(276): class SUB(ArithmeticInstruction):
instructions.py(277):     def __init__(self, args: list[Argument]):
instructions.py(280):     def execute(self, memory):
 --- modulename: abc, funcname: __new__
abc.py(106):             cls = super().__new__(mcls, name, bases, namespace, **kwargs)
abc.py(107):             _abc_init(cls)
abc.py(108):             return cls
instructions.py(284): class MUL(ArithmeticInstruction):
 --- modulename: instructions, funcname: MUL
instructions.py(284): class MUL(ArithmeticInstruction):
instructions.py(285):     def __init__(self, args: list[Argument]):
instructions.py(288):     def execute(self, memory):
 --- modulename: abc, funcname: __new__
abc.py(106):             cls = super().__new__(mcls, name, bases, namespace, **kwargs)
abc.py(107):             _abc_init(cls)
abc.py(108):             return cls
instructions.py(292): class IDIV(ArithmeticInstruction):
 --- modulename: instructions, funcname: IDIV
instructions.py(292): class IDIV(ArithmeticInstruction):
instructions.py(293):     def __init__(self, args: list[Argument]):
instructions.py(296):     def execute(self, memory):
 --- modulename: abc, funcname: __new__
abc.py(106):             cls = super().__new__(mcls, name, bases, namespace, **kwargs)
abc.py(107):             _abc_init(cls)
abc.py(108):             return cls
<frozen importlib._bootstrap>(699): <frozen importlib._bootstrap>(700): <frozen importlib._bootstrap>(701):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap>(703): <frozen importlib._bootstrap>(705): <frozen importlib._bootstrap>(1007): <frozen importlib._bootstrap>(1016): <frozen importlib._bootstrap>(1024):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(174):  --- modulename: _bootstrap, funcname: release
<frozen importlib._bootstrap>(126): <frozen importlib._bootstrap>(127): <frozen importlib._bootstrap>(128): <frozen importlib._bootstrap>(130): <frozen importlib._bootstrap>(131): <frozen importlib._bootstrap>(132): <frozen importlib._bootstrap>(133): <frozen importlib._bootstrap>(134): <frozen importlib._bootstrap>(127):  --- modulename: _bootstrap, funcname: cb
<frozen importlib._bootstrap>(199): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(204): <frozen importlib._bootstrap>(205): <frozen importlib._bootstrap>(207): memory.py(7): from instructions import Variable
memory.py(11): class Frame:
 --- modulename: memory, funcname: Frame
memory.py(11): class Frame:
memory.py(12):     def __init__(self):
memory.py(16):     def get(self, name: str) -> str:
memory.py(24):     def define(self, name: str) -> None:
memory.py(32):     def set(self, name: str, value: str, type_: type) -> None:
memory.py(41): class Singleton(type):
 --- modulename: memory, funcname: Singleton
memory.py(41): class Singleton(type):
memory.py(42):     _instances = {}
memory.py(44):     def __call__(cls, *args, **kwargs):
memory.py(51): class Memory(metaclass=Singleton):
 --- modulename: memory, funcname: Memory
memory.py(51): class Memory(metaclass=Singleton):
memory.py(52):     def __init__(self):
memory.py(62):     def _define_local(self, name: str) -> None:
memory.py(72):     def _define_temporary(self, name: str) -> None:
memory.py(79):     def _define_global(self, name: str) -> None:
memory.py(82):     def define_var(self, name: str, frame: str):
memory.py(93):     def create_frame(self) -> None:
memory.py(97):     def push_frame(self) -> None:
memory.py(108):     def pop_frame(self) -> None:
memory.py(120):     def _global_get_var(self, name: str) -> Variable:
memory.py(124):     def _local_get_var(self, name: str) -> Variable:
memory.py(133):     def _temporary_get_var(self, name: str) -> Variable:
memory.py(142):     def get_var(self, name: str, frame: str) -> str:
memory.py(154):     def move_var(self, source_name: str, source_frame: str, dest_name: str, dest_frame: str) -> None:
memory.py(161):     def set_var(self, name: str, frame: str, value: str, datatype: DataType) -> None:
memory.py(167):     def _check_type(self, type_: DataType, allowed_types: list[DataType]) -> None:
memory.py(175):     def add(self, dest_name, dest_frame) -> None:
memory.py(188):     def sub(self, dest_name, dest_frame) -> None:
memory.py(201):     def mul(self, dest_name, dest_frame) -> None:
memory.py(214):     def idiv(self, dest_name, dest_frame) -> None:
memory.py(233):     def get_frame_stack(self) -> list[Frame]:
memory.py(236):     def get_global_frame(self) -> Frame:
memory.py(242):     def push_data(self, value: str, datatype: DataType) -> None:
memory.py(251):     def pop_data(self) -> str:
<frozen importlib._bootstrap>(699): <frozen importlib._bootstrap>(700): <frozen importlib._bootstrap>(701):  --- modulename: _bootstrap, funcname: _verbose_message
<frozen importlib._bootstrap>(246): <frozen importlib._bootstrap>(703): <frozen importlib._bootstrap>(705): <frozen importlib._bootstrap>(1007): <frozen importlib._bootstrap>(1016): <frozen importlib._bootstrap>(1024):  --- modulename: _bootstrap, funcname: __exit__
<frozen importlib._bootstrap>(174):  --- modulename: _bootstrap, funcname: release
<frozen importlib._bootstrap>(126): <frozen importlib._bootstrap>(127): <frozen importlib._bootstrap>(128): <frozen importlib._bootstrap>(130): <frozen importlib._bootstrap>(131): <frozen importlib._bootstrap>(132): <frozen importlib._bootstrap>(133): <frozen importlib._bootstrap>(134): <frozen importlib._bootstrap>(127):  --- modulename: _bootstrap, funcname: cb
<frozen importlib._bootstrap>(199): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(204): <frozen importlib._bootstrap>(205): <frozen importlib._bootstrap>(207): interpret.py(4): import instructions as InstructionsClass
interpret.py(5): from config import DEBUG
interpret.py(9): class Interpreter:
 --- modulename: interpret, funcname: Interpreter
interpret.py(9): class Interpreter:
interpret.py(10):     def __init__(self, instructions_raw: list[str, list[Argument]]):
interpret.py(16):     def _create_instructions(self,
interpret.py(17):                             instructions_raw: list[str, list[Argument]]) -> None:
interpret.py(16):     def _create_instructions(self,
interpret.py(17):                             instructions_raw: list[str, list[Argument]]) -> None:
interpret.py(16):     def _create_instructions(self,
interpret.py(24):     def execute_instructions(self, memory: Memory) -> None:
interpret.py(28):     def print_instructions(self):
interpret.py(33): inpt = InputHandler()
 --- modulename: input_handler, funcname: __init__
input_handler.py(158):         self.args = {}
input_handler.py(159):         self.source_file = None
input_handler.py(160):         self.input_file = None
input_handler.py(161):         self.instruction_orders = set()
input_handler.py(162):         DEBUG = False
interpret.py(34): inpt.parse_arguments()
 --- modulename: input_handler, funcname: parse_arguments
input_handler.py(165):         parser = argparse.ArgumentParser(add_help=False,
input_handler.py(166):                                          prog="input_handler.py",
input_handler.py(167):                                          description="Handle command line \
input_handler.py(165):         parser = argparse.ArgumentParser(add_help=False,
 --- modulename: argparse, funcname: __init__
argparse.py(1709):         superinit = super(ArgumentParser, self).__init__
argparse.py(1710):         superinit(description=description,
argparse.py(1711):                   prefix_chars=prefix_chars,
argparse.py(1712):                   argument_default=argument_default,
argparse.py(1713):                   conflict_handler=conflict_handler)
argparse.py(1710):         superinit(description=description,
 --- modulename: argparse, funcname: __init__
argparse.py(1315):         super(_ActionsContainer, self).__init__()
argparse.py(1317):         self.description = description
argparse.py(1318):         self.argument_default = argument_default
argparse.py(1319):         self.prefix_chars = prefix_chars
argparse.py(1320):         self.conflict_handler = conflict_handler
argparse.py(1323):         self._registries = {}
argparse.py(1326):         self.register('action', None, _StoreAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1327):         self.register('action', 'store', _StoreAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1328):         self.register('action', 'store_const', _StoreConstAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1329):         self.register('action', 'store_true', _StoreTrueAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1330):         self.register('action', 'store_false', _StoreFalseAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1331):         self.register('action', 'append', _AppendAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1332):         self.register('action', 'append_const', _AppendConstAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1333):         self.register('action', 'count', _CountAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1334):         self.register('action', 'help', _HelpAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1335):         self.register('action', 'version', _VersionAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1336):         self.register('action', 'parsers', _SubParsersAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1337):         self.register('action', 'extend', _ExtendAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1340):         self._get_handler()
 --- modulename: argparse, funcname: _get_handler
argparse.py(1573):         handler_func_name = '_handle_conflict_%s' % self.conflict_handler
argparse.py(1574):         try:
argparse.py(1575):             return getattr(self, handler_func_name)
argparse.py(1343):         self._actions = []
argparse.py(1344):         self._option_string_actions = {}
argparse.py(1347):         self._action_groups = []
argparse.py(1348):         self._mutually_exclusive_groups = []
argparse.py(1351):         self._defaults = {}
argparse.py(1354):         self._negative_number_matcher = _re.compile(r'^-\d+$|^-\d*\.\d+$')
 --- modulename: re, funcname: compile
re.py(251):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(290):     if isinstance(flags, RegexFlag):
re.py(292):     try:
re.py(293):         return _cache[type(pattern), pattern, flags]
argparse.py(1358):         self._has_negative_number_optionals = []
argparse.py(1716):         if prog is None:
argparse.py(1719):         self.prog = prog
argparse.py(1720):         self.usage = usage
argparse.py(1721):         self.epilog = epilog
argparse.py(1722):         self.formatter_class = formatter_class
argparse.py(1723):         self.fromfile_prefix_chars = fromfile_prefix_chars
argparse.py(1724):         self.add_help = add_help
argparse.py(1725):         self.allow_abbrev = allow_abbrev
argparse.py(1726):         self.exit_on_error = exit_on_error
argparse.py(1728):         add_group = self.add_argument_group
argparse.py(1729):         self._positionals = add_group(_('positional arguments'))
 --- modulename: gettext, funcname: gettext
gettext.py(742):     return dgettext(_current_domain, message)
 --- modulename: gettext, funcname: dgettext
gettext.py(665):     try:
gettext.py(666):         t = translation(domain, _localedirs.get(domain, None))
 --- modulename: gettext, funcname: translation
gettext.py(585):     if class_ is None:
gettext.py(586):         class_ = GNUTranslations
gettext.py(587):     mofiles = find(domain, localedir, languages, all=True)
 --- modulename: gettext, funcname: find
gettext.py(544):     if localedir is None:
gettext.py(545):         localedir = _default_localedir
gettext.py(546):     if languages is None:
gettext.py(547):         languages = []
gettext.py(548):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
gettext.py(549):             val = os.environ.get(envar)
 --- modulename: _collections_abc, funcname: get
_collections_abc.py(818):         try:
_collections_abc.py(819):             return self[key]
 --- modulename: os, funcname: __getitem__
os.py(676):         try:
os.py(677):             value = self._data[self.encodekey(key)]
 --- modulename: os, funcname: encode
os.py(756):             if not isinstance(value, str):
os.py(758):             return value.encode(encoding, 'surrogateescape')
os.py(678):         except KeyError:
os.py(680):             raise KeyError(key) from None
_collections_abc.py(820):         except KeyError:
_collections_abc.py(821):             return default
gettext.py(550):             if val:
gettext.py(548):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
gettext.py(549):             val = os.environ.get(envar)
 --- modulename: _collections_abc, funcname: get
_collections_abc.py(818):         try:
_collections_abc.py(819):             return self[key]
 --- modulename: os, funcname: __getitem__
os.py(676):         try:
os.py(677):             value = self._data[self.encodekey(key)]
 --- modulename: os, funcname: encode
os.py(756):             if not isinstance(value, str):
os.py(758):             return value.encode(encoding, 'surrogateescape')
os.py(678):         except KeyError:
os.py(680):             raise KeyError(key) from None
_collections_abc.py(820):         except KeyError:
_collections_abc.py(821):             return default
gettext.py(550):             if val:
gettext.py(548):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
gettext.py(549):             val = os.environ.get(envar)
 --- modulename: _collections_abc, funcname: get
_collections_abc.py(818):         try:
_collections_abc.py(819):             return self[key]
 --- modulename: os, funcname: __getitem__
os.py(676):         try:
os.py(677):             value = self._data[self.encodekey(key)]
 --- modulename: os, funcname: encode
os.py(756):             if not isinstance(value, str):
os.py(758):             return value.encode(encoding, 'surrogateescape')
os.py(678):         except KeyError:
os.py(680):             raise KeyError(key) from None
_collections_abc.py(820):         except KeyError:
_collections_abc.py(821):             return default
gettext.py(550):             if val:
gettext.py(548):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
gettext.py(549):             val = os.environ.get(envar)
 --- modulename: _collections_abc, funcname: get
_collections_abc.py(818):         try:
_collections_abc.py(819):             return self[key]
 --- modulename: os, funcname: __getitem__
os.py(676):         try:
os.py(677):             value = self._data[self.encodekey(key)]
 --- modulename: os, funcname: encode
os.py(756):             if not isinstance(value, str):
os.py(758):             return value.encode(encoding, 'surrogateescape')
os.py(681):         return self.decodevalue(value)
 --- modulename: os, funcname: decode
os.py(760):             return value.decode(encoding, 'surrogateescape')
gettext.py(550):             if val:
gettext.py(551):                 languages = val.split(':')
gettext.py(552):                 break
gettext.py(553):         if 'C' not in languages:
gettext.py(554):             languages.append('C')
gettext.py(556):     nelangs = []
gettext.py(557):     for lang in languages:
gettext.py(558):         for nelang in _expand_lang(lang):
 --- modulename: gettext, funcname: _expand_lang
gettext.py(212):     import locale
gettext.py(213):     loc = locale.normalize(loc)
 --- modulename: locale, funcname: normalize
locale.py(413):     code = localename.lower()
locale.py(414):     if ':' in code:
locale.py(417):     if '@' in code:
locale.py(420):         modifier = ''
locale.py(421):     if '.' in code:
locale.py(422):         langname, encoding = code.split('.')[:2]
locale.py(428):     lang_enc = langname
locale.py(429):     if encoding:
locale.py(430):         norm_encoding = encoding.replace('-', '')
locale.py(431):         norm_encoding = norm_encoding.replace('_', '')
locale.py(432):         lang_enc += '.' + norm_encoding
locale.py(433):     lookup_name = lang_enc
locale.py(434):     if modifier:
locale.py(436):     code = locale_alias.get(lookup_name, None)
locale.py(437):     if code is not None:
locale.py(441):     if modifier:
locale.py(452):     if encoding:
locale.py(454):         lookup_name = langname
locale.py(455):         if modifier:
locale.py(457):         code = locale_alias.get(lookup_name, None)
locale.py(458):         if code is not None:
locale.py(460):             if '@' not in code:
locale.py(461):                 return _replace_encoding(code, encoding)
 --- modulename: locale, funcname: _replace_encoding
locale.py(363):     if '.' in code:
locale.py(364):         langname = code[:code.index('.')]
locale.py(368):     norm_encoding = encodings.normalize_encoding(encoding)
 --- modulename: __init__, funcname: normalize_encoding
__init__.py(55):     if isinstance(encoding, bytes):
__init__.py(58):     chars = []
__init__.py(59):     punct = False
__init__.py(60):     for c in encoding:
__init__.py(61):         if c.isalnum() or c == '.':
__init__.py(62):             if punct and chars:
__init__.py(64):             if c.isascii():
__init__.py(65):                 chars.append(c)
__init__.py(66):             punct = False
__init__.py(60):     for c in encoding:
__init__.py(61):         if c.isalnum() or c == '.':
__init__.py(62):             if punct and chars:
__init__.py(64):             if c.isascii():
__init__.py(65):                 chars.append(c)
__init__.py(66):             punct = False
__init__.py(60):     for c in encoding:
__init__.py(61):         if c.isalnum() or c == '.':
__init__.py(62):             if punct and chars:
__init__.py(64):             if c.isascii():
__init__.py(65):                 chars.append(c)
__init__.py(66):             punct = False
__init__.py(60):     for c in encoding:
__init__.py(61):         if c.isalnum() or c == '.':
__init__.py(68):             punct = True
__init__.py(60):     for c in encoding:
__init__.py(61):         if c.isalnum() or c == '.':
__init__.py(62):             if punct and chars:
__init__.py(63):                 chars.append('_')
__init__.py(64):             if c.isascii():
__init__.py(65):                 chars.append(c)
__init__.py(66):             punct = False
__init__.py(60):     for c in encoding:
__init__.py(69):     return ''.join(chars)
locale.py(370):     norm_encoding = encodings.aliases.aliases.get(norm_encoding.lower(),
locale.py(371):                                                   norm_encoding)
locale.py(370):     norm_encoding = encodings.aliases.aliases.get(norm_encoding.lower(),
locale.py(373):     encoding = norm_encoding
locale.py(374):     norm_encoding = norm_encoding.lower()
locale.py(375):     if norm_encoding in locale_encoding_alias:
locale.py(376):         encoding = locale_encoding_alias[norm_encoding]
locale.py(383):     return langname + '.' + encoding
gettext.py(214):     COMPONENT_CODESET   = 1 << 0
gettext.py(215):     COMPONENT_TERRITORY = 1 << 1
gettext.py(216):     COMPONENT_MODIFIER  = 1 << 2
gettext.py(218):     mask = 0
gettext.py(219):     pos = loc.find('@')
gettext.py(220):     if pos >= 0:
gettext.py(225):         modifier = ''
gettext.py(226):     pos = loc.find('.')
gettext.py(227):     if pos >= 0:
gettext.py(228):         codeset = loc[pos:]
gettext.py(229):         loc = loc[:pos]
gettext.py(230):         mask |= COMPONENT_CODESET
gettext.py(233):     pos = loc.find('_')
gettext.py(234):     if pos >= 0:
gettext.py(235):         territory = loc[pos:]
gettext.py(236):         loc = loc[:pos]
gettext.py(237):         mask |= COMPONENT_TERRITORY
gettext.py(240):     language = loc
gettext.py(241):     ret = []
gettext.py(242):     for i in range(mask+1):
gettext.py(243):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(244):             val = language
gettext.py(245):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(246):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(247):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(248):             ret.append(val)
gettext.py(242):     for i in range(mask+1):
gettext.py(243):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(244):             val = language
gettext.py(245):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(246):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(247):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(248):             ret.append(val)
gettext.py(242):     for i in range(mask+1):
gettext.py(243):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(244):             val = language
gettext.py(245):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(246):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(247):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(248):             ret.append(val)
gettext.py(242):     for i in range(mask+1):
gettext.py(243):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(244):             val = language
gettext.py(245):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(246):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(247):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(248):             ret.append(val)
gettext.py(242):     for i in range(mask+1):
gettext.py(249):     ret.reverse()
gettext.py(250):     return ret
gettext.py(559):             if nelang not in nelangs:
gettext.py(560):                 nelangs.append(nelang)
gettext.py(558):         for nelang in _expand_lang(lang):
gettext.py(559):             if nelang not in nelangs:
gettext.py(560):                 nelangs.append(nelang)
gettext.py(558):         for nelang in _expand_lang(lang):
gettext.py(559):             if nelang not in nelangs:
gettext.py(560):                 nelangs.append(nelang)
gettext.py(558):         for nelang in _expand_lang(lang):
gettext.py(559):             if nelang not in nelangs:
gettext.py(560):                 nelangs.append(nelang)
gettext.py(558):         for nelang in _expand_lang(lang):
gettext.py(557):     for lang in languages:
gettext.py(558):         for nelang in _expand_lang(lang):
 --- modulename: gettext, funcname: _expand_lang
gettext.py(212):     import locale
gettext.py(213):     loc = locale.normalize(loc)
 --- modulename: locale, funcname: normalize
locale.py(413):     code = localename.lower()
locale.py(414):     if ':' in code:
locale.py(417):     if '@' in code:
locale.py(420):         modifier = ''
locale.py(421):     if '.' in code:
locale.py(424):         langname = code
locale.py(425):         encoding = ''
locale.py(428):     lang_enc = langname
locale.py(429):     if encoding:
locale.py(433):     lookup_name = lang_enc
locale.py(434):     if modifier:
locale.py(436):     code = locale_alias.get(lookup_name, None)
locale.py(437):     if code is not None:
locale.py(438):         return code
gettext.py(214):     COMPONENT_CODESET   = 1 << 0
gettext.py(215):     COMPONENT_TERRITORY = 1 << 1
gettext.py(216):     COMPONENT_MODIFIER  = 1 << 2
gettext.py(218):     mask = 0
gettext.py(219):     pos = loc.find('@')
gettext.py(220):     if pos >= 0:
gettext.py(225):         modifier = ''
gettext.py(226):     pos = loc.find('.')
gettext.py(227):     if pos >= 0:
gettext.py(232):         codeset = ''
gettext.py(233):     pos = loc.find('_')
gettext.py(234):     if pos >= 0:
gettext.py(239):         territory = ''
gettext.py(240):     language = loc
gettext.py(241):     ret = []
gettext.py(242):     for i in range(mask+1):
gettext.py(243):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(244):             val = language
gettext.py(245):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(246):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(247):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(248):             ret.append(val)
gettext.py(242):     for i in range(mask+1):
gettext.py(249):     ret.reverse()
gettext.py(250):     return ret
gettext.py(559):             if nelang not in nelangs:
gettext.py(560):                 nelangs.append(nelang)
gettext.py(558):         for nelang in _expand_lang(lang):
gettext.py(557):     for lang in languages:
gettext.py(562):     if all:
gettext.py(563):         result = []
gettext.py(566):     for lang in nelangs:
gettext.py(567):         if lang == 'C':
gettext.py(569):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
posixpath.py(76):     a = os.fspath(a)
posixpath.py(77):     sep = _get_sep(a)
 --- modulename: posixpath, funcname: _get_sep
posixpath.py(42):     if isinstance(path, bytes):
posixpath.py(45):         return '/'
posixpath.py(78):     path = a
posixpath.py(79):     try:
posixpath.py(80):         if not p:
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(83):             if b.startswith(sep):
posixpath.py(85):             elif not path or path.endswith(sep):
posixpath.py(88):                 path += sep + b
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(83):             if b.startswith(sep):
posixpath.py(85):             elif not path or path.endswith(sep):
posixpath.py(88):                 path += sep + b
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(83):             if b.startswith(sep):
posixpath.py(85):             elif not path or path.endswith(sep):
posixpath.py(88):                 path += sep + b
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(92):     return path
gettext.py(570):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
genericpath.py(18):     try:
genericpath.py(19):         os.stat(path)
genericpath.py(20):     except (OSError, ValueError):
genericpath.py(21):         return False
gettext.py(566):     for lang in nelangs:
gettext.py(567):         if lang == 'C':
gettext.py(569):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
posixpath.py(76):     a = os.fspath(a)
posixpath.py(77):     sep = _get_sep(a)
 --- modulename: posixpath, funcname: _get_sep
posixpath.py(42):     if isinstance(path, bytes):
posixpath.py(45):         return '/'
posixpath.py(78):     path = a
posixpath.py(79):     try:
posixpath.py(80):         if not p:
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(83):             if b.startswith(sep):
posixpath.py(85):             elif not path or path.endswith(sep):
posixpath.py(88):                 path += sep + b
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(83):             if b.startswith(sep):
posixpath.py(85):             elif not path or path.endswith(sep):
posixpath.py(88):                 path += sep + b
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(83):             if b.startswith(sep):
posixpath.py(85):             elif not path or path.endswith(sep):
posixpath.py(88):                 path += sep + b
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(92):     return path
gettext.py(570):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
genericpath.py(18):     try:
genericpath.py(19):         os.stat(path)
genericpath.py(20):     except (OSError, ValueError):
genericpath.py(21):         return False
gettext.py(566):     for lang in nelangs:
gettext.py(567):         if lang == 'C':
gettext.py(569):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
posixpath.py(76):     a = os.fspath(a)
posixpath.py(77):     sep = _get_sep(a)
 --- modulename: posixpath, funcname: _get_sep
posixpath.py(42):     if isinstance(path, bytes):
posixpath.py(45):         return '/'
posixpath.py(78):     path = a
posixpath.py(79):     try:
posixpath.py(80):         if not p:
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(83):             if b.startswith(sep):
posixpath.py(85):             elif not path or path.endswith(sep):
posixpath.py(88):                 path += sep + b
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(83):             if b.startswith(sep):
posixpath.py(85):             elif not path or path.endswith(sep):
posixpath.py(88):                 path += sep + b
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(83):             if b.startswith(sep):
posixpath.py(85):             elif not path or path.endswith(sep):
posixpath.py(88):                 path += sep + b
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(92):     return path
gettext.py(570):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
genericpath.py(18):     try:
genericpath.py(19):         os.stat(path)
genericpath.py(20):     except (OSError, ValueError):
genericpath.py(21):         return False
gettext.py(566):     for lang in nelangs:
gettext.py(567):         if lang == 'C':
gettext.py(569):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
posixpath.py(76):     a = os.fspath(a)
posixpath.py(77):     sep = _get_sep(a)
 --- modulename: posixpath, funcname: _get_sep
posixpath.py(42):     if isinstance(path, bytes):
posixpath.py(45):         return '/'
posixpath.py(78):     path = a
posixpath.py(79):     try:
posixpath.py(80):         if not p:
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(83):             if b.startswith(sep):
posixpath.py(85):             elif not path or path.endswith(sep):
posixpath.py(88):                 path += sep + b
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(83):             if b.startswith(sep):
posixpath.py(85):             elif not path or path.endswith(sep):
posixpath.py(88):                 path += sep + b
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(83):             if b.startswith(sep):
posixpath.py(85):             elif not path or path.endswith(sep):
posixpath.py(88):                 path += sep + b
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(92):     return path
gettext.py(570):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
genericpath.py(18):     try:
genericpath.py(19):         os.stat(path)
genericpath.py(20):     except (OSError, ValueError):
genericpath.py(21):         return False
gettext.py(566):     for lang in nelangs:
gettext.py(567):         if lang == 'C':
gettext.py(568):             break
gettext.py(575):     return result
gettext.py(588):     if not mofiles:
gettext.py(589):         if fallback:
gettext.py(591):         from errno import ENOENT
gettext.py(592):         raise FileNotFoundError(ENOENT,
gettext.py(593):                                 'No translation file found for domain', domain)
gettext.py(592):         raise FileNotFoundError(ENOENT,
gettext.py(667):     except OSError:
gettext.py(668):         return message
 --- modulename: argparse, funcname: add_argument_group
argparse.py(1444):         group = _ArgumentGroup(self, *args, **kwargs)
 --- modulename: argparse, funcname: __init__
argparse.py(1622):         update = kwargs.setdefault
argparse.py(1623):         update('conflict_handler', container.conflict_handler)
argparse.py(1624):         update('prefix_chars', container.prefix_chars)
argparse.py(1625):         update('argument_default', container.argument_default)
argparse.py(1626):         super_init = super(_ArgumentGroup, self).__init__
argparse.py(1627):         super_init(description=description, **kwargs)
 --- modulename: argparse, funcname: __init__
argparse.py(1315):         super(_ActionsContainer, self).__init__()
argparse.py(1317):         self.description = description
argparse.py(1318):         self.argument_default = argument_default
argparse.py(1319):         self.prefix_chars = prefix_chars
argparse.py(1320):         self.conflict_handler = conflict_handler
argparse.py(1323):         self._registries = {}
argparse.py(1326):         self.register('action', None, _StoreAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1327):         self.register('action', 'store', _StoreAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1328):         self.register('action', 'store_const', _StoreConstAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1329):         self.register('action', 'store_true', _StoreTrueAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1330):         self.register('action', 'store_false', _StoreFalseAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1331):         self.register('action', 'append', _AppendAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1332):         self.register('action', 'append_const', _AppendConstAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1333):         self.register('action', 'count', _CountAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1334):         self.register('action', 'help', _HelpAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1335):         self.register('action', 'version', _VersionAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1336):         self.register('action', 'parsers', _SubParsersAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1337):         self.register('action', 'extend', _ExtendAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1340):         self._get_handler()
 --- modulename: argparse, funcname: _get_handler
argparse.py(1573):         handler_func_name = '_handle_conflict_%s' % self.conflict_handler
argparse.py(1574):         try:
argparse.py(1575):             return getattr(self, handler_func_name)
argparse.py(1343):         self._actions = []
argparse.py(1344):         self._option_string_actions = {}
argparse.py(1347):         self._action_groups = []
argparse.py(1348):         self._mutually_exclusive_groups = []
argparse.py(1351):         self._defaults = {}
argparse.py(1354):         self._negative_number_matcher = _re.compile(r'^-\d+$|^-\d*\.\d+$')
 --- modulename: re, funcname: compile
re.py(251):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(290):     if isinstance(flags, RegexFlag):
re.py(292):     try:
re.py(293):         return _cache[type(pattern), pattern, flags]
argparse.py(1358):         self._has_negative_number_optionals = []
argparse.py(1630):         self.title = title
argparse.py(1631):         self._group_actions = []
argparse.py(1634):         self._registries = container._registries
argparse.py(1635):         self._actions = container._actions
argparse.py(1636):         self._option_string_actions = container._option_string_actions
argparse.py(1637):         self._defaults = container._defaults
argparse.py(1639):             container._has_negative_number_optionals
argparse.py(1638):         self._has_negative_number_optionals = \
argparse.py(1640):         self._mutually_exclusive_groups = container._mutually_exclusive_groups
argparse.py(1445):         self._action_groups.append(group)
argparse.py(1446):         return group
argparse.py(1730):         self._optionals = add_group(_('options'))
 --- modulename: gettext, funcname: gettext
gettext.py(742):     return dgettext(_current_domain, message)
 --- modulename: gettext, funcname: dgettext
gettext.py(665):     try:
gettext.py(666):         t = translation(domain, _localedirs.get(domain, None))
 --- modulename: gettext, funcname: translation
gettext.py(585):     if class_ is None:
gettext.py(586):         class_ = GNUTranslations
gettext.py(587):     mofiles = find(domain, localedir, languages, all=True)
 --- modulename: gettext, funcname: find
gettext.py(544):     if localedir is None:
gettext.py(545):         localedir = _default_localedir
gettext.py(546):     if languages is None:
gettext.py(547):         languages = []
gettext.py(548):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
gettext.py(549):             val = os.environ.get(envar)
 --- modulename: _collections_abc, funcname: get
_collections_abc.py(818):         try:
_collections_abc.py(819):             return self[key]
 --- modulename: os, funcname: __getitem__
os.py(676):         try:
os.py(677):             value = self._data[self.encodekey(key)]
 --- modulename: os, funcname: encode
os.py(756):             if not isinstance(value, str):
os.py(758):             return value.encode(encoding, 'surrogateescape')
os.py(678):         except KeyError:
os.py(680):             raise KeyError(key) from None
_collections_abc.py(820):         except KeyError:
_collections_abc.py(821):             return default
gettext.py(550):             if val:
gettext.py(548):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
gettext.py(549):             val = os.environ.get(envar)
 --- modulename: _collections_abc, funcname: get
_collections_abc.py(818):         try:
_collections_abc.py(819):             return self[key]
 --- modulename: os, funcname: __getitem__
os.py(676):         try:
os.py(677):             value = self._data[self.encodekey(key)]
 --- modulename: os, funcname: encode
os.py(756):             if not isinstance(value, str):
os.py(758):             return value.encode(encoding, 'surrogateescape')
os.py(678):         except KeyError:
os.py(680):             raise KeyError(key) from None
_collections_abc.py(820):         except KeyError:
_collections_abc.py(821):             return default
gettext.py(550):             if val:
gettext.py(548):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
gettext.py(549):             val = os.environ.get(envar)
 --- modulename: _collections_abc, funcname: get
_collections_abc.py(818):         try:
_collections_abc.py(819):             return self[key]
 --- modulename: os, funcname: __getitem__
os.py(676):         try:
os.py(677):             value = self._data[self.encodekey(key)]
 --- modulename: os, funcname: encode
os.py(756):             if not isinstance(value, str):
os.py(758):             return value.encode(encoding, 'surrogateescape')
os.py(678):         except KeyError:
os.py(680):             raise KeyError(key) from None
_collections_abc.py(820):         except KeyError:
_collections_abc.py(821):             return default
gettext.py(550):             if val:
gettext.py(548):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
gettext.py(549):             val = os.environ.get(envar)
 --- modulename: _collections_abc, funcname: get
_collections_abc.py(818):         try:
_collections_abc.py(819):             return self[key]
 --- modulename: os, funcname: __getitem__
os.py(676):         try:
os.py(677):             value = self._data[self.encodekey(key)]
 --- modulename: os, funcname: encode
os.py(756):             if not isinstance(value, str):
os.py(758):             return value.encode(encoding, 'surrogateescape')
os.py(681):         return self.decodevalue(value)
 --- modulename: os, funcname: decode
os.py(760):             return value.decode(encoding, 'surrogateescape')
gettext.py(550):             if val:
gettext.py(551):                 languages = val.split(':')
gettext.py(552):                 break
gettext.py(553):         if 'C' not in languages:
gettext.py(554):             languages.append('C')
gettext.py(556):     nelangs = []
gettext.py(557):     for lang in languages:
gettext.py(558):         for nelang in _expand_lang(lang):
 --- modulename: gettext, funcname: _expand_lang
gettext.py(212):     import locale
gettext.py(213):     loc = locale.normalize(loc)
 --- modulename: locale, funcname: normalize
locale.py(413):     code = localename.lower()
locale.py(414):     if ':' in code:
locale.py(417):     if '@' in code:
locale.py(420):         modifier = ''
locale.py(421):     if '.' in code:
locale.py(422):         langname, encoding = code.split('.')[:2]
locale.py(428):     lang_enc = langname
locale.py(429):     if encoding:
locale.py(430):         norm_encoding = encoding.replace('-', '')
locale.py(431):         norm_encoding = norm_encoding.replace('_', '')
locale.py(432):         lang_enc += '.' + norm_encoding
locale.py(433):     lookup_name = lang_enc
locale.py(434):     if modifier:
locale.py(436):     code = locale_alias.get(lookup_name, None)
locale.py(437):     if code is not None:
locale.py(441):     if modifier:
locale.py(452):     if encoding:
locale.py(454):         lookup_name = langname
locale.py(455):         if modifier:
locale.py(457):         code = locale_alias.get(lookup_name, None)
locale.py(458):         if code is not None:
locale.py(460):             if '@' not in code:
locale.py(461):                 return _replace_encoding(code, encoding)
 --- modulename: locale, funcname: _replace_encoding
locale.py(363):     if '.' in code:
locale.py(364):         langname = code[:code.index('.')]
locale.py(368):     norm_encoding = encodings.normalize_encoding(encoding)
 --- modulename: __init__, funcname: normalize_encoding
__init__.py(55):     if isinstance(encoding, bytes):
__init__.py(58):     chars = []
__init__.py(59):     punct = False
__init__.py(60):     for c in encoding:
__init__.py(61):         if c.isalnum() or c == '.':
__init__.py(62):             if punct and chars:
__init__.py(64):             if c.isascii():
__init__.py(65):                 chars.append(c)
__init__.py(66):             punct = False
__init__.py(60):     for c in encoding:
__init__.py(61):         if c.isalnum() or c == '.':
__init__.py(62):             if punct and chars:
__init__.py(64):             if c.isascii():
__init__.py(65):                 chars.append(c)
__init__.py(66):             punct = False
__init__.py(60):     for c in encoding:
__init__.py(61):         if c.isalnum() or c == '.':
__init__.py(62):             if punct and chars:
__init__.py(64):             if c.isascii():
__init__.py(65):                 chars.append(c)
__init__.py(66):             punct = False
__init__.py(60):     for c in encoding:
__init__.py(61):         if c.isalnum() or c == '.':
__init__.py(68):             punct = True
__init__.py(60):     for c in encoding:
__init__.py(61):         if c.isalnum() or c == '.':
__init__.py(62):             if punct and chars:
__init__.py(63):                 chars.append('_')
__init__.py(64):             if c.isascii():
__init__.py(65):                 chars.append(c)
__init__.py(66):             punct = False
__init__.py(60):     for c in encoding:
__init__.py(69):     return ''.join(chars)
locale.py(370):     norm_encoding = encodings.aliases.aliases.get(norm_encoding.lower(),
locale.py(371):                                                   norm_encoding)
locale.py(370):     norm_encoding = encodings.aliases.aliases.get(norm_encoding.lower(),
locale.py(373):     encoding = norm_encoding
locale.py(374):     norm_encoding = norm_encoding.lower()
locale.py(375):     if norm_encoding in locale_encoding_alias:
locale.py(376):         encoding = locale_encoding_alias[norm_encoding]
locale.py(383):     return langname + '.' + encoding
gettext.py(214):     COMPONENT_CODESET   = 1 << 0
gettext.py(215):     COMPONENT_TERRITORY = 1 << 1
gettext.py(216):     COMPONENT_MODIFIER  = 1 << 2
gettext.py(218):     mask = 0
gettext.py(219):     pos = loc.find('@')
gettext.py(220):     if pos >= 0:
gettext.py(225):         modifier = ''
gettext.py(226):     pos = loc.find('.')
gettext.py(227):     if pos >= 0:
gettext.py(228):         codeset = loc[pos:]
gettext.py(229):         loc = loc[:pos]
gettext.py(230):         mask |= COMPONENT_CODESET
gettext.py(233):     pos = loc.find('_')
gettext.py(234):     if pos >= 0:
gettext.py(235):         territory = loc[pos:]
gettext.py(236):         loc = loc[:pos]
gettext.py(237):         mask |= COMPONENT_TERRITORY
gettext.py(240):     language = loc
gettext.py(241):     ret = []
gettext.py(242):     for i in range(mask+1):
gettext.py(243):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(244):             val = language
gettext.py(245):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(246):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(247):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(248):             ret.append(val)
gettext.py(242):     for i in range(mask+1):
gettext.py(243):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(244):             val = language
gettext.py(245):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(246):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(247):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(248):             ret.append(val)
gettext.py(242):     for i in range(mask+1):
gettext.py(243):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(244):             val = language
gettext.py(245):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(246):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(247):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(248):             ret.append(val)
gettext.py(242):     for i in range(mask+1):
gettext.py(243):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(244):             val = language
gettext.py(245):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(246):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(247):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(248):             ret.append(val)
gettext.py(242):     for i in range(mask+1):
gettext.py(249):     ret.reverse()
gettext.py(250):     return ret
gettext.py(559):             if nelang not in nelangs:
gettext.py(560):                 nelangs.append(nelang)
gettext.py(558):         for nelang in _expand_lang(lang):
gettext.py(559):             if nelang not in nelangs:
gettext.py(560):                 nelangs.append(nelang)
gettext.py(558):         for nelang in _expand_lang(lang):
gettext.py(559):             if nelang not in nelangs:
gettext.py(560):                 nelangs.append(nelang)
gettext.py(558):         for nelang in _expand_lang(lang):
gettext.py(559):             if nelang not in nelangs:
gettext.py(560):                 nelangs.append(nelang)
gettext.py(558):         for nelang in _expand_lang(lang):
gettext.py(557):     for lang in languages:
gettext.py(558):         for nelang in _expand_lang(lang):
 --- modulename: gettext, funcname: _expand_lang
gettext.py(212):     import locale
gettext.py(213):     loc = locale.normalize(loc)
 --- modulename: locale, funcname: normalize
locale.py(413):     code = localename.lower()
locale.py(414):     if ':' in code:
locale.py(417):     if '@' in code:
locale.py(420):         modifier = ''
locale.py(421):     if '.' in code:
locale.py(424):         langname = code
locale.py(425):         encoding = ''
locale.py(428):     lang_enc = langname
locale.py(429):     if encoding:
locale.py(433):     lookup_name = lang_enc
locale.py(434):     if modifier:
locale.py(436):     code = locale_alias.get(lookup_name, None)
locale.py(437):     if code is not None:
locale.py(438):         return code
gettext.py(214):     COMPONENT_CODESET   = 1 << 0
gettext.py(215):     COMPONENT_TERRITORY = 1 << 1
gettext.py(216):     COMPONENT_MODIFIER  = 1 << 2
gettext.py(218):     mask = 0
gettext.py(219):     pos = loc.find('@')
gettext.py(220):     if pos >= 0:
gettext.py(225):         modifier = ''
gettext.py(226):     pos = loc.find('.')
gettext.py(227):     if pos >= 0:
gettext.py(232):         codeset = ''
gettext.py(233):     pos = loc.find('_')
gettext.py(234):     if pos >= 0:
gettext.py(239):         territory = ''
gettext.py(240):     language = loc
gettext.py(241):     ret = []
gettext.py(242):     for i in range(mask+1):
gettext.py(243):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(244):             val = language
gettext.py(245):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(246):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(247):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(248):             ret.append(val)
gettext.py(242):     for i in range(mask+1):
gettext.py(249):     ret.reverse()
gettext.py(250):     return ret
gettext.py(559):             if nelang not in nelangs:
gettext.py(560):                 nelangs.append(nelang)
gettext.py(558):         for nelang in _expand_lang(lang):
gettext.py(557):     for lang in languages:
gettext.py(562):     if all:
gettext.py(563):         result = []
gettext.py(566):     for lang in nelangs:
gettext.py(567):         if lang == 'C':
gettext.py(569):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
posixpath.py(76):     a = os.fspath(a)
posixpath.py(77):     sep = _get_sep(a)
 --- modulename: posixpath, funcname: _get_sep
posixpath.py(42):     if isinstance(path, bytes):
posixpath.py(45):         return '/'
posixpath.py(78):     path = a
posixpath.py(79):     try:
posixpath.py(80):         if not p:
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(83):             if b.startswith(sep):
posixpath.py(85):             elif not path or path.endswith(sep):
posixpath.py(88):                 path += sep + b
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(83):             if b.startswith(sep):
posixpath.py(85):             elif not path or path.endswith(sep):
posixpath.py(88):                 path += sep + b
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(83):             if b.startswith(sep):
posixpath.py(85):             elif not path or path.endswith(sep):
posixpath.py(88):                 path += sep + b
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(92):     return path
gettext.py(570):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
genericpath.py(18):     try:
genericpath.py(19):         os.stat(path)
genericpath.py(20):     except (OSError, ValueError):
genericpath.py(21):         return False
gettext.py(566):     for lang in nelangs:
gettext.py(567):         if lang == 'C':
gettext.py(569):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
posixpath.py(76):     a = os.fspath(a)
posixpath.py(77):     sep = _get_sep(a)
 --- modulename: posixpath, funcname: _get_sep
posixpath.py(42):     if isinstance(path, bytes):
posixpath.py(45):         return '/'
posixpath.py(78):     path = a
posixpath.py(79):     try:
posixpath.py(80):         if not p:
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(83):             if b.startswith(sep):
posixpath.py(85):             elif not path or path.endswith(sep):
posixpath.py(88):                 path += sep + b
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(83):             if b.startswith(sep):
posixpath.py(85):             elif not path or path.endswith(sep):
posixpath.py(88):                 path += sep + b
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(83):             if b.startswith(sep):
posixpath.py(85):             elif not path or path.endswith(sep):
posixpath.py(88):                 path += sep + b
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(92):     return path
gettext.py(570):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
genericpath.py(18):     try:
genericpath.py(19):         os.stat(path)
genericpath.py(20):     except (OSError, ValueError):
genericpath.py(21):         return False
gettext.py(566):     for lang in nelangs:
gettext.py(567):         if lang == 'C':
gettext.py(569):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
posixpath.py(76):     a = os.fspath(a)
posixpath.py(77):     sep = _get_sep(a)
 --- modulename: posixpath, funcname: _get_sep
posixpath.py(42):     if isinstance(path, bytes):
posixpath.py(45):         return '/'
posixpath.py(78):     path = a
posixpath.py(79):     try:
posixpath.py(80):         if not p:
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(83):             if b.startswith(sep):
posixpath.py(85):             elif not path or path.endswith(sep):
posixpath.py(88):                 path += sep + b
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(83):             if b.startswith(sep):
posixpath.py(85):             elif not path or path.endswith(sep):
posixpath.py(88):                 path += sep + b
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(83):             if b.startswith(sep):
posixpath.py(85):             elif not path or path.endswith(sep):
posixpath.py(88):                 path += sep + b
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(92):     return path
gettext.py(570):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
genericpath.py(18):     try:
genericpath.py(19):         os.stat(path)
genericpath.py(20):     except (OSError, ValueError):
genericpath.py(21):         return False
gettext.py(566):     for lang in nelangs:
gettext.py(567):         if lang == 'C':
gettext.py(569):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
posixpath.py(76):     a = os.fspath(a)
posixpath.py(77):     sep = _get_sep(a)
 --- modulename: posixpath, funcname: _get_sep
posixpath.py(42):     if isinstance(path, bytes):
posixpath.py(45):         return '/'
posixpath.py(78):     path = a
posixpath.py(79):     try:
posixpath.py(80):         if not p:
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(83):             if b.startswith(sep):
posixpath.py(85):             elif not path or path.endswith(sep):
posixpath.py(88):                 path += sep + b
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(83):             if b.startswith(sep):
posixpath.py(85):             elif not path or path.endswith(sep):
posixpath.py(88):                 path += sep + b
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(83):             if b.startswith(sep):
posixpath.py(85):             elif not path or path.endswith(sep):
posixpath.py(88):                 path += sep + b
posixpath.py(82):         for b in map(os.fspath, p):
posixpath.py(92):     return path
gettext.py(570):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
genericpath.py(18):     try:
genericpath.py(19):         os.stat(path)
genericpath.py(20):     except (OSError, ValueError):
genericpath.py(21):         return False
gettext.py(566):     for lang in nelangs:
gettext.py(567):         if lang == 'C':
gettext.py(568):             break
gettext.py(575):     return result
gettext.py(588):     if not mofiles:
gettext.py(589):         if fallback:
gettext.py(591):         from errno import ENOENT
gettext.py(592):         raise FileNotFoundError(ENOENT,
gettext.py(593):                                 'No translation file found for domain', domain)
gettext.py(592):         raise FileNotFoundError(ENOENT,
gettext.py(667):     except OSError:
gettext.py(668):         return message
 --- modulename: argparse, funcname: add_argument_group
argparse.py(1444):         group = _ArgumentGroup(self, *args, **kwargs)
 --- modulename: argparse, funcname: __init__
argparse.py(1622):         update = kwargs.setdefault
argparse.py(1623):         update('conflict_handler', container.conflict_handler)
argparse.py(1624):         update('prefix_chars', container.prefix_chars)
argparse.py(1625):         update('argument_default', container.argument_default)
argparse.py(1626):         super_init = super(_ArgumentGroup, self).__init__
argparse.py(1627):         super_init(description=description, **kwargs)
 --- modulename: argparse, funcname: __init__
argparse.py(1315):         super(_ActionsContainer, self).__init__()
argparse.py(1317):         self.description = description
argparse.py(1318):         self.argument_default = argument_default
argparse.py(1319):         self.prefix_chars = prefix_chars
argparse.py(1320):         self.conflict_handler = conflict_handler
argparse.py(1323):         self._registries = {}
argparse.py(1326):         self.register('action', None, _StoreAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1327):         self.register('action', 'store', _StoreAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1328):         self.register('action', 'store_const', _StoreConstAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1329):         self.register('action', 'store_true', _StoreTrueAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1330):         self.register('action', 'store_false', _StoreFalseAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1331):         self.register('action', 'append', _AppendAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1332):         self.register('action', 'append_const', _AppendConstAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1333):         self.register('action', 'count', _CountAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1334):         self.register('action', 'help', _HelpAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1335):         self.register('action', 'version', _VersionAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1336):         self.register('action', 'parsers', _SubParsersAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1337):         self.register('action', 'extend', _ExtendAction)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1340):         self._get_handler()
 --- modulename: argparse, funcname: _get_handler
argparse.py(1573):         handler_func_name = '_handle_conflict_%s' % self.conflict_handler
argparse.py(1574):         try:
argparse.py(1575):             return getattr(self, handler_func_name)
argparse.py(1343):         self._actions = []
argparse.py(1344):         self._option_string_actions = {}
argparse.py(1347):         self._action_groups = []
argparse.py(1348):         self._mutually_exclusive_groups = []
argparse.py(1351):         self._defaults = {}
argparse.py(1354):         self._negative_number_matcher = _re.compile(r'^-\d+$|^-\d*\.\d+$')
 --- modulename: re, funcname: compile
re.py(251):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(290):     if isinstance(flags, RegexFlag):
re.py(292):     try:
re.py(293):         return _cache[type(pattern), pattern, flags]
argparse.py(1358):         self._has_negative_number_optionals = []
argparse.py(1630):         self.title = title
argparse.py(1631):         self._group_actions = []
argparse.py(1634):         self._registries = container._registries
argparse.py(1635):         self._actions = container._actions
argparse.py(1636):         self._option_string_actions = container._option_string_actions
argparse.py(1637):         self._defaults = container._defaults
argparse.py(1639):             container._has_negative_number_optionals
argparse.py(1638):         self._has_negative_number_optionals = \
argparse.py(1640):         self._mutually_exclusive_groups = container._mutually_exclusive_groups
argparse.py(1445):         self._action_groups.append(group)
argparse.py(1446):         return group
argparse.py(1731):         self._subparsers = None
argparse.py(1734):         def identity(string):
argparse.py(1736):         self.register('type', None, identity)
 --- modulename: argparse, funcname: register
argparse.py(1364):         registry = self._registries.setdefault(registry_name, {})
argparse.py(1365):         registry[value] = object
argparse.py(1740):         default_prefix = '-' if '-' in prefix_chars else prefix_chars[0]
argparse.py(1741):         if self.add_help:
argparse.py(1748):         for parent in parents:
input_handler.py(170):         parser.add_argument("--source", type=str, help="Specify source file")
 --- modulename: argparse, funcname: add_argument
argparse.py(1401):         chars = self.prefix_chars
argparse.py(1402):         if not args or len(args) == 1 and args[0][0] not in chars:
argparse.py(1409):             kwargs = self._get_optional_kwargs(*args, **kwargs)
 --- modulename: argparse, funcname: _get_optional_kwargs
argparse.py(1535):         option_strings = []
argparse.py(1536):         long_option_strings = []
argparse.py(1537):         for option_string in args:
argparse.py(1539):             if not option_string[0] in self.prefix_chars:
argparse.py(1547):             option_strings.append(option_string)
argparse.py(1548):             if len(option_string) > 1 and option_string[1] in self.prefix_chars:
argparse.py(1549):                 long_option_strings.append(option_string)
argparse.py(1537):         for option_string in args:
argparse.py(1552):         dest = kwargs.pop('dest', None)
argparse.py(1553):         if dest is None:
argparse.py(1554):             if long_option_strings:
argparse.py(1555):                 dest_option_string = long_option_strings[0]
argparse.py(1558):             dest = dest_option_string.lstrip(self.prefix_chars)
argparse.py(1559):             if not dest:
argparse.py(1562):             dest = dest.replace('-', '_')
argparse.py(1565):         return dict(kwargs, dest=dest, option_strings=option_strings)
argparse.py(1412):         if 'default' not in kwargs:
argparse.py(1413):             dest = kwargs['dest']
argparse.py(1414):             if dest in self._defaults:
argparse.py(1416):             elif self.argument_default is not None:
argparse.py(1420):         action_class = self._pop_action_class(kwargs)
 --- modulename: argparse, funcname: _pop_action_class
argparse.py(1568):         action = kwargs.pop('action', default)
argparse.py(1569):         return self._registry_get('action', action, action)
 --- modulename: argparse, funcname: _registry_get
argparse.py(1368):         return self._registries[registry_name].get(value, default)
argparse.py(1421):         if not callable(action_class):
argparse.py(1423):         action = action_class(**kwargs)
 --- modulename: argparse, funcname: __init__
argparse.py(917):         if nargs == 0:
argparse.py(921):         if const is not None and nargs != OPTIONAL:
argparse.py(923):         super(_StoreAction, self).__init__(
argparse.py(924):             option_strings=option_strings,
argparse.py(925):             dest=dest,
argparse.py(926):             nargs=nargs,
argparse.py(927):             const=const,
argparse.py(928):             default=default,
argparse.py(929):             type=type,
argparse.py(930):             choices=choices,
argparse.py(931):             required=required,
argparse.py(932):             help=help,
argparse.py(933):             metavar=metavar)
argparse.py(923):         super(_StoreAction, self).__init__(
 --- modulename: argparse, funcname: __init__
argparse.py(831):         self.option_strings = option_strings
argparse.py(832):         self.dest = dest
argparse.py(833):         self.nargs = nargs
argparse.py(834):         self.const = const
argparse.py(835):         self.default = default
argparse.py(836):         self.type = type
argparse.py(837):         self.choices = choices
argparse.py(838):         self.required = required
argparse.py(839):         self.help = help
argparse.py(840):         self.metavar = metavar
argparse.py(1426):         type_func = self._registry_get('type', action.type, action.type)
 --- modulename: argparse, funcname: _registry_get
argparse.py(1368):         return self._registries[registry_name].get(value, default)
argparse.py(1427):         if not callable(type_func):
argparse.py(1430):         if type_func is FileType:
argparse.py(1435):         if hasattr(self, "_get_formatter"):
argparse.py(1436):             try:
argparse.py(1437):                 self._get_formatter()._format_args(action, None)
 --- modulename: argparse, funcname: _get_formatter
argparse.py(2543):         return self.formatter_class(prog=self.prog)
 --- modulename: argparse, funcname: __init__
argparse.py(168):         if width is None:
argparse.py(169):             import shutil
argparse.py(170):             width = shutil.get_terminal_size().columns
 --- modulename: shutil, funcname: get_terminal_size
shutil.py(1397):     try:
shutil.py(1398):         columns = int(os.environ['COLUMNS'])
 --- modulename: os, funcname: __getitem__
os.py(676):         try:
os.py(677):             value = self._data[self.encodekey(key)]
 --- modulename: os, funcname: encode
os.py(756):             if not isinstance(value, str):
os.py(758):             return value.encode(encoding, 'surrogateescape')
os.py(678):         except KeyError:
os.py(680):             raise KeyError(key) from None
shutil.py(1399):     except (KeyError, ValueError):
shutil.py(1400):         columns = 0
shutil.py(1402):     try:
shutil.py(1403):         lines = int(os.environ['LINES'])
 --- modulename: os, funcname: __getitem__
os.py(676):         try:
os.py(677):             value = self._data[self.encodekey(key)]
 --- modulename: os, funcname: encode
os.py(756):             if not isinstance(value, str):
os.py(758):             return value.encode(encoding, 'surrogateescape')
os.py(678):         except KeyError:
os.py(680):             raise KeyError(key) from None
shutil.py(1404):     except (KeyError, ValueError):
shutil.py(1405):         lines = 0
shutil.py(1408):     if columns <= 0 or lines <= 0:
shutil.py(1409):         try:
shutil.py(1410):             size = os.get_terminal_size(sys.__stdout__.fileno())
shutil.py(1411):         except (AttributeError, ValueError, OSError):
shutil.py(1414):             size = os.terminal_size(fallback)
shutil.py(1415):         if columns <= 0:
shutil.py(1416):             columns = size.columns
shutil.py(1417):         if lines <= 0:
shutil.py(1418):             lines = size.lines
shutil.py(1420):     return os.terminal_size((columns, lines))
argparse.py(171):             width -= 2
argparse.py(173):         self._prog = prog
argparse.py(174):         self._indent_increment = indent_increment
argparse.py(175):         self._max_help_position = min(max_help_position,
argparse.py(176):                                       max(width - 20, indent_increment * 2))
argparse.py(175):         self._max_help_position = min(max_help_position,
argparse.py(177):         self._width = width
argparse.py(179):         self._current_indent = 0
argparse.py(180):         self._level = 0
argparse.py(181):         self._action_max_length = 0
argparse.py(183):         self._root_section = self._Section(self, None)
 --- modulename: argparse, funcname: __init__
argparse.py(204):             self.formatter = formatter
argparse.py(205):             self.parent = parent
argparse.py(206):             self.heading = heading
argparse.py(207):             self.items = []
argparse.py(184):         self._current_section = self._root_section
argparse.py(186):         self._whitespace_matcher = _re.compile(r'\s+', _re.ASCII)
 --- modulename: re, funcname: compile
re.py(251):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(290):     if isinstance(flags, RegexFlag):
re.py(291):         flags = flags.value
 --- modulename: types, funcname: __get__
types.py(177):         if instance is None:
types.py(181):         elif self.fget is None:
types.py(183):         return self.fget(instance)
 --- modulename: enum, funcname: value
enum.py(804):         return self._value_
re.py(292):     try:
re.py(293):         return _cache[type(pattern), pattern, flags]
argparse.py(187):         self._long_break_matcher = _re.compile(r'\n\n\n+')
 --- modulename: re, funcname: compile
re.py(251):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(290):     if isinstance(flags, RegexFlag):
re.py(292):     try:
re.py(293):         return _cache[type(pattern), pattern, flags]
 --- modulename: argparse, funcname: _format_args
argparse.py(592):         get_metavar = self._metavar_formatter(action, default_metavar)
 --- modulename: argparse, funcname: _metavar_formatter
argparse.py(576):         if action.metavar is not None:
argparse.py(578):         elif action.choices is not None:
argparse.py(582):             result = default_metavar
argparse.py(584):         def format(tuple_size):
argparse.py(589):         return format
argparse.py(593):         if action.nargs is None:
argparse.py(594):             result = '%s' % get_metavar(1)
 --- modulename: argparse, funcname: format
argparse.py(585):             if isinstance(result, tuple):
argparse.py(588):                 return (result, ) * tuple_size
argparse.py(617):         return result
argparse.py(1441):         return self._add_action(action)
 --- modulename: argparse, funcname: _add_action
argparse.py(1806):         if action.option_strings:
argparse.py(1807):             self._optionals._add_action(action)
 --- modulename: argparse, funcname: _add_action
argparse.py(1643):         action = super(_ArgumentGroup, self)._add_action(action)
 --- modulename: argparse, funcname: _add_action
argparse.py(1455):         self._check_conflict(action)
 --- modulename: argparse, funcname: _check_conflict
argparse.py(1583):         confl_optionals = []
argparse.py(1584):         for option_string in action.option_strings:
argparse.py(1585):             if option_string in self._option_string_actions:
argparse.py(1584):         for option_string in action.option_strings:
argparse.py(1590):         if confl_optionals:
argparse.py(1458):         self._actions.append(action)
argparse.py(1459):         action.container = self
argparse.py(1462):         for option_string in action.option_strings:
argparse.py(1463):             self._option_string_actions[option_string] = action
argparse.py(1462):         for option_string in action.option_strings:
argparse.py(1466):         for option_string in action.option_strings:
argparse.py(1467):             if self._negative_number_matcher.match(option_string):
argparse.py(1466):         for option_string in action.option_strings:
argparse.py(1472):         return action
argparse.py(1644):         self._group_actions.append(action)
argparse.py(1645):         return action
argparse.py(1810):         return action
input_handler.py(172):         parser.add_argument("--input", type=str, help="Specify input file")
 --- modulename: argparse, funcname: add_argument
argparse.py(1401):         chars = self.prefix_chars
argparse.py(1402):         if not args or len(args) == 1 and args[0][0] not in chars:
argparse.py(1409):             kwargs = self._get_optional_kwargs(*args, **kwargs)
 --- modulename: argparse, funcname: _get_optional_kwargs
argparse.py(1535):         option_strings = []
argparse.py(1536):         long_option_strings = []
argparse.py(1537):         for option_string in args:
argparse.py(1539):             if not option_string[0] in self.prefix_chars:
argparse.py(1547):             option_strings.append(option_string)
argparse.py(1548):             if len(option_string) > 1 and option_string[1] in self.prefix_chars:
argparse.py(1549):                 long_option_strings.append(option_string)
argparse.py(1537):         for option_string in args:
argparse.py(1552):         dest = kwargs.pop('dest', None)
argparse.py(1553):         if dest is None:
argparse.py(1554):             if long_option_strings:
argparse.py(1555):                 dest_option_string = long_option_strings[0]
argparse.py(1558):             dest = dest_option_string.lstrip(self.prefix_chars)
argparse.py(1559):             if not dest:
argparse.py(1562):             dest = dest.replace('-', '_')
argparse.py(1565):         return dict(kwargs, dest=dest, option_strings=option_strings)
argparse.py(1412):         if 'default' not in kwargs:
argparse.py(1413):             dest = kwargs['dest']
argparse.py(1414):             if dest in self._defaults:
argparse.py(1416):             elif self.argument_default is not None:
argparse.py(1420):         action_class = self._pop_action_class(kwargs)
 --- modulename: argparse, funcname: _pop_action_class
argparse.py(1568):         action = kwargs.pop('action', default)
argparse.py(1569):         return self._registry_get('action', action, action)
 --- modulename: argparse, funcname: _registry_get
argparse.py(1368):         return self._registries[registry_name].get(value, default)
argparse.py(1421):         if not callable(action_class):
argparse.py(1423):         action = action_class(**kwargs)
 --- modulename: argparse, funcname: __init__
argparse.py(917):         if nargs == 0:
argparse.py(921):         if const is not None and nargs != OPTIONAL:
argparse.py(923):         super(_StoreAction, self).__init__(
argparse.py(924):             option_strings=option_strings,
argparse.py(925):             dest=dest,
argparse.py(926):             nargs=nargs,
argparse.py(927):             const=const,
argparse.py(928):             default=default,
argparse.py(929):             type=type,
argparse.py(930):             choices=choices,
argparse.py(931):             required=required,
argparse.py(932):             help=help,
argparse.py(933):             metavar=metavar)
argparse.py(923):         super(_StoreAction, self).__init__(
 --- modulename: argparse, funcname: __init__
argparse.py(831):         self.option_strings = option_strings
argparse.py(832):         self.dest = dest
argparse.py(833):         self.nargs = nargs
argparse.py(834):         self.const = const
argparse.py(835):         self.default = default
argparse.py(836):         self.type = type
argparse.py(837):         self.choices = choices
argparse.py(838):         self.required = required
argparse.py(839):         self.help = help
argparse.py(840):         self.metavar = metavar
argparse.py(1426):         type_func = self._registry_get('type', action.type, action.type)
 --- modulename: argparse, funcname: _registry_get
argparse.py(1368):         return self._registries[registry_name].get(value, default)
argparse.py(1427):         if not callable(type_func):
argparse.py(1430):         if type_func is FileType:
argparse.py(1435):         if hasattr(self, "_get_formatter"):
argparse.py(1436):             try:
argparse.py(1437):                 self._get_formatter()._format_args(action, None)
 --- modulename: argparse, funcname: _get_formatter
argparse.py(2543):         return self.formatter_class(prog=self.prog)
 --- modulename: argparse, funcname: __init__
argparse.py(168):         if width is None:
argparse.py(169):             import shutil
argparse.py(170):             width = shutil.get_terminal_size().columns
 --- modulename: shutil, funcname: get_terminal_size
shutil.py(1397):     try:
shutil.py(1398):         columns = int(os.environ['COLUMNS'])
 --- modulename: os, funcname: __getitem__
os.py(676):         try:
os.py(677):             value = self._data[self.encodekey(key)]
 --- modulename: os, funcname: encode
os.py(756):             if not isinstance(value, str):
os.py(758):             return value.encode(encoding, 'surrogateescape')
os.py(678):         except KeyError:
os.py(680):             raise KeyError(key) from None
shutil.py(1399):     except (KeyError, ValueError):
shutil.py(1400):         columns = 0
shutil.py(1402):     try:
shutil.py(1403):         lines = int(os.environ['LINES'])
 --- modulename: os, funcname: __getitem__
os.py(676):         try:
os.py(677):             value = self._data[self.encodekey(key)]
 --- modulename: os, funcname: encode
os.py(756):             if not isinstance(value, str):
os.py(758):             return value.encode(encoding, 'surrogateescape')
os.py(678):         except KeyError:
os.py(680):             raise KeyError(key) from None
shutil.py(1404):     except (KeyError, ValueError):
shutil.py(1405):         lines = 0
shutil.py(1408):     if columns <= 0 or lines <= 0:
shutil.py(1409):         try:
shutil.py(1410):             size = os.get_terminal_size(sys.__stdout__.fileno())
shutil.py(1411):         except (AttributeError, ValueError, OSError):
shutil.py(1414):             size = os.terminal_size(fallback)
shutil.py(1415):         if columns <= 0:
shutil.py(1416):             columns = size.columns
shutil.py(1417):         if lines <= 0:
shutil.py(1418):             lines = size.lines
shutil.py(1420):     return os.terminal_size((columns, lines))
argparse.py(171):             width -= 2
argparse.py(173):         self._prog = prog
argparse.py(174):         self._indent_increment = indent_increment
argparse.py(175):         self._max_help_position = min(max_help_position,
argparse.py(176):                                       max(width - 20, indent_increment * 2))
argparse.py(175):         self._max_help_position = min(max_help_position,
argparse.py(177):         self._width = width
argparse.py(179):         self._current_indent = 0
argparse.py(180):         self._level = 0
argparse.py(181):         self._action_max_length = 0
argparse.py(183):         self._root_section = self._Section(self, None)
 --- modulename: argparse, funcname: __init__
argparse.py(204):             self.formatter = formatter
argparse.py(205):             self.parent = parent
argparse.py(206):             self.heading = heading
argparse.py(207):             self.items = []
argparse.py(184):         self._current_section = self._root_section
argparse.py(186):         self._whitespace_matcher = _re.compile(r'\s+', _re.ASCII)
 --- modulename: re, funcname: compile
re.py(251):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(290):     if isinstance(flags, RegexFlag):
re.py(291):         flags = flags.value
 --- modulename: types, funcname: __get__
types.py(177):         if instance is None:
types.py(181):         elif self.fget is None:
types.py(183):         return self.fget(instance)
 --- modulename: enum, funcname: value
enum.py(804):         return self._value_
re.py(292):     try:
re.py(293):         return _cache[type(pattern), pattern, flags]
argparse.py(187):         self._long_break_matcher = _re.compile(r'\n\n\n+')
 --- modulename: re, funcname: compile
re.py(251):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(290):     if isinstance(flags, RegexFlag):
re.py(292):     try:
re.py(293):         return _cache[type(pattern), pattern, flags]
 --- modulename: argparse, funcname: _format_args
argparse.py(592):         get_metavar = self._metavar_formatter(action, default_metavar)
 --- modulename: argparse, funcname: _metavar_formatter
argparse.py(576):         if action.metavar is not None:
argparse.py(578):         elif action.choices is not None:
argparse.py(582):             result = default_metavar
argparse.py(584):         def format(tuple_size):
argparse.py(589):         return format
argparse.py(593):         if action.nargs is None:
argparse.py(594):             result = '%s' % get_metavar(1)
 --- modulename: argparse, funcname: format
argparse.py(585):             if isinstance(result, tuple):
argparse.py(588):                 return (result, ) * tuple_size
argparse.py(617):         return result
argparse.py(1441):         return self._add_action(action)
 --- modulename: argparse, funcname: _add_action
argparse.py(1806):         if action.option_strings:
argparse.py(1807):             self._optionals._add_action(action)
 --- modulename: argparse, funcname: _add_action
argparse.py(1643):         action = super(_ArgumentGroup, self)._add_action(action)
 --- modulename: argparse, funcname: _add_action
argparse.py(1455):         self._check_conflict(action)
 --- modulename: argparse, funcname: _check_conflict
argparse.py(1583):         confl_optionals = []
argparse.py(1584):         for option_string in action.option_strings:
argparse.py(1585):             if option_string in self._option_string_actions:
argparse.py(1584):         for option_string in action.option_strings:
argparse.py(1590):         if confl_optionals:
argparse.py(1458):         self._actions.append(action)
argparse.py(1459):         action.container = self
argparse.py(1462):         for option_string in action.option_strings:
argparse.py(1463):             self._option_string_actions[option_string] = action
argparse.py(1462):         for option_string in action.option_strings:
argparse.py(1466):         for option_string in action.option_strings:
argparse.py(1467):             if self._negative_number_matcher.match(option_string):
argparse.py(1466):         for option_string in action.option_strings:
argparse.py(1472):         return action
argparse.py(1644):         self._group_actions.append(action)
argparse.py(1645):         return action
argparse.py(1810):         return action
input_handler.py(174):         parser.add_argument("--help", "--h", action="store_true",
input_handler.py(175):                             help="Show this help message")
input_handler.py(174):         parser.add_argument("--help", "--h", action="store_true",
 --- modulename: argparse, funcname: add_argument
argparse.py(1401):         chars = self.prefix_chars
argparse.py(1402):         if not args or len(args) == 1 and args[0][0] not in chars:
argparse.py(1409):             kwargs = self._get_optional_kwargs(*args, **kwargs)
 --- modulename: argparse, funcname: _get_optional_kwargs
argparse.py(1535):         option_strings = []
argparse.py(1536):         long_option_strings = []
argparse.py(1537):         for option_string in args:
argparse.py(1539):             if not option_string[0] in self.prefix_chars:
argparse.py(1547):             option_strings.append(option_string)
argparse.py(1548):             if len(option_string) > 1 and option_string[1] in self.prefix_chars:
argparse.py(1549):                 long_option_strings.append(option_string)
argparse.py(1537):         for option_string in args:
argparse.py(1539):             if not option_string[0] in self.prefix_chars:
argparse.py(1547):             option_strings.append(option_string)
argparse.py(1548):             if len(option_string) > 1 and option_string[1] in self.prefix_chars:
argparse.py(1549):                 long_option_strings.append(option_string)
argparse.py(1537):         for option_string in args:
argparse.py(1552):         dest = kwargs.pop('dest', None)
argparse.py(1553):         if dest is None:
argparse.py(1554):             if long_option_strings:
argparse.py(1555):                 dest_option_string = long_option_strings[0]
argparse.py(1558):             dest = dest_option_string.lstrip(self.prefix_chars)
argparse.py(1559):             if not dest:
argparse.py(1562):             dest = dest.replace('-', '_')
argparse.py(1565):         return dict(kwargs, dest=dest, option_strings=option_strings)
argparse.py(1412):         if 'default' not in kwargs:
argparse.py(1413):             dest = kwargs['dest']
argparse.py(1414):             if dest in self._defaults:
argparse.py(1416):             elif self.argument_default is not None:
argparse.py(1420):         action_class = self._pop_action_class(kwargs)
 --- modulename: argparse, funcname: _pop_action_class
argparse.py(1568):         action = kwargs.pop('action', default)
argparse.py(1569):         return self._registry_get('action', action, action)
 --- modulename: argparse, funcname: _registry_get
argparse.py(1368):         return self._registries[registry_name].get(value, default)
argparse.py(1421):         if not callable(action_class):
argparse.py(1423):         action = action_class(**kwargs)
 --- modulename: argparse, funcname: __init__
argparse.py(970):         super(_StoreTrueAction, self).__init__(
argparse.py(971):             option_strings=option_strings,
argparse.py(972):             dest=dest,
argparse.py(973):             const=True,
argparse.py(974):             default=default,
argparse.py(975):             required=required,
argparse.py(976):             help=help)
argparse.py(970):         super(_StoreTrueAction, self).__init__(
 --- modulename: argparse, funcname: __init__
argparse.py(949):         super(_StoreConstAction, self).__init__(
argparse.py(950):             option_strings=option_strings,
argparse.py(951):             dest=dest,
argparse.py(952):             nargs=0,
argparse.py(953):             const=const,
argparse.py(954):             default=default,
argparse.py(955):             required=required,
argparse.py(956):             help=help)
argparse.py(949):         super(_StoreConstAction, self).__init__(
 --- modulename: argparse, funcname: __init__
argparse.py(831):         self.option_strings = option_strings
argparse.py(832):         self.dest = dest
argparse.py(833):         self.nargs = nargs
argparse.py(834):         self.const = const
argparse.py(835):         self.default = default
argparse.py(836):         self.type = type
argparse.py(837):         self.choices = choices
argparse.py(838):         self.required = required
argparse.py(839):         self.help = help
argparse.py(840):         self.metavar = metavar
argparse.py(1426):         type_func = self._registry_get('type', action.type, action.type)
 --- modulename: argparse, funcname: _registry_get
argparse.py(1368):         return self._registries[registry_name].get(value, default)
argparse.py(1427):         if not callable(type_func):
argparse.py(1430):         if type_func is FileType:
argparse.py(1435):         if hasattr(self, "_get_formatter"):
argparse.py(1436):             try:
argparse.py(1437):                 self._get_formatter()._format_args(action, None)
 --- modulename: argparse, funcname: _get_formatter
argparse.py(2543):         return self.formatter_class(prog=self.prog)
 --- modulename: argparse, funcname: __init__
argparse.py(168):         if width is None:
argparse.py(169):             import shutil
argparse.py(170):             width = shutil.get_terminal_size().columns
 --- modulename: shutil, funcname: get_terminal_size
shutil.py(1397):     try:
shutil.py(1398):         columns = int(os.environ['COLUMNS'])
 --- modulename: os, funcname: __getitem__
os.py(676):         try:
os.py(677):             value = self._data[self.encodekey(key)]
 --- modulename: os, funcname: encode
os.py(756):             if not isinstance(value, str):
os.py(758):             return value.encode(encoding, 'surrogateescape')
os.py(678):         except KeyError:
os.py(680):             raise KeyError(key) from None
shutil.py(1399):     except (KeyError, ValueError):
shutil.py(1400):         columns = 0
shutil.py(1402):     try:
shutil.py(1403):         lines = int(os.environ['LINES'])
 --- modulename: os, funcname: __getitem__
os.py(676):         try:
os.py(677):             value = self._data[self.encodekey(key)]
 --- modulename: os, funcname: encode
os.py(756):             if not isinstance(value, str):
os.py(758):             return value.encode(encoding, 'surrogateescape')
os.py(678):         except KeyError:
os.py(680):             raise KeyError(key) from None
shutil.py(1404):     except (KeyError, ValueError):
shutil.py(1405):         lines = 0
shutil.py(1408):     if columns <= 0 or lines <= 0:
shutil.py(1409):         try:
shutil.py(1410):             size = os.get_terminal_size(sys.__stdout__.fileno())
shutil.py(1411):         except (AttributeError, ValueError, OSError):
shutil.py(1414):             size = os.terminal_size(fallback)
shutil.py(1415):         if columns <= 0:
shutil.py(1416):             columns = size.columns
shutil.py(1417):         if lines <= 0:
shutil.py(1418):             lines = size.lines
shutil.py(1420):     return os.terminal_size((columns, lines))
argparse.py(171):             width -= 2
argparse.py(173):         self._prog = prog
argparse.py(174):         self._indent_increment = indent_increment
argparse.py(175):         self._max_help_position = min(max_help_position,
argparse.py(176):                                       max(width - 20, indent_increment * 2))
argparse.py(175):         self._max_help_position = min(max_help_position,
argparse.py(177):         self._width = width
argparse.py(179):         self._current_indent = 0
argparse.py(180):         self._level = 0
argparse.py(181):         self._action_max_length = 0
argparse.py(183):         self._root_section = self._Section(self, None)
 --- modulename: argparse, funcname: __init__
argparse.py(204):             self.formatter = formatter
argparse.py(205):             self.parent = parent
argparse.py(206):             self.heading = heading
argparse.py(207):             self.items = []
argparse.py(184):         self._current_section = self._root_section
argparse.py(186):         self._whitespace_matcher = _re.compile(r'\s+', _re.ASCII)
 --- modulename: re, funcname: compile
re.py(251):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(290):     if isinstance(flags, RegexFlag):
re.py(291):         flags = flags.value
 --- modulename: types, funcname: __get__
types.py(177):         if instance is None:
types.py(181):         elif self.fget is None:
types.py(183):         return self.fget(instance)
 --- modulename: enum, funcname: value
enum.py(804):         return self._value_
re.py(292):     try:
re.py(293):         return _cache[type(pattern), pattern, flags]
argparse.py(187):         self._long_break_matcher = _re.compile(r'\n\n\n+')
 --- modulename: re, funcname: compile
re.py(251):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(290):     if isinstance(flags, RegexFlag):
re.py(292):     try:
re.py(293):         return _cache[type(pattern), pattern, flags]
 --- modulename: argparse, funcname: _format_args
argparse.py(592):         get_metavar = self._metavar_formatter(action, default_metavar)
 --- modulename: argparse, funcname: _metavar_formatter
argparse.py(576):         if action.metavar is not None:
argparse.py(578):         elif action.choices is not None:
argparse.py(582):             result = default_metavar
argparse.py(584):         def format(tuple_size):
argparse.py(589):         return format
argparse.py(593):         if action.nargs is None:
argparse.py(595):         elif action.nargs == OPTIONAL:
argparse.py(597):         elif action.nargs == ZERO_OR_MORE:
argparse.py(603):         elif action.nargs == ONE_OR_MORE:
argparse.py(605):         elif action.nargs == REMAINDER:
argparse.py(607):         elif action.nargs == PARSER:
argparse.py(609):         elif action.nargs == SUPPRESS:
argparse.py(612):             try:
argparse.py(613):                 formats = ['%s' for _ in range(action.nargs)]
 --- modulename: argparse, funcname: <listcomp>
argparse.py(613):                 formats = ['%s' for _ in range(action.nargs)]
argparse.py(616):             result = ' '.join(formats) % get_metavar(action.nargs)
 --- modulename: argparse, funcname: format
argparse.py(585):             if isinstance(result, tuple):
argparse.py(588):                 return (result, ) * tuple_size
argparse.py(617):         return result
argparse.py(1441):         return self._add_action(action)
 --- modulename: argparse, funcname: _add_action
argparse.py(1806):         if action.option_strings:
argparse.py(1807):             self._optionals._add_action(action)
 --- modulename: argparse, funcname: _add_action
argparse.py(1643):         action = super(_ArgumentGroup, self)._add_action(action)
 --- modulename: argparse, funcname: _add_action
argparse.py(1455):         self._check_conflict(action)
 --- modulename: argparse, funcname: _check_conflict
argparse.py(1583):         confl_optionals = []
argparse.py(1584):         for option_string in action.option_strings:
argparse.py(1585):             if option_string in self._option_string_actions:
argparse.py(1584):         for option_string in action.option_strings:
argparse.py(1585):             if option_string in self._option_string_actions:
argparse.py(1584):         for option_string in action.option_strings:
argparse.py(1590):         if confl_optionals:
argparse.py(1458):         self._actions.append(action)
argparse.py(1459):         action.container = self
argparse.py(1462):         for option_string in action.option_strings:
argparse.py(1463):             self._option_string_actions[option_string] = action
argparse.py(1462):         for option_string in action.option_strings:
argparse.py(1463):             self._option_string_actions[option_string] = action
argparse.py(1462):         for option_string in action.option_strings:
argparse.py(1466):         for option_string in action.option_strings:
argparse.py(1467):             if self._negative_number_matcher.match(option_string):
argparse.py(1466):         for option_string in action.option_strings:
argparse.py(1467):             if self._negative_number_matcher.match(option_string):
argparse.py(1466):         for option_string in action.option_strings:
argparse.py(1472):         return action
argparse.py(1644):         self._group_actions.append(action)
argparse.py(1645):         return action
argparse.py(1810):         return action
input_handler.py(177):         parser.add_argument("--debug", "--d", action="store_true",
input_handler.py(178):                             help="Enable debug mode")
input_handler.py(177):         parser.add_argument("--debug", "--d", action="store_true",
 --- modulename: argparse, funcname: add_argument
argparse.py(1401):         chars = self.prefix_chars
argparse.py(1402):         if not args or len(args) == 1 and args[0][0] not in chars:
argparse.py(1409):             kwargs = self._get_optional_kwargs(*args, **kwargs)
 --- modulename: argparse, funcname: _get_optional_kwargs
argparse.py(1535):         option_strings = []
argparse.py(1536):         long_option_strings = []
argparse.py(1537):         for option_string in args:
argparse.py(1539):             if not option_string[0] in self.prefix_chars:
argparse.py(1547):             option_strings.append(option_string)
argparse.py(1548):             if len(option_string) > 1 and option_string[1] in self.prefix_chars:
argparse.py(1549):                 long_option_strings.append(option_string)
argparse.py(1537):         for option_string in args:
argparse.py(1539):             if not option_string[0] in self.prefix_chars:
argparse.py(1547):             option_strings.append(option_string)
argparse.py(1548):             if len(option_string) > 1 and option_string[1] in self.prefix_chars:
argparse.py(1549):                 long_option_strings.append(option_string)
argparse.py(1537):         for option_string in args:
argparse.py(1552):         dest = kwargs.pop('dest', None)
argparse.py(1553):         if dest is None:
argparse.py(1554):             if long_option_strings:
argparse.py(1555):                 dest_option_string = long_option_strings[0]
argparse.py(1558):             dest = dest_option_string.lstrip(self.prefix_chars)
argparse.py(1559):             if not dest:
argparse.py(1562):             dest = dest.replace('-', '_')
argparse.py(1565):         return dict(kwargs, dest=dest, option_strings=option_strings)
argparse.py(1412):         if 'default' not in kwargs:
argparse.py(1413):             dest = kwargs['dest']
argparse.py(1414):             if dest in self._defaults:
argparse.py(1416):             elif self.argument_default is not None:
argparse.py(1420):         action_class = self._pop_action_class(kwargs)
 --- modulename: argparse, funcname: _pop_action_class
argparse.py(1568):         action = kwargs.pop('action', default)
argparse.py(1569):         return self._registry_get('action', action, action)
 --- modulename: argparse, funcname: _registry_get
argparse.py(1368):         return self._registries[registry_name].get(value, default)
argparse.py(1421):         if not callable(action_class):
argparse.py(1423):         action = action_class(**kwargs)
 --- modulename: argparse, funcname: __init__
argparse.py(970):         super(_StoreTrueAction, self).__init__(
argparse.py(971):             option_strings=option_strings,
argparse.py(972):             dest=dest,
argparse.py(973):             const=True,
argparse.py(974):             default=default,
argparse.py(975):             required=required,
argparse.py(976):             help=help)
argparse.py(970):         super(_StoreTrueAction, self).__init__(
 --- modulename: argparse, funcname: __init__
argparse.py(949):         super(_StoreConstAction, self).__init__(
argparse.py(950):             option_strings=option_strings,
argparse.py(951):             dest=dest,
argparse.py(952):             nargs=0,
argparse.py(953):             const=const,
argparse.py(954):             default=default,
argparse.py(955):             required=required,
argparse.py(956):             help=help)
argparse.py(949):         super(_StoreConstAction, self).__init__(
 --- modulename: argparse, funcname: __init__
argparse.py(831):         self.option_strings = option_strings
argparse.py(832):         self.dest = dest
argparse.py(833):         self.nargs = nargs
argparse.py(834):         self.const = const
argparse.py(835):         self.default = default
argparse.py(836):         self.type = type
argparse.py(837):         self.choices = choices
argparse.py(838):         self.required = required
argparse.py(839):         self.help = help
argparse.py(840):         self.metavar = metavar
argparse.py(1426):         type_func = self._registry_get('type', action.type, action.type)
 --- modulename: argparse, funcname: _registry_get
argparse.py(1368):         return self._registries[registry_name].get(value, default)
argparse.py(1427):         if not callable(type_func):
argparse.py(1430):         if type_func is FileType:
argparse.py(1435):         if hasattr(self, "_get_formatter"):
argparse.py(1436):             try:
argparse.py(1437):                 self._get_formatter()._format_args(action, None)
 --- modulename: argparse, funcname: _get_formatter
argparse.py(2543):         return self.formatter_class(prog=self.prog)
 --- modulename: argparse, funcname: __init__
argparse.py(168):         if width is None:
argparse.py(169):             import shutil
argparse.py(170):             width = shutil.get_terminal_size().columns
 --- modulename: shutil, funcname: get_terminal_size
shutil.py(1397):     try:
shutil.py(1398):         columns = int(os.environ['COLUMNS'])
 --- modulename: os, funcname: __getitem__
os.py(676):         try:
os.py(677):             value = self._data[self.encodekey(key)]
 --- modulename: os, funcname: encode
os.py(756):             if not isinstance(value, str):
os.py(758):             return value.encode(encoding, 'surrogateescape')
os.py(678):         except KeyError:
os.py(680):             raise KeyError(key) from None
shutil.py(1399):     except (KeyError, ValueError):
shutil.py(1400):         columns = 0
shutil.py(1402):     try:
shutil.py(1403):         lines = int(os.environ['LINES'])
 --- modulename: os, funcname: __getitem__
os.py(676):         try:
os.py(677):             value = self._data[self.encodekey(key)]
 --- modulename: os, funcname: encode
os.py(756):             if not isinstance(value, str):
os.py(758):             return value.encode(encoding, 'surrogateescape')
os.py(678):         except KeyError:
os.py(680):             raise KeyError(key) from None
shutil.py(1404):     except (KeyError, ValueError):
shutil.py(1405):         lines = 0
shutil.py(1408):     if columns <= 0 or lines <= 0:
shutil.py(1409):         try:
shutil.py(1410):             size = os.get_terminal_size(sys.__stdout__.fileno())
shutil.py(1411):         except (AttributeError, ValueError, OSError):
shutil.py(1414):             size = os.terminal_size(fallback)
shutil.py(1415):         if columns <= 0:
shutil.py(1416):             columns = size.columns
shutil.py(1417):         if lines <= 0:
shutil.py(1418):             lines = size.lines
shutil.py(1420):     return os.terminal_size((columns, lines))
argparse.py(171):             width -= 2
argparse.py(173):         self._prog = prog
argparse.py(174):         self._indent_increment = indent_increment
argparse.py(175):         self._max_help_position = min(max_help_position,
argparse.py(176):                                       max(width - 20, indent_increment * 2))
argparse.py(175):         self._max_help_position = min(max_help_position,
argparse.py(177):         self._width = width
argparse.py(179):         self._current_indent = 0
argparse.py(180):         self._level = 0
argparse.py(181):         self._action_max_length = 0
argparse.py(183):         self._root_section = self._Section(self, None)
 --- modulename: argparse, funcname: __init__
argparse.py(204):             self.formatter = formatter
argparse.py(205):             self.parent = parent
argparse.py(206):             self.heading = heading
argparse.py(207):             self.items = []
argparse.py(184):         self._current_section = self._root_section
argparse.py(186):         self._whitespace_matcher = _re.compile(r'\s+', _re.ASCII)
 --- modulename: re, funcname: compile
re.py(251):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(290):     if isinstance(flags, RegexFlag):
re.py(291):         flags = flags.value
 --- modulename: types, funcname: __get__
types.py(177):         if instance is None:
types.py(181):         elif self.fget is None:
types.py(183):         return self.fget(instance)
 --- modulename: enum, funcname: value
enum.py(804):         return self._value_
re.py(292):     try:
re.py(293):         return _cache[type(pattern), pattern, flags]
argparse.py(187):         self._long_break_matcher = _re.compile(r'\n\n\n+')
 --- modulename: re, funcname: compile
re.py(251):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(290):     if isinstance(flags, RegexFlag):
re.py(292):     try:
re.py(293):         return _cache[type(pattern), pattern, flags]
 --- modulename: argparse, funcname: _format_args
argparse.py(592):         get_metavar = self._metavar_formatter(action, default_metavar)
 --- modulename: argparse, funcname: _metavar_formatter
argparse.py(576):         if action.metavar is not None:
argparse.py(578):         elif action.choices is not None:
argparse.py(582):             result = default_metavar
argparse.py(584):         def format(tuple_size):
argparse.py(589):         return format
argparse.py(593):         if action.nargs is None:
argparse.py(595):         elif action.nargs == OPTIONAL:
argparse.py(597):         elif action.nargs == ZERO_OR_MORE:
argparse.py(603):         elif action.nargs == ONE_OR_MORE:
argparse.py(605):         elif action.nargs == REMAINDER:
argparse.py(607):         elif action.nargs == PARSER:
argparse.py(609):         elif action.nargs == SUPPRESS:
argparse.py(612):             try:
argparse.py(613):                 formats = ['%s' for _ in range(action.nargs)]
 --- modulename: argparse, funcname: <listcomp>
argparse.py(613):                 formats = ['%s' for _ in range(action.nargs)]
argparse.py(616):             result = ' '.join(formats) % get_metavar(action.nargs)
 --- modulename: argparse, funcname: format
argparse.py(585):             if isinstance(result, tuple):
argparse.py(588):                 return (result, ) * tuple_size
argparse.py(617):         return result
argparse.py(1441):         return self._add_action(action)
 --- modulename: argparse, funcname: _add_action
argparse.py(1806):         if action.option_strings:
argparse.py(1807):             self._optionals._add_action(action)
 --- modulename: argparse, funcname: _add_action
argparse.py(1643):         action = super(_ArgumentGroup, self)._add_action(action)
 --- modulename: argparse, funcname: _add_action
argparse.py(1455):         self._check_conflict(action)
 --- modulename: argparse, funcname: _check_conflict
argparse.py(1583):         confl_optionals = []
argparse.py(1584):         for option_string in action.option_strings:
argparse.py(1585):             if option_string in self._option_string_actions:
argparse.py(1584):         for option_string in action.option_strings:
argparse.py(1585):             if option_string in self._option_string_actions:
argparse.py(1584):         for option_string in action.option_strings:
argparse.py(1590):         if confl_optionals:
argparse.py(1458):         self._actions.append(action)
argparse.py(1459):         action.container = self
argparse.py(1462):         for option_string in action.option_strings:
argparse.py(1463):             self._option_string_actions[option_string] = action
argparse.py(1462):         for option_string in action.option_strings:
argparse.py(1463):             self._option_string_actions[option_string] = action
argparse.py(1462):         for option_string in action.option_strings:
argparse.py(1466):         for option_string in action.option_strings:
argparse.py(1467):             if self._negative_number_matcher.match(option_string):
argparse.py(1466):         for option_string in action.option_strings:
argparse.py(1467):             if self._negative_number_matcher.match(option_string):
argparse.py(1466):         for option_string in action.option_strings:
argparse.py(1472):         return action
argparse.py(1644):         self._group_actions.append(action)
argparse.py(1645):         return action
argparse.py(1810):         return action
input_handler.py(182):         cmd_args = parser.parse_args()
 --- modulename: argparse, funcname: parse_args
argparse.py(1826):         args, argv = self.parse_known_args(args, namespace)
 --- modulename: argparse, funcname: parse_known_args
argparse.py(1833):         if args is None:
argparse.py(1835):             args = _sys.argv[1:]
argparse.py(1841):         if namespace is None:
argparse.py(1842):             namespace = Namespace()
 --- modulename: argparse, funcname: __init__
argparse.py(1296):         for name in kwargs:
argparse.py(1845):         for action in self._actions:
argparse.py(1846):             if action.dest is not SUPPRESS:
argparse.py(1847):                 if not hasattr(namespace, action.dest):
argparse.py(1848):                     if action.default is not SUPPRESS:
argparse.py(1849):                         setattr(namespace, action.dest, action.default)
argparse.py(1845):         for action in self._actions:
argparse.py(1846):             if action.dest is not SUPPRESS:
argparse.py(1847):                 if not hasattr(namespace, action.dest):
argparse.py(1848):                     if action.default is not SUPPRESS:
argparse.py(1849):                         setattr(namespace, action.dest, action.default)
argparse.py(1845):         for action in self._actions:
argparse.py(1846):             if action.dest is not SUPPRESS:
argparse.py(1847):                 if not hasattr(namespace, action.dest):
argparse.py(1848):                     if action.default is not SUPPRESS:
argparse.py(1849):                         setattr(namespace, action.dest, action.default)
argparse.py(1845):         for action in self._actions:
argparse.py(1846):             if action.dest is not SUPPRESS:
argparse.py(1847):                 if not hasattr(namespace, action.dest):
argparse.py(1848):                     if action.default is not SUPPRESS:
argparse.py(1849):                         setattr(namespace, action.dest, action.default)
argparse.py(1845):         for action in self._actions:
argparse.py(1852):         for dest in self._defaults:
argparse.py(1857):         if self.exit_on_error:
argparse.py(1858):             try:
argparse.py(1859):                 namespace, args = self._parse_known_args(args, namespace)
 --- modulename: argparse, funcname: _parse_known_args
argparse.py(1873):         if self.fromfile_prefix_chars is not None:
argparse.py(1878):         action_conflicts = {}
argparse.py(1879):         for mutex_group in self._mutually_exclusive_groups:
argparse.py(1889):         option_string_indices = {}
argparse.py(1890):         arg_string_pattern_parts = []
argparse.py(1891):         arg_strings_iter = iter(arg_strings)
argparse.py(1892):         for i, arg_string in enumerate(arg_strings_iter):
argparse.py(1895):             if arg_string == '--':
argparse.py(1903):                 option_tuple = self._parse_optional(arg_string)
 --- modulename: argparse, funcname: _parse_optional
argparse.py(2186):         if not arg_string:
argparse.py(2190):         if not arg_string[0] in self.prefix_chars:
argparse.py(2194):         if arg_string in self._option_string_actions:
argparse.py(2195):             action = self._option_string_actions[arg_string]
argparse.py(2196):             return action, arg_string, None
argparse.py(1904):                 if option_tuple is None:
argparse.py(1907):                     option_string_indices[i] = option_tuple
argparse.py(1908):                     pattern = 'O'
argparse.py(1909):                 arg_string_pattern_parts.append(pattern)
argparse.py(1892):         for i, arg_string in enumerate(arg_strings_iter):
argparse.py(1895):             if arg_string == '--':
argparse.py(1903):                 option_tuple = self._parse_optional(arg_string)
 --- modulename: argparse, funcname: _parse_optional
argparse.py(2186):         if not arg_string:
argparse.py(2190):         if not arg_string[0] in self.prefix_chars:
argparse.py(2191):             return None
argparse.py(1904):                 if option_tuple is None:
argparse.py(1905):                     pattern = 'A'
argparse.py(1909):                 arg_string_pattern_parts.append(pattern)
argparse.py(1892):         for i, arg_string in enumerate(arg_strings_iter):
argparse.py(1895):             if arg_string == '--':
argparse.py(1903):                 option_tuple = self._parse_optional(arg_string)
 --- modulename: argparse, funcname: _parse_optional
argparse.py(2186):         if not arg_string:
argparse.py(2190):         if not arg_string[0] in self.prefix_chars:
argparse.py(2194):         if arg_string in self._option_string_actions:
argparse.py(2195):             action = self._option_string_actions[arg_string]
argparse.py(2196):             return action, arg_string, None
argparse.py(1904):                 if option_tuple is None:
argparse.py(1907):                     option_string_indices[i] = option_tuple
argparse.py(1908):                     pattern = 'O'
argparse.py(1909):                 arg_string_pattern_parts.append(pattern)
argparse.py(1892):         for i, arg_string in enumerate(arg_strings_iter):
argparse.py(1895):             if arg_string == '--':
argparse.py(1903):                 option_tuple = self._parse_optional(arg_string)
 --- modulename: argparse, funcname: _parse_optional
argparse.py(2186):         if not arg_string:
argparse.py(2190):         if not arg_string[0] in self.prefix_chars:
argparse.py(2191):             return None
argparse.py(1904):                 if option_tuple is None:
argparse.py(1905):                     pattern = 'A'
argparse.py(1909):                 arg_string_pattern_parts.append(pattern)
argparse.py(1892):         for i, arg_string in enumerate(arg_strings_iter):
argparse.py(1912):         arg_strings_pattern = ''.join(arg_string_pattern_parts)
argparse.py(1915):         seen_actions = set()
argparse.py(1916):         seen_non_default_actions = set()
argparse.py(1918):         def take_action(action, argument_strings, option_string=None):
argparse.py(1939):         def consume_optional(start_index):
argparse.py(2013):         positionals = self._get_positional_actions()
 --- modulename: argparse, funcname: _get_positional_actions
argparse.py(1818):         return [action
argparse.py(1819):                 for action in self._actions
argparse.py(1818):         return [action
 --- modulename: argparse, funcname: <listcomp>
argparse.py(1818):         return [action
argparse.py(1819):                 for action in self._actions
argparse.py(1820):                 if not action.option_strings]
argparse.py(1818):         return [action
argparse.py(1818):         return [action
argparse.py(1819):                 for action in self._actions
argparse.py(1820):                 if not action.option_strings]
argparse.py(1818):         return [action
argparse.py(1818):         return [action
argparse.py(1819):                 for action in self._actions
argparse.py(1820):                 if not action.option_strings]
argparse.py(1818):         return [action
argparse.py(1818):         return [action
argparse.py(1819):                 for action in self._actions
argparse.py(1820):                 if not action.option_strings]
argparse.py(1818):         return [action
argparse.py(1818):         return [action
argparse.py(2016):         def consume_positionals(start_index):
argparse.py(2036):         extras = []
argparse.py(2037):         start_index = 0
argparse.py(2038):         if option_string_indices:
argparse.py(2039):             max_option_string_index = max(option_string_indices)
argparse.py(2042):         while start_index <= max_option_string_index:
argparse.py(2045):             next_option_string_index = min([
argparse.py(2047):                 for index in option_string_indices
argparse.py(2045):             next_option_string_index = min([
 --- modulename: argparse, funcname: <listcomp>
argparse.py(2045):             next_option_string_index = min([
argparse.py(2047):                 for index in option_string_indices
argparse.py(2048):                 if index >= start_index])
argparse.py(2046):                 index
argparse.py(2048):                 if index >= start_index])
argparse.py(2045):             next_option_string_index = min([
argparse.py(2047):                 for index in option_string_indices
argparse.py(2048):                 if index >= start_index])
argparse.py(2046):                 index
argparse.py(2048):                 if index >= start_index])
argparse.py(2045):             next_option_string_index = min([
argparse.py(2048):                 if index >= start_index])
argparse.py(2049):             if start_index != next_option_string_index:
argparse.py(2062):             if start_index not in option_string_indices:
argparse.py(2068):             start_index = consume_optional(start_index)
 --- modulename: argparse, funcname: consume_optional
argparse.py(1942):             option_tuple = option_string_indices[start_index]
argparse.py(1943):             action, option_string, explicit_arg = option_tuple
argparse.py(1947):             match_argument = self._match_argument
argparse.py(1948):             action_tuples = []
argparse.py(1949):             while True:
argparse.py(1952):                 if action is None:
argparse.py(1958):                 if explicit_arg is not None:
argparse.py(1996):                     start = start_index + 1
argparse.py(1997):                     selected_patterns = arg_strings_pattern[start:]
argparse.py(1998):                     arg_count = match_argument(action, selected_patterns)
 --- modulename: argparse, funcname: _match_argument
argparse.py(2148):         nargs_pattern = self._get_nargs_pattern(action)
 --- modulename: argparse, funcname: _get_nargs_pattern
argparse.py(2290):         nargs = action.nargs
argparse.py(2293):         if nargs is None:
argparse.py(2294):             nargs_pattern = '(-*A-*)'
argparse.py(2325):         if action.option_strings:
argparse.py(2326):             nargs_pattern = nargs_pattern.replace('-*', '')
argparse.py(2327):             nargs_pattern = nargs_pattern.replace('-', '')
argparse.py(2330):         return nargs_pattern
argparse.py(2149):         match = _re.match(nargs_pattern, arg_strings_pattern)
 --- modulename: re, funcname: match
re.py(190):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
re.py(290):     if isinstance(flags, RegexFlag):
re.py(292):     try:
re.py(293):         return _cache[type(pattern), pattern, flags]
argparse.py(2152):         if match is None:
argparse.py(2166):         return len(match.group(1))
argparse.py(1999):                     stop = start + arg_count
argparse.py(2000):                     args = arg_strings[start:stop]
argparse.py(2001):                     action_tuples.append((action, args, option_string))
argparse.py(2002):                     break
argparse.py(2006):             assert action_tuples
argparse.py(2007):             for action, args, option_string in action_tuples:
argparse.py(2008):                 take_action(action, args, option_string)
 --- modulename: argparse, funcname: take_action
argparse.py(1919):             seen_actions.add(action)
argparse.py(1920):             argument_values = self._get_values(action, argument_strings)
 --- modulename: argparse, funcname: _get_values
argparse.py(2422):         if action.nargs not in [PARSER, REMAINDER]:
argparse.py(2423):             try:
argparse.py(2424):                 arg_strings.remove('--')
argparse.py(2425):             except ValueError:
argparse.py(2426):                 pass
argparse.py(2429):         if not arg_strings and action.nargs == OPTIONAL:
argparse.py(2440):         elif (not arg_strings and action.nargs == ZERO_OR_MORE and
argparse.py(2449):         elif len(arg_strings) == 1 and action.nargs in [None, OPTIONAL]:
argparse.py(2450):             arg_string, = arg_strings
argparse.py(2451):             value = self._get_value(action, arg_string)
 --- modulename: argparse, funcname: _get_value
argparse.py(2477):         type_func = self._registry_get('type', action.type, action.type)
 --- modulename: argparse, funcname: _registry_get
argparse.py(1368):         return self._registries[registry_name].get(value, default)
argparse.py(2478):         if not callable(type_func):
argparse.py(2483):         try:
argparse.py(2484):             result = type_func(arg_string)
argparse.py(2500):         return result
argparse.py(2452):             self._check_value(action, value)
 --- modulename: argparse, funcname: _check_value
argparse.py(2504):         if action.choices is not None and value not in action.choices:
argparse.py(2474):         return value
argparse.py(1925):             if argument_values is not action.default:
argparse.py(1926):                 seen_non_default_actions.add(action)
argparse.py(1927):                 for conflict_action in action_conflicts.get(action, []):
argparse.py(1935):             if argument_values is not SUPPRESS:
argparse.py(1936):                 action(self, namespace, argument_values, option_string)
 --- modulename: argparse, funcname: __call__
argparse.py(936):         setattr(namespace, self.dest, values)
argparse.py(2007):             for action, args, option_string in action_tuples:
argparse.py(2009):             return stop
argparse.py(2042):         while start_index <= max_option_string_index:
argparse.py(2045):             next_option_string_index = min([
argparse.py(2047):                 for index in option_string_indices
argparse.py(2045):             next_option_string_index = min([
 --- modulename: argparse, funcname: <listcomp>
argparse.py(2045):             next_option_string_index = min([
argparse.py(2047):                 for index in option_string_indices
argparse.py(2048):                 if index >= start_index])
argparse.py(2045):             next_option_string_index = min([
argparse.py(2047):                 for index in option_string_indices
argparse.py(2048):                 if index >= start_index])
argparse.py(2046):                 index
argparse.py(2048):                 if index >= start_index])
argparse.py(2045):             next_option_string_index = min([
argparse.py(2048):                 if index >= start_index])
argparse.py(2049):             if start_index != next_option_string_index:
argparse.py(2062):             if start_index not in option_string_indices:
argparse.py(2068):             start_index = consume_optional(start_index)
 --- modulename: argparse, funcname: consume_optional
argparse.py(1942):             option_tuple = option_string_indices[start_index]
argparse.py(1943):             action, option_string, explicit_arg = option_tuple
argparse.py(1947):             match_argument = self._match_argument
argparse.py(1948):             action_tuples = []
argparse.py(1949):             while True:
argparse.py(1952):                 if action is None:
argparse.py(1958):                 if explicit_arg is not None:
argparse.py(1996):                     start = start_index + 1
argparse.py(1997):                     selected_patterns = arg_strings_pattern[start:]
argparse.py(1998):                     arg_count = match_argument(action, selected_patterns)
 --- modulename: argparse, funcname: _match_argument
argparse.py(2148):         nargs_pattern = self._get_nargs_pattern(action)
 --- modulename: argparse, funcname: _get_nargs_pattern
argparse.py(2290):         nargs = action.nargs
argparse.py(2293):         if nargs is None:
argparse.py(2294):             nargs_pattern = '(-*A-*)'
argparse.py(2325):         if action.option_strings:
argparse.py(2326):             nargs_pattern = nargs_pattern.replace('-*', '')
argparse.py(2327):             nargs_pattern = nargs_pattern.replace('-', '')
argparse.py(2330):         return nargs_pattern
argparse.py(2149):         match = _re.match(nargs_pattern, arg_strings_pattern)
 --- modulename: re, funcname: match
re.py(190):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
re.py(290):     if isinstance(flags, RegexFlag):
re.py(292):     try:
re.py(293):         return _cache[type(pattern), pattern, flags]
argparse.py(2152):         if match is None:
argparse.py(2166):         return len(match.group(1))
argparse.py(1999):                     stop = start + arg_count
argparse.py(2000):                     args = arg_strings[start:stop]
argparse.py(2001):                     action_tuples.append((action, args, option_string))
argparse.py(2002):                     break
argparse.py(2006):             assert action_tuples
argparse.py(2007):             for action, args, option_string in action_tuples:
argparse.py(2008):                 take_action(action, args, option_string)
 --- modulename: argparse, funcname: take_action
argparse.py(1919):             seen_actions.add(action)
argparse.py(1920):             argument_values = self._get_values(action, argument_strings)
 --- modulename: argparse, funcname: _get_values
argparse.py(2422):         if action.nargs not in [PARSER, REMAINDER]:
argparse.py(2423):             try:
argparse.py(2424):                 arg_strings.remove('--')
argparse.py(2425):             except ValueError:
argparse.py(2426):                 pass
argparse.py(2429):         if not arg_strings and action.nargs == OPTIONAL:
argparse.py(2440):         elif (not arg_strings and action.nargs == ZERO_OR_MORE and
argparse.py(2449):         elif len(arg_strings) == 1 and action.nargs in [None, OPTIONAL]:
argparse.py(2450):             arg_string, = arg_strings
argparse.py(2451):             value = self._get_value(action, arg_string)
 --- modulename: argparse, funcname: _get_value
argparse.py(2477):         type_func = self._registry_get('type', action.type, action.type)
 --- modulename: argparse, funcname: _registry_get
argparse.py(1368):         return self._registries[registry_name].get(value, default)
argparse.py(2478):         if not callable(type_func):
argparse.py(2483):         try:
argparse.py(2484):             result = type_func(arg_string)
argparse.py(2500):         return result
argparse.py(2452):             self._check_value(action, value)
 --- modulename: argparse, funcname: _check_value
argparse.py(2504):         if action.choices is not None and value not in action.choices:
argparse.py(2474):         return value
argparse.py(1925):             if argument_values is not action.default:
argparse.py(1926):                 seen_non_default_actions.add(action)
argparse.py(1927):                 for conflict_action in action_conflicts.get(action, []):
argparse.py(1935):             if argument_values is not SUPPRESS:
argparse.py(1936):                 action(self, namespace, argument_values, option_string)
 --- modulename: argparse, funcname: __call__
argparse.py(936):         setattr(namespace, self.dest, values)
argparse.py(2007):             for action, args, option_string in action_tuples:
argparse.py(2009):             return stop
argparse.py(2042):         while start_index <= max_option_string_index:
argparse.py(2071):         stop_index = consume_positionals(start_index)
 --- modulename: argparse, funcname: consume_positionals
argparse.py(2018):             match_partial = self._match_arguments_partial
argparse.py(2019):             selected_pattern = arg_strings_pattern[start_index:]
argparse.py(2020):             arg_counts = match_partial(positionals, selected_pattern)
 --- modulename: argparse, funcname: _match_arguments_partial
argparse.py(2171):         result = []
argparse.py(2172):         for i in range(len(actions), 0, -1):
argparse.py(2182):         return result
argparse.py(2024):             for action, arg_count in zip(positionals, arg_counts):
argparse.py(2031):             positionals[:] = positionals[len(arg_counts):]
argparse.py(2032):             return start_index
argparse.py(2074):         extras.extend(arg_strings[stop_index:])
argparse.py(2078):         required_actions = []
argparse.py(2079):         for action in self._actions:
argparse.py(2080):             if action not in seen_actions:
argparse.py(2079):         for action in self._actions:
argparse.py(2080):             if action not in seen_actions:
argparse.py(2079):         for action in self._actions:
argparse.py(2080):             if action not in seen_actions:
argparse.py(2081):                 if action.required:
argparse.py(2088):                     if (action.default is not None and
argparse.py(2089):                         isinstance(action.default, str) and
argparse.py(2088):                     if (action.default is not None and
argparse.py(2079):         for action in self._actions:
argparse.py(2080):             if action not in seen_actions:
argparse.py(2081):                 if action.required:
argparse.py(2088):                     if (action.default is not None and
argparse.py(2089):                         isinstance(action.default, str) and
argparse.py(2088):                     if (action.default is not None and
argparse.py(2079):         for action in self._actions:
argparse.py(2095):         if required_actions:
argparse.py(2100):         for group in self._mutually_exclusive_groups:
argparse.py(2115):         return namespace, extras
argparse.py(1866):         if hasattr(namespace, _UNRECOGNIZED_ARGS_ATTR):
argparse.py(1869):         return namespace, args
argparse.py(1827):         if argv:
argparse.py(1830):         return args
input_handler.py(184):         if cmd_args.help:
input_handler.py(194):         if cmd_args.source is None and cmd_args.input is None:
input_handler.py(198):         self.args["source_file_parameter"] = cmd_args.source
input_handler.py(199):         self.args["input_file_parameter"] = cmd_args.input
interpret.py(35): inpt.parse_input()
 --- modulename: input_handler, funcname: parse_input
input_handler.py(220):         if self.args["input_file_parameter"] is not None:
input_handler.py(221):             self.input_file = self.load_file(self.args["input_file_parameter"])
 --- modulename: input_handler, funcname: load_file
input_handler.py(206):         try:
input_handler.py(207):             file = open(file_name)
 --- modulename: codecs, funcname: __init__
codecs.py(310):         IncrementalDecoder.__init__(self, errors)
 --- modulename: codecs, funcname: __init__
codecs.py(268):         self.errors = errors
codecs.py(312):         self.buffer = b""
input_handler.py(208):             file_content = file.read()
 --- modulename: codecs, funcname: decode
codecs.py(321):         data = self.buffer + input
codecs.py(322):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(324):         self.buffer = data[consumed:]
codecs.py(325):         return result
input_handler.py(209):             file.close()
input_handler.py(210):             return file_content
input_handler.py(226):         if self.args["source_file_parameter"] is not None:
input_handler.py(227):             self.source_file = self.load_file(
input_handler.py(228):                     self.args["source_file_parameter"])
input_handler.py(227):             self.source_file = self.load_file(
 --- modulename: input_handler, funcname: load_file
input_handler.py(206):         try:
input_handler.py(207):             file = open(file_name)
 --- modulename: codecs, funcname: __init__
codecs.py(310):         IncrementalDecoder.__init__(self, errors)
 --- modulename: codecs, funcname: __init__
codecs.py(268):         self.errors = errors
codecs.py(312):         self.buffer = b""
input_handler.py(208):             file_content = file.read()
 --- modulename: codecs, funcname: decode
codecs.py(321):         data = self.buffer + input
codecs.py(322):         (result, consumed) = self._buffer_decode(data, self.errors, final)
codecs.py(324):         self.buffer = data[consumed:]
codecs.py(325):         return result
input_handler.py(209):             file.close()
input_handler.py(210):             return file_content
interpret.py(36): inpt.convert_source()
 --- modulename: input_handler, funcname: convert_source
input_handler.py(234):         try:
input_handler.py(235):             self.source_file = etree.fromstring(self.source_file.encode())
interpret.py(37): inpt.verify_structure()
 --- modulename: input_handler, funcname: verify_structure
input_handler.py(244):         top_elements = self.source_file.xpath("/*")
input_handler.py(245):         if len(list(top_elements)) != 1 or top_elements[0].tag != "program":
input_handler.py(249):         for element in self.source_file.xpath("/program/*"):
input_handler.py(250):             if element.tag != "instruction":
input_handler.py(255):             if not InstructionVerify.verify_instruction(
input_handler.py(256):                     element, self.instruction_orders):
input_handler.py(255):             if not InstructionVerify.verify_instruction(
 --- modulename: input_handler, funcname: verify_instruction
input_handler.py(117):         order = instruction_xml.get("order")
input_handler.py(118):         if order is None:
input_handler.py(122):         order = int(order)
input_handler.py(126):         if order <= 0 or order in orders:
input_handler.py(130):         orders.add(order)
input_handler.py(131):         opcode = instruction_xml.get("opcode")
input_handler.py(133):         if opcode is None:
input_handler.py(138):         if opcode not in instructions_dic:
input_handler.py(143):         expected_num_args = len(instructions_dic[opcode])
input_handler.py(144):         arg_numbers = set()
input_handler.py(145):         for index, child in enumerate(instruction_xml.iterchildren()):
input_handler.py(147):             if not re.match(r"arg[0-9]+", child.tag) or int(child.tag[3:]) in arg_numbers:
 --- modulename: re, funcname: match
re.py(190):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
re.py(290):     if isinstance(flags, RegexFlag):
re.py(292):     try:
re.py(293):         return _cache[type(pattern), pattern, flags]
re.py(294):     except KeyError:
re.py(295):         pass
re.py(296):     if isinstance(pattern, Pattern):
re.py(301):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(620):     return isinstance(obj, (str, bytes))
re.py(303):     p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(786):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(620):     return isinstance(obj, (str, bytes))
sre_compile.py(787):         pattern = p
sre_compile.py(788):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(947):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(226):         self.istext = isinstance(string, str)
sre_parse.py(227):         self.string = string
sre_parse.py(228):         if not self.istext:
sre_parse.py(230):         self.decoded_string = string
sre_parse.py(231):         self.index = 0
sre_parse.py(232):         self.next = None
sre_parse.py(233):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(949):     if state is None:
sre_parse.py(950):         state = State()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(77):         self.flags = 0
sre_parse.py(78):         self.groupdict = {}
sre_parse.py(79):         self.groupwidths = [None]  # group 0
sre_parse.py(80):         self.lookbehindgroups = None
sre_parse.py(81):         self.grouprefpos = {}
sre_parse.py(951):     state.flags = flags
sre_parse.py(952):     state.str = str
sre_parse.py(954):     try:
sre_parse.py(955):         p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(439):     items = []
sre_parse.py(440):     itemsappend = items.append
sre_parse.py(441):     sourcematch = source.match
sre_parse.py(442):     start = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(443):     while True:
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
sre_parse.py(445):                            not nested and not items))
sre_parse.py(444):         itemsappend(_parse(source, state, verbose, nested + 1,
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(496):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(115):             data = []
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(499):     subpatternappend = subpattern.append
sre_parse.py(500):     sourceget = source.get
sre_parse.py(501):     sourcematch = source.match
sre_parse.py(502):     _len = len
sre_parse.py(503):     _ord = ord
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(530):             subpatternappend((LITERAL, _ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(533):             here = source.tell() - 1
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(535):             set = []
sre_parse.py(536):             setappend = set.append
sre_parse.py(539):             if source.next == '[':
sre_parse.py(545):             negate = sourcematch("^")
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(554):                 elif this[0] == "\\":
sre_parse.py(557):                     if set and this in '-&~|' and source.next == this:
sre_parse.py(568):                     code1 = LITERAL, _ord(this)
sre_parse.py(569):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(252):             self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(253):             return True
sre_parse.py(571):                     that = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(572):                     if that is None:
sre_parse.py(575):                     if that == "]":
sre_parse.py(581):                     if that[0] == "\\":
sre_parse.py(584):                         if that == '-':
sre_parse.py(591):                         code2 = LITERAL, _ord(that)
sre_parse.py(592):                     if code1[0] != LITERAL or code2[0] != LITERAL:
sre_parse.py(595):                     lo = code1[1]
sre_parse.py(596):                     hi = code2[1]
sre_parse.py(597):                     if hi < lo:
sre_parse.py(600):                     setappend((RANGE, (lo, hi)))
sre_parse.py(547):             while True:
sre_parse.py(548):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(241):         if char == "\\":
sre_parse.py(248):         self.index = index + 1
sre_parse.py(249):         self.next = char
sre_parse.py(258):         return this
sre_parse.py(549):                 if this is None:
sre_parse.py(552):                 if this == "]" and set:
sre_parse.py(553):                     break
sre_parse.py(606):             set = _uniq(set)
 --- modulename: sre_parse, funcname: _uniq
sre_parse.py(434):     return list(dict.fromkeys(items))
sre_parse.py(608):             if _len(set) == 1 and set[0][0] is LITERAL:
sre_parse.py(615):                 if negate:
sre_parse.py(619):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(174):         self.data.append(code)
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(510):         if this in "|)":
sre_parse.py(512):         sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(256):         this = self.next
sre_parse.py(257):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(235):         index = self.index
sre_parse.py(236):         try:
sre_parse.py(237):             char = self.decoded_string[index]
sre_parse.py(238):         except IndexError:
sre_parse.py(239):             self.next = None
sre_parse.py(240):             return
sre_parse.py(258):         return this
sre_parse.py(514):         if verbose:
sre_parse.py(525):         if this[0] == "\\":
sre_parse.py(529):         elif this not in SPECIAL_CHARS:
sre_parse.py(532):         elif this == "[":
sre_parse.py(621):         elif this in REPEAT_CHARS:
sre_parse.py(623):             here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(288):         return self.index - len(self.next or '')
sre_parse.py(624):             if this == "?":
sre_parse.py(626):             elif this == "*":
sre_parse.py(629):             elif this == "+":
sre_parse.py(630):                 min, max = 1, MAXREPEAT
sre_parse.py(664):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(665):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(167):             return SubPattern(self.state, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(113):         self.state = state
sre_parse.py(114):         if data is None:
sre_parse.py(116):         self.data = data
sre_parse.py(117):         self.width = None
sre_parse.py(668):             if not item or item[0][0] is AT:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(671):             if item[0][0] in _REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(674):             if item[0][0] is SUBPATTERN:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(678):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(681):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(170):         self.data[index] = code
sre_parse.py(505):     while True:
sre_parse.py(507):         this = source.next
sre_parse.py(508):         if this is None:
sre_parse.py(509):             break # end of pattern
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(860):         op, av = subpattern[i]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_parse.py(861):         if op is SUBPATTERN:
sre_parse.py(859):     for i in range(len(subpattern))[::-1]:
sre_parse.py(866):     return subpattern
sre_parse.py(446):         if not sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(251):         if char == self.next:
sre_parse.py(254):         return False
sre_parse.py(447):             break
sre_parse.py(449):     if len(items) == 1:
sre_parse.py(450):         return items[0]
sre_parse.py(965):     p.state.flags = fix_flags(str, p.state.flags)
 --- modulename: sre_parse, funcname: fix_flags
sre_parse.py(930):     if isinstance(src, str):
sre_parse.py(931):         if flags & SRE_FLAG_LOCALE:
sre_parse.py(933):         if not flags & SRE_FLAG_ASCII:
sre_parse.py(934):             flags |= SRE_FLAG_UNICODE
sre_parse.py(942):     return flags
sre_parse.py(967):     if source.next is not None:
sre_parse.py(971):     for g in p.state.grouprefpos:
sre_parse.py(976):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(979):     return p
sre_compile.py(792):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(624):     flags = p.state.flags | flags
sre_compile.py(625):     code = []
sre_compile.py(628):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(564):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(199):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(177):         if self.width is not None:
sre_parse.py(179):         lo = hi = 0
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(181):             if op is BRANCH:
sre_parse.py(190):             elif op is CALL:
sre_parse.py(194):             elif op is SUBPATTERN:
sre_parse.py(198):             elif op in _REPEATCODES:
sre_parse.py(202):             elif op in _UNITCODES:
sre_parse.py(203):                 lo = lo + 1
sre_parse.py(204):                 hi = hi + 1
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_parse.py(200):                 lo = lo + i * av[0]
sre_parse.py(201):                 hi = hi + j * av[1]
sre_parse.py(180):         for op, av in self.data:
sre_parse.py(221):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(222):         return self.width
sre_compile.py(565):     if hi > MAXCODE:
sre_compile.py(567):     if lo == 0:
sre_compile.py(571):     prefix = []
sre_compile.py(572):     prefix_skip = 0
sre_compile.py(573):     charset = [] # not used
sre_compile.py(574):     if not (flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE):
sre_compile.py(576):         prefix, prefix_skip, got_all = _get_literal_prefix(pattern, flags)
 --- modulename: sre_compile, funcname: _get_literal_prefix
sre_compile.py(487):     prefix = []
sre_compile.py(488):     prefixappend = prefix.append
sre_compile.py(489):     prefix_skip = None
sre_compile.py(490):     iscased = _get_iscased(flags)
 --- modulename: sre_compile, funcname: _get_iscased
sre_compile.py(478):     if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(479):         return None
sre_compile.py(491):     for op, av in pattern.data:
sre_compile.py(492):         if op is LITERAL:
sre_compile.py(493):             if iscased and iscased(av):
sre_compile.py(495):             prefixappend(av)
sre_compile.py(491):     for op, av in pattern.data:
sre_compile.py(492):         if op is LITERAL:
sre_compile.py(493):             if iscased and iscased(av):
sre_compile.py(495):             prefixappend(av)
sre_compile.py(491):     for op, av in pattern.data:
sre_compile.py(492):         if op is LITERAL:
sre_compile.py(493):             if iscased and iscased(av):
sre_compile.py(495):             prefixappend(av)
sre_compile.py(491):     for op, av in pattern.data:
sre_compile.py(492):         if op is LITERAL:
sre_compile.py(496):         elif op is SUBPATTERN:
sre_compile.py(511):             break
sre_compile.py(514):     return prefix, prefix_skip, False
sre_compile.py(578):         if not prefix:
sre_compile.py(585):     emit = code.append
sre_compile.py(586):     emit(INFO)
sre_compile.py(587):     skip = len(code); emit(0)
sre_compile.py(589):     mask = 0
sre_compile.py(590):     if prefix:
sre_compile.py(591):         mask = SRE_INFO_PREFIX
sre_compile.py(592):         if prefix_skip is None and got_all:
sre_compile.py(596):     emit(mask)
sre_compile.py(598):     if lo < MAXCODE:
sre_compile.py(599):         emit(lo)
sre_compile.py(603):     emit(min(hi, MAXCODE))
sre_compile.py(605):     if prefix:
sre_compile.py(606):         emit(len(prefix)) # length
sre_compile.py(607):         if prefix_skip is None:
sre_compile.py(608):             prefix_skip =  len(prefix)
sre_compile.py(609):         emit(prefix_skip) # skip
sre_compile.py(610):         code.extend(prefix)
sre_compile.py(612):         code.extend(_generate_overlap_table(prefix))
 --- modulename: sre_compile, funcname: _generate_overlap_table
sre_compile.py(465):     table = [0] * len(prefix)
sre_compile.py(466):     for i in range(1, len(prefix)):
sre_compile.py(467):         idx = table[i - 1]
sre_compile.py(468):         while prefix[i] != prefix[idx]:
sre_compile.py(469):             if idx == 0:
sre_compile.py(470):                 table[i] = 0
sre_compile.py(471):                 break
sre_compile.py(466):     for i in range(1, len(prefix)):
sre_compile.py(467):         idx = table[i - 1]
sre_compile.py(468):         while prefix[i] != prefix[idx]:
sre_compile.py(469):             if idx == 0:
sre_compile.py(470):                 table[i] = 0
sre_compile.py(471):                 break
sre_compile.py(466):     for i in range(1, len(prefix)):
sre_compile.py(475):     return table
sre_compile.py(617):     code[skip] = len(code) - skip
sre_compile.py(631):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(108):             if not flags & SRE_FLAG_IGNORECASE:
sre_compile.py(109):                 emit(op)
sre_compile.py(110):                 emit(av)
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(148):         elif op is ANY:
sre_compile.py(153):         elif op in REPEATING_CODES:
sre_compile.py(154):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(156):             if _simple(av[2]):
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(449):     if len(p) != 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(162):         return len(self.data)
sre_compile.py(451):     op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(452):     if op is SUBPATTERN:
sre_compile.py(454):     return op in _UNIT_CODES
sre_compile.py(157):                 if op is MAX_REPEAT:
sre_compile.py(158):                     emit(REPEAT_ONE)
sre_compile.py(161):                 skip = _len(code); emit(0)
sre_compile.py(162):                 emit(av[0])
sre_compile.py(163):                 emit(av[1])
sre_compile.py(164):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(89):     emit = code.append
sre_compile.py(90):     _len = len
sre_compile.py(91):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(92):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(93):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(94):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(95):     iscased = None
sre_compile.py(96):     tolower = None
sre_compile.py(97):     fixes = None
sre_compile.py(98):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(107):         if op in LITERAL_CODES:
sre_compile.py(135):         elif op is IN:
sre_compile.py(136):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(294):     out = []
sre_compile.py(295):     tail = []
sre_compile.py(296):     charmap = bytearray(256)
sre_compile.py(297):     hascased = False
sre_compile.py(298):     for op, av in charset:
sre_compile.py(299):         while True:
sre_compile.py(300):             try:
sre_compile.py(301):                 if op is LITERAL:
sre_compile.py(312):                 elif op is RANGE:
sre_compile.py(313):                     r = range(av[0], av[1]+1)
sre_compile.py(314):                     if fixup:
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(328):                             charmap[i] = 1
sre_compile.py(327):                         for i in r:
sre_compile.py(355):             break
sre_compile.py(298):     for op, av in charset:
sre_compile.py(358):     runs = []
sre_compile.py(359):     q = 0
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(364):         if len(runs) >= 2:
sre_compile.py(367):         q = charmap.find(0, p)
sre_compile.py(368):         if q < 0:
sre_compile.py(371):         runs.append((p, q))
sre_compile.py(360):     while True:
sre_compile.py(361):         p = charmap.find(1, q)
sre_compile.py(362):         if p < 0:
sre_compile.py(363):             break
sre_compile.py(372):     if runs is not None:
sre_compile.py(374):         for p, q in runs:
sre_compile.py(375):             if q - p == 1:
sre_compile.py(378):                 out.append((RANGE, (p, q - 1)))
sre_compile.py(374):         for p, q in runs:
sre_compile.py(379):         out += tail
sre_compile.py(381):         if hascased or len(out) < len(charset):
sre_compile.py(384):         return charset, hascased
sre_compile.py(137):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:
sre_compile.py(139):             elif not hascased:
sre_compile.py(140):                 emit(IN)
sre_compile.py(145):             skip = _len(code); emit(0)
sre_compile.py(146):             _compile_charset(charset, flags, code)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(267):     emit = code.append
sre_compile.py(268):     for op, av in charset:
sre_compile.py(269):         emit(op)
sre_compile.py(270):         if op is NEGATE:
sre_compile.py(272):         elif op is LITERAL:
sre_compile.py(274):         elif op is RANGE or op is RANGE_UNI_IGNORE:
sre_compile.py(275):             emit(av[0])
sre_compile.py(276):             emit(av[1])
sre_compile.py(268):     for op, av in charset:
sre_compile.py(290):     emit(FAILURE)
sre_compile.py(147):             code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(166):         if isinstance(index, slice):
sre_parse.py(168):         return self.data[index]
sre_compile.py(165):                 emit(SUCCESS)
sre_compile.py(166):                 code[skip] = _len(code) - skip
sre_compile.py(106):     for op, av in pattern:
sre_compile.py(633):     code.append(SUCCESS)
sre_compile.py(635):     return code
sre_compile.py(794):     if flags & SRE_FLAG_DEBUG:
sre_compile.py(799):     groupindex = p.state.groupdict
sre_compile.py(800):     indexgroup = [None] * p.state.groups
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_compile.py(801):     for k, i in groupindex.items():
sre_compile.py(804):     return _sre.compile(
sre_compile.py(805):         pattern, flags | p.state.flags, code,
sre_compile.py(806):         p.state.groups-1,
 --- modulename: sre_parse, funcname: groups
sre_parse.py(84):         return len(self.groupwidths)
sre_compile.py(807):         groupindex, tuple(indexgroup)
sre_compile.py(804):     return _sre.compile(
re.py(304):     if not (flags & DEBUG):
 --- modulename: enum, funcname: __and__
enum.py(987):         if not isinstance(other, (self.__class__, int)):
enum.py(989):         return self.__class__(self._value_ & self.__class__(other)._value_)
 --- modulename: enum, funcname: __call__
enum.py(384):         if names is None:  # simple value lookup
enum.py(385):             return cls.__new__(cls, value)
 --- modulename: enum, funcname: __new__
enum.py(682):         if type(value) is cls:
enum.py(687):         try:
enum.py(688):             return cls._value2member_map_[value]
 --- modulename: enum, funcname: __call__
enum.py(384):         if names is None:  # simple value lookup
enum.py(385):             return cls.__new__(cls, value)
 --- modulename: enum, funcname: __new__
enum.py(682):         if type(value) is cls:
enum.py(687):         try:
enum.py(688):             return cls._value2member_map_[value]
re.py(305):         if len(_cache) >= _MAXCACHE:
re.py(311):         _cache[type(pattern), pattern, flags] = p
re.py(312):     return p
input_handler.py(151):             arg_numbers.add(int(child.tag[3:]))
input_handler.py(145):         for index, child in enumerate(instruction_xml.iterchildren()):
input_handler.py(153):         return len(arg_numbers) == expected_num_args
input_handler.py(249):         for element in self.source_file.xpath("/program/*"):
input_handler.py(250):             if element.tag != "instruction":
input_handler.py(255):             if not InstructionVerify.verify_instruction(
input_handler.py(256):                     element, self.instruction_orders):
input_handler.py(255):             if not InstructionVerify.verify_instruction(
 --- modulename: input_handler, funcname: verify_instruction
input_handler.py(117):         order = instruction_xml.get("order")
input_handler.py(118):         if order is None:
input_handler.py(122):         order = int(order)
input_handler.py(126):         if order <= 0 or order in orders:
input_handler.py(130):         orders.add(order)
input_handler.py(131):         opcode = instruction_xml.get("opcode")
input_handler.py(133):         if opcode is None:
input_handler.py(138):         if opcode not in instructions_dic:
input_handler.py(143):         expected_num_args = len(instructions_dic[opcode])
input_handler.py(144):         arg_numbers = set()
input_handler.py(145):         for index, child in enumerate(instruction_xml.iterchildren()):
input_handler.py(147):             if not re.match(r"arg[0-9]+", child.tag) or int(child.tag[3:]) in arg_numbers:
 --- modulename: re, funcname: match
re.py(190):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
re.py(290):     if isinstance(flags, RegexFlag):
re.py(292):     try:
re.py(293):         return _cache[type(pattern), pattern, flags]
input_handler.py(151):             arg_numbers.add(int(child.tag[3:]))
input_handler.py(145):         for index, child in enumerate(instruction_xml.iterchildren()):
input_handler.py(147):             if not re.match(r"arg[0-9]+", child.tag) or int(child.tag[3:]) in arg_numbers:
 --- modulename: re, funcname: match
re.py(190):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
re.py(290):     if isinstance(flags, RegexFlag):
re.py(292):     try:
re.py(293):         return _cache[type(pattern), pattern, flags]
input_handler.py(151):             arg_numbers.add(int(child.tag[3:]))
input_handler.py(145):         for index, child in enumerate(instruction_xml.iterchildren()):
input_handler.py(153):         return len(arg_numbers) == expected_num_args
input_handler.py(249):         for element in self.source_file.xpath("/program/*"):
input_handler.py(250):             if element.tag != "instruction":
input_handler.py(255):             if not InstructionVerify.verify_instruction(
input_handler.py(256):                     element, self.instruction_orders):
input_handler.py(255):             if not InstructionVerify.verify_instruction(
 --- modulename: input_handler, funcname: verify_instruction
input_handler.py(117):         order = instruction_xml.get("order")
input_handler.py(118):         if order is None:
input_handler.py(122):         order = int(order)
input_handler.py(126):         if order <= 0 or order in orders:
input_handler.py(130):         orders.add(order)
input_handler.py(131):         opcode = instruction_xml.get("opcode")
input_handler.py(133):         if opcode is None:
input_handler.py(138):         if opcode not in instructions_dic:
input_handler.py(143):         expected_num_args = len(instructions_dic[opcode])
input_handler.py(144):         arg_numbers = set()
input_handler.py(145):         for index, child in enumerate(instruction_xml.iterchildren()):
input_handler.py(147):             if not re.match(r"arg[0-9]+", child.tag) or int(child.tag[3:]) in arg_numbers:
 --- modulename: re, funcname: match
re.py(190):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
re.py(290):     if isinstance(flags, RegexFlag):
re.py(292):     try:
re.py(293):         return _cache[type(pattern), pattern, flags]
input_handler.py(151):             arg_numbers.add(int(child.tag[3:]))
input_handler.py(145):         for index, child in enumerate(instruction_xml.iterchildren()):
input_handler.py(153):         return len(arg_numbers) == expected_num_args
input_handler.py(249):         for element in self.source_file.xpath("/program/*"):
interpret.py(39): """
interpret.py(65): memory = Memory()
 --- modulename: memory, funcname: __call__
memory.py(45):         if cls not in cls._instances:
memory.py(46):             cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
 --- modulename: memory, funcname: __init__
memory.py(53):         self._global_frame = Frame()
 --- modulename: memory, funcname: __init__
memory.py(13):         self.variables: set[Variable] = {}
memory.py(54):         self._temporary_frame = None
memory.py(55):         self._frame_stack = []
memory.py(56):         self._data_stack = []
memory.py(47):         return cls._instances[cls]
interpret.py(66): interpreter = Interpreter(inpt.get_instructions())
 --- modulename: input_handler, funcname: get_instructions
input_handler.py(268):         instructions = []
input_handler.py(269):         for instruction in self.source_file.xpath("/program/*"):
input_handler.py(270):             opcode = instruction.get("opcode")
input_handler.py(271):             arguments = []
input_handler.py(272):             for argument in instruction.iterchildren():
input_handler.py(273):                 arg_type = ArgumentType.convert_to_enum(argument.get("type"))
 --- modulename: input_handler, funcname: convert_to_enum
input_handler.py(17):         if arg_type == "label":
input_handler.py(19):         elif arg_type == "var":
input_handler.py(20):             return ArgumentType.VAR
input_handler.py(274):                 arg_value = argument.text
input_handler.py(275):                 if arg_type == ArgumentType.SYMB:
input_handler.py(278):                     argument = Argument(arg_type, arg_value)
 --- modulename: input_handler, funcname: __init__
input_handler.py(32):         self.type_ = arg_type
input_handler.py(33):         self.value = value
input_handler.py(35):         self.datatype = datatype
input_handler.py(280):                 arguments.append(argument)
input_handler.py(272):             for argument in instruction.iterchildren():
input_handler.py(282):             order = int(instruction.get("order"))
input_handler.py(285):             instructions.append([order, opcode, arguments])
input_handler.py(269):         for instruction in self.source_file.xpath("/program/*"):
input_handler.py(270):             opcode = instruction.get("opcode")
input_handler.py(271):             arguments = []
input_handler.py(272):             for argument in instruction.iterchildren():
input_handler.py(273):                 arg_type = ArgumentType.convert_to_enum(argument.get("type"))
 --- modulename: input_handler, funcname: convert_to_enum
input_handler.py(17):         if arg_type == "label":
input_handler.py(19):         elif arg_type == "var":
input_handler.py(21):         elif arg_type == "type":
input_handler.py(24):             return ArgumentType.SYMB
input_handler.py(274):                 arg_value = argument.text
input_handler.py(275):                 if arg_type == ArgumentType.SYMB:
input_handler.py(276):                     argument = Argument(arg_type, arg_value, datatype=argument.get("type"))
 --- modulename: input_handler, funcname: __init__
input_handler.py(32):         self.type_ = arg_type
input_handler.py(33):         self.value = value
input_handler.py(35):         self.datatype = datatype
input_handler.py(280):                 arguments.append(argument)
input_handler.py(272):             for argument in instruction.iterchildren():
input_handler.py(273):                 arg_type = ArgumentType.convert_to_enum(argument.get("type"))
 --- modulename: input_handler, funcname: convert_to_enum
input_handler.py(17):         if arg_type == "label":
input_handler.py(19):         elif arg_type == "var":
input_handler.py(20):             return ArgumentType.VAR
input_handler.py(274):                 arg_value = argument.text
input_handler.py(275):                 if arg_type == ArgumentType.SYMB:
input_handler.py(278):                     argument = Argument(arg_type, arg_value)
 --- modulename: input_handler, funcname: __init__
input_handler.py(32):         self.type_ = arg_type
input_handler.py(33):         self.value = value
input_handler.py(35):         self.datatype = datatype
input_handler.py(280):                 arguments.append(argument)
input_handler.py(272):             for argument in instruction.iterchildren():
input_handler.py(282):             order = int(instruction.get("order"))
input_handler.py(285):             instructions.append([order, opcode, arguments])
input_handler.py(269):         for instruction in self.source_file.xpath("/program/*"):
input_handler.py(270):             opcode = instruction.get("opcode")
input_handler.py(271):             arguments = []
input_handler.py(272):             for argument in instruction.iterchildren():
input_handler.py(273):                 arg_type = ArgumentType.convert_to_enum(argument.get("type"))
 --- modulename: input_handler, funcname: convert_to_enum
input_handler.py(17):         if arg_type == "label":
input_handler.py(19):         elif arg_type == "var":
input_handler.py(20):             return ArgumentType.VAR
input_handler.py(274):                 arg_value = argument.text
input_handler.py(275):                 if arg_type == ArgumentType.SYMB:
input_handler.py(278):                     argument = Argument(arg_type, arg_value)
 --- modulename: input_handler, funcname: __init__
input_handler.py(32):         self.type_ = arg_type
input_handler.py(33):         self.value = value
input_handler.py(35):         self.datatype = datatype
input_handler.py(280):                 arguments.append(argument)
input_handler.py(272):             for argument in instruction.iterchildren():
input_handler.py(282):             order = int(instruction.get("order"))
input_handler.py(285):             instructions.append([order, opcode, arguments])
input_handler.py(269):         for instruction in self.source_file.xpath("/program/*"):
input_handler.py(287):         instructions.sort(key=lambda x: x[0])
 --- modulename: input_handler, funcname: <lambda>
input_handler.py(287):         instructions.sort(key=lambda x: x[0])
 --- modulename: input_handler, funcname: <lambda>
input_handler.py(287):         instructions.sort(key=lambda x: x[0])
 --- modulename: input_handler, funcname: <lambda>
input_handler.py(287):         instructions.sort(key=lambda x: x[0])
input_handler.py(290):         return [x[1:] for x in instructions]
 --- modulename: input_handler, funcname: <listcomp>
input_handler.py(290):         return [x[1:] for x in instructions]
input_handler.py(290):         return [x[1:] for x in instructions]
input_handler.py(290):         return [x[1:] for x in instructions]
input_handler.py(290):         return [x[1:] for x in instructions]
 --- modulename: interpret, funcname: __init__
interpret.py(11):         self._instructions = []
interpret.py(12):         self._create_instructions(instructions_raw)
 --- modulename: interpret, funcname: _create_instructions
interpret.py(19):         for opcode, args in instructions_raw:
interpret.py(21):             instruction_obj = getattr(InstructionsClass, opcode)(args)
 --- modulename: instructions, funcname: __init__
instructions.py(101):         super().__init__(self.__class__.__name__, args)
 --- modulename: instructions, funcname: __init__
instructions.py(39):         self.opcode = opcode
instructions.py(40):         self._args = args
instructions.py(41):         self.check_argument_types()
 --- modulename: instructions, funcname: check_argument_types
instructions.py(45):         for arg, expected_type in zip(self._args, instructions_dic[self.opcode]):
instructions.py(46):             if arg.datatype == "int":
instructions.py(54):             if arg.datatype == "float":
instructions.py(61):             if arg.datatype == "bool":
instructions.py(66):             if arg.type_ == ArgumentType.VAR and expected_type == ArgumentType.SYMB:
instructions.py(69):             if not arg.type_ == expected_type:
instructions.py(45):         for arg, expected_type in zip(self._args, instructions_dic[self.opcode]):
interpret.py(22):             self._instructions.append(instruction_obj)
interpret.py(19):         for opcode, args in instructions_raw:
interpret.py(21):             instruction_obj = getattr(InstructionsClass, opcode)(args)
 --- modulename: instructions, funcname: __init__
instructions.py(170):         super().__init__(self.__class__.__name__, args)
 --- modulename: instructions, funcname: __init__
instructions.py(39):         self.opcode = opcode
instructions.py(40):         self._args = args
instructions.py(41):         self.check_argument_types()
 --- modulename: instructions, funcname: check_argument_types
instructions.py(45):         for arg, expected_type in zip(self._args, instructions_dic[self.opcode]):
instructions.py(46):             if arg.datatype == "int":
instructions.py(54):             if arg.datatype == "float":
instructions.py(61):             if arg.datatype == "bool":
instructions.py(66):             if arg.type_ == ArgumentType.VAR and expected_type == ArgumentType.SYMB:
instructions.py(69):             if not arg.type_ == expected_type:
instructions.py(70):                 DEBUG_PRINT("Not good type ")
 --- modulename: debug, funcname: DEBUG_PRINT
debug.py(4):     if not DEBUG:
debug.py(5):         return
instructions.py(71):                 print(arg.type_, expected_type)
 --- modulename: input_handler, funcname: __str__
input_handler.py(28):         return self.name
 --- modulename: types, funcname: __get__
types.py(177):         if instance is None:
types.py(181):         elif self.fget is None:
types.py(183):         return self.fget(instance)
 --- modulename: enum, funcname: name
enum.py(799):         return self._name_
SYMB  --- modulename: input_handler, funcname: __str__
input_handler.py(28):         return self.name
 --- modulename: types, funcname: __get__
types.py(177):         if instance is None:
types.py(181):         elif self.fget is None:
types.py(183):         return self.fget(instance)
 --- modulename: enum, funcname: name
enum.py(799):         return self._name_
VAR
instructions.py(72):                 print(self.opcode)
MOVE
instructions.py(73):                 exit(ErrorCodes.InputStructureBad)
 --- modulename: _sitebuiltins, funcname: __call__
_sitebuiltins.py(22):         try:
_sitebuiltins.py(23):             sys.stdin.close()
_sitebuiltins.py(26):         raise SystemExit(code)
